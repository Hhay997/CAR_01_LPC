
20201120C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000578c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000037d8  08005898  08005898  00015898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009070  08009070  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08009070  08009070  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009070  08009070  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009070  08009070  00019070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009074  08009074  00019074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08009078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  20000014  0800908c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  0800908c  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_line   0001233a  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   000174bb  00000000  00000000  00032377  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000347d  00000000  00000000  00049832  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001188  00000000  00000000  0004ccb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0008f78b  00000000  00000000  0004de38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000fe0  00000000  00000000  000dd5c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0001af8d  00000000  00000000  000de5a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f9535  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046e4  00000000  00000000  000f95b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08005880 	.word	0x08005880

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08005880 	.word	0x08005880

0800014c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800014c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800014e:	e003      	b.n	8000158 <LoopCopyDataInit>

08000150 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000150:	4b0b      	ldr	r3, [pc, #44]	; (8000180 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000152:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000154:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000156:	3104      	adds	r1, #4

08000158 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000158:	480a      	ldr	r0, [pc, #40]	; (8000184 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800015a:	4b0b      	ldr	r3, [pc, #44]	; (8000188 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800015c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800015e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000160:	d3f6      	bcc.n	8000150 <CopyDataInit>
  ldr r2, =_sbss
 8000162:	4a0a      	ldr	r2, [pc, #40]	; (800018c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000164:	e002      	b.n	800016c <LoopFillZerobss>

08000166 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000166:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000168:	f842 3b04 	str.w	r3, [r2], #4

0800016c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800016c:	4b08      	ldr	r3, [pc, #32]	; (8000190 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800016e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000170:	d3f9      	bcc.n	8000166 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000172:	f002 ff31 	bl	8002fd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000176:	f005 fb57 	bl	8005828 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800017a:	f002 fcf7 	bl	8002b6c <main>
  bx lr
 800017e:	4770      	bx	lr
  ldr r3, =_sidata
 8000180:	08009078 	.word	0x08009078
  ldr r0, =_sdata
 8000184:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000188:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 800018c:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 8000190:	20000290 	.word	0x20000290

08000194 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000194:	e7fe      	b.n	8000194 <ADC1_2_IRQHandler>

08000196 <SYS_DEFEND>:
int mode_1=0;
int warning=0;
int warning_1=0;

void SYS_DEFEND(unsigned char* buf)
{
 8000196:	b580      	push	{r7, lr}
 8000198:	b082      	sub	sp, #8
 800019a:	af00      	add	r7, sp, #0
 800019c:	6078      	str	r0, [r7, #4]
				SYS_LCD();


			}*/

				 SYS_WI();
 800019e:	f000 f805 	bl	80001ac <SYS_WI>

			//DATA_ERROR();



	}
 80001a2:	bf00      	nop
 80001a4:	3708      	adds	r7, #8
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
	...

080001ac <SYS_WI>:
	  		delay_ms(3000);
}


void SYS_WI(void)
{
 80001ac:	b5b0      	push	{r4, r5, r7, lr}
 80001ae:	b088      	sub	sp, #32
 80001b0:	af04      	add	r7, sp, #16
		//LCD_Init();//LCD初始化
		//LCD_Fill(0,0,LCD_W,LCD_H,BLACK );

	//判断是否有险情

		unsigned char date[9]={0};
 80001b2:	463b      	mov	r3, r7
 80001b4:	2200      	movs	r2, #0
 80001b6:	601a      	str	r2, [r3, #0]
 80001b8:	605a      	str	r2, [r3, #4]
 80001ba:	721a      	strb	r2, [r3, #8]
		warning=0;
 80001bc:	4b02      	ldr	r3, [pc, #8]	; (80001c8 <SYS_WI+0x1c>)
 80001be:	2200      	movs	r2, #0
 80001c0:	601a      	str	r2, [r3, #0]
		for(int i=0;i<6;i++)
 80001c2:	2300      	movs	r3, #0
 80001c4:	60fb      	str	r3, [r7, #12]
 80001c6:	e016      	b.n	80001f6 <SYS_WI+0x4a>
 80001c8:	20000040 	.word	0x20000040
		{
			if(date[i]==1)
 80001cc:	463a      	mov	r2, r7
 80001ce:	68fb      	ldr	r3, [r7, #12]
 80001d0:	4413      	add	r3, r2
 80001d2:	781b      	ldrb	r3, [r3, #0]
 80001d4:	2b01      	cmp	r3, #1
 80001d6:	d10b      	bne.n	80001f0 <SYS_WI+0x44>
			{
				warning=warning+i*i*i;
 80001d8:	68fb      	ldr	r3, [r7, #12]
 80001da:	68fa      	ldr	r2, [r7, #12]
 80001dc:	fb02 f303 	mul.w	r3, r2, r3
 80001e0:	68fa      	ldr	r2, [r7, #12]
 80001e2:	fb02 f203 	mul.w	r2, r2, r3
 80001e6:	4b91      	ldr	r3, [pc, #580]	; (800042c <SYS_WI+0x280>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4413      	add	r3, r2
 80001ec:	4a8f      	ldr	r2, [pc, #572]	; (800042c <SYS_WI+0x280>)
 80001ee:	6013      	str	r3, [r2, #0]
		for(int i=0;i<6;i++)
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	3301      	adds	r3, #1
 80001f4:	60fb      	str	r3, [r7, #12]
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	2b05      	cmp	r3, #5
 80001fa:	dde7      	ble.n	80001cc <SYS_WI+0x20>
			}
		}
		if(warning_1!=warning){page=page_1=4;  line_1=line;  mode_1=mode;}//防止在险情时第一次扫描进入正常页面
 80001fc:	4b8c      	ldr	r3, [pc, #560]	; (8000430 <SYS_WI+0x284>)
 80001fe:	681a      	ldr	r2, [r3, #0]
 8000200:	4b8a      	ldr	r3, [pc, #552]	; (800042c <SYS_WI+0x280>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	429a      	cmp	r2, r3
 8000206:	d00e      	beq.n	8000226 <SYS_WI+0x7a>
 8000208:	4b8a      	ldr	r3, [pc, #552]	; (8000434 <SYS_WI+0x288>)
 800020a:	2204      	movs	r2, #4
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	4b89      	ldr	r3, [pc, #548]	; (8000434 <SYS_WI+0x288>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a89      	ldr	r2, [pc, #548]	; (8000438 <SYS_WI+0x28c>)
 8000214:	6013      	str	r3, [r2, #0]
 8000216:	4b89      	ldr	r3, [pc, #548]	; (800043c <SYS_WI+0x290>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4a89      	ldr	r2, [pc, #548]	; (8000440 <SYS_WI+0x294>)
 800021c:	6013      	str	r3, [r2, #0]
 800021e:	4b89      	ldr	r3, [pc, #548]	; (8000444 <SYS_WI+0x298>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	4a89      	ldr	r2, [pc, #548]	; (8000448 <SYS_WI+0x29c>)
 8000224:	6013      	str	r3, [r2, #0]
	    //限制页数
		if(page>4){page=0;}
 8000226:	4b84      	ldr	r3, [pc, #528]	; (8000438 <SYS_WI+0x28c>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	2b04      	cmp	r3, #4
 800022c:	dd02      	ble.n	8000234 <SYS_WI+0x88>
 800022e:	4b82      	ldr	r3, [pc, #520]	; (8000438 <SYS_WI+0x28c>)
 8000230:	2200      	movs	r2, #0
 8000232:	601a      	str	r2, [r3, #0]
		if(page<0){page=4;}
 8000234:	4b80      	ldr	r3, [pc, #512]	; (8000438 <SYS_WI+0x28c>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	2b00      	cmp	r3, #0
 800023a:	da02      	bge.n	8000242 <SYS_WI+0x96>
 800023c:	4b7e      	ldr	r3, [pc, #504]	; (8000438 <SYS_WI+0x28c>)
 800023e:	2204      	movs	r2, #4
 8000240:	601a      	str	r2, [r3, #0]

			//翻页，选择按钮判断，低电平有效
		if(LCD_Forward()==0)
 8000242:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000246:	4881      	ldr	r0, [pc, #516]	; (800044c <SYS_WI+0x2a0>)
 8000248:	f003 fc48 	bl	8003adc <HAL_GPIO_ReadPin>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d11a      	bne.n	8000288 <SYS_WI+0xdc>
		{
			line++;
 8000252:	4b7a      	ldr	r3, [pc, #488]	; (800043c <SYS_WI+0x290>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	3301      	adds	r3, #1
 8000258:	4a78      	ldr	r2, [pc, #480]	; (800043c <SYS_WI+0x290>)
 800025a:	6013      	str	r3, [r2, #0]
			if(page==0){if(line>8){line=0;}}
 800025c:	4b76      	ldr	r3, [pc, #472]	; (8000438 <SYS_WI+0x28c>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d106      	bne.n	8000272 <SYS_WI+0xc6>
 8000264:	4b75      	ldr	r3, [pc, #468]	; (800043c <SYS_WI+0x290>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	2b08      	cmp	r3, #8
 800026a:	dd02      	ble.n	8000272 <SYS_WI+0xc6>
 800026c:	4b73      	ldr	r3, [pc, #460]	; (800043c <SYS_WI+0x290>)
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
			if(page!=0){if(line>2){line=0;}}
 8000272:	4b71      	ldr	r3, [pc, #452]	; (8000438 <SYS_WI+0x28c>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	2b00      	cmp	r3, #0
 8000278:	d006      	beq.n	8000288 <SYS_WI+0xdc>
 800027a:	4b70      	ldr	r3, [pc, #448]	; (800043c <SYS_WI+0x290>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	2b02      	cmp	r3, #2
 8000280:	dd02      	ble.n	8000288 <SYS_WI+0xdc>
 8000282:	4b6e      	ldr	r3, [pc, #440]	; (800043c <SYS_WI+0x290>)
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]
		}
		if(LCD_Backward()==0)
 8000288:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800028c:	486f      	ldr	r0, [pc, #444]	; (800044c <SYS_WI+0x2a0>)
 800028e:	f003 fc25 	bl	8003adc <HAL_GPIO_ReadPin>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d11a      	bne.n	80002ce <SYS_WI+0x122>
		{
			line--;
 8000298:	4b68      	ldr	r3, [pc, #416]	; (800043c <SYS_WI+0x290>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	3b01      	subs	r3, #1
 800029e:	4a67      	ldr	r2, [pc, #412]	; (800043c <SYS_WI+0x290>)
 80002a0:	6013      	str	r3, [r2, #0]
			if(page==0){if(line<0){line=8;}}
 80002a2:	4b65      	ldr	r3, [pc, #404]	; (8000438 <SYS_WI+0x28c>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d106      	bne.n	80002b8 <SYS_WI+0x10c>
 80002aa:	4b64      	ldr	r3, [pc, #400]	; (800043c <SYS_WI+0x290>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	da02      	bge.n	80002b8 <SYS_WI+0x10c>
 80002b2:	4b62      	ldr	r3, [pc, #392]	; (800043c <SYS_WI+0x290>)
 80002b4:	2208      	movs	r2, #8
 80002b6:	601a      	str	r2, [r3, #0]
			if(page!=0){if(line<0){line=2;}}
 80002b8:	4b5f      	ldr	r3, [pc, #380]	; (8000438 <SYS_WI+0x28c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d006      	beq.n	80002ce <SYS_WI+0x122>
 80002c0:	4b5e      	ldr	r3, [pc, #376]	; (800043c <SYS_WI+0x290>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	da02      	bge.n	80002ce <SYS_WI+0x122>
 80002c8:	4b5c      	ldr	r3, [pc, #368]	; (800043c <SYS_WI+0x290>)
 80002ca:	2202      	movs	r2, #2
 80002cc:	601a      	str	r2, [r3, #0]
		}
		if(LCD_Select()==0)
 80002ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002d2:	485e      	ldr	r0, [pc, #376]	; (800044c <SYS_WI+0x2a0>)
 80002d4:	f003 fc02 	bl	8003adc <HAL_GPIO_ReadPin>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8086 	bne.w	80003ec <SYS_WI+0x240>
		{
			if(page==0){if(line==1){mode=1;}}
 80002e0:	4b55      	ldr	r3, [pc, #340]	; (8000438 <SYS_WI+0x28c>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d106      	bne.n	80002f6 <SYS_WI+0x14a>
 80002e8:	4b54      	ldr	r3, [pc, #336]	; (800043c <SYS_WI+0x290>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	2b01      	cmp	r3, #1
 80002ee:	d102      	bne.n	80002f6 <SYS_WI+0x14a>
 80002f0:	4b54      	ldr	r3, [pc, #336]	; (8000444 <SYS_WI+0x298>)
 80002f2:	2201      	movs	r2, #1
 80002f4:	601a      	str	r2, [r3, #0]
			if(page==0){if(line==2){mode=2;}}
 80002f6:	4b50      	ldr	r3, [pc, #320]	; (8000438 <SYS_WI+0x28c>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d106      	bne.n	800030c <SYS_WI+0x160>
 80002fe:	4b4f      	ldr	r3, [pc, #316]	; (800043c <SYS_WI+0x290>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	2b02      	cmp	r3, #2
 8000304:	d102      	bne.n	800030c <SYS_WI+0x160>
 8000306:	4b4f      	ldr	r3, [pc, #316]	; (8000444 <SYS_WI+0x298>)
 8000308:	2202      	movs	r2, #2
 800030a:	601a      	str	r2, [r3, #0]
			if(page==0){if(line==6||line==5||line==4||line==3){page=line-2;line=0;}}
 800030c:	4b4a      	ldr	r3, [pc, #296]	; (8000438 <SYS_WI+0x28c>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d117      	bne.n	8000344 <SYS_WI+0x198>
 8000314:	4b49      	ldr	r3, [pc, #292]	; (800043c <SYS_WI+0x290>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	2b06      	cmp	r3, #6
 800031a:	d00b      	beq.n	8000334 <SYS_WI+0x188>
 800031c:	4b47      	ldr	r3, [pc, #284]	; (800043c <SYS_WI+0x290>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2b05      	cmp	r3, #5
 8000322:	d007      	beq.n	8000334 <SYS_WI+0x188>
 8000324:	4b45      	ldr	r3, [pc, #276]	; (800043c <SYS_WI+0x290>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	2b04      	cmp	r3, #4
 800032a:	d003      	beq.n	8000334 <SYS_WI+0x188>
 800032c:	4b43      	ldr	r3, [pc, #268]	; (800043c <SYS_WI+0x290>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	2b03      	cmp	r3, #3
 8000332:	d107      	bne.n	8000344 <SYS_WI+0x198>
 8000334:	4b41      	ldr	r3, [pc, #260]	; (800043c <SYS_WI+0x290>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	3b02      	subs	r3, #2
 800033a:	4a3f      	ldr	r2, [pc, #252]	; (8000438 <SYS_WI+0x28c>)
 800033c:	6013      	str	r3, [r2, #0]
 800033e:	4b3f      	ldr	r3, [pc, #252]	; (800043c <SYS_WI+0x290>)
 8000340:	2200      	movs	r2, #0
 8000342:	601a      	str	r2, [r3, #0]
			if(page==0){if(line==7){page=4;line=0;}}
 8000344:	4b3c      	ldr	r3, [pc, #240]	; (8000438 <SYS_WI+0x28c>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d109      	bne.n	8000360 <SYS_WI+0x1b4>
 800034c:	4b3b      	ldr	r3, [pc, #236]	; (800043c <SYS_WI+0x290>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	2b07      	cmp	r3, #7
 8000352:	d105      	bne.n	8000360 <SYS_WI+0x1b4>
 8000354:	4b38      	ldr	r3, [pc, #224]	; (8000438 <SYS_WI+0x28c>)
 8000356:	2204      	movs	r2, #4
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	4b38      	ldr	r3, [pc, #224]	; (800043c <SYS_WI+0x290>)
 800035c:	2200      	movs	r2, #0
 800035e:	601a      	str	r2, [r3, #0]
			if(page==0){if(line==8){page=page+1;line=0;}}
 8000360:	4b35      	ldr	r3, [pc, #212]	; (8000438 <SYS_WI+0x28c>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d10b      	bne.n	8000380 <SYS_WI+0x1d4>
 8000368:	4b34      	ldr	r3, [pc, #208]	; (800043c <SYS_WI+0x290>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	2b08      	cmp	r3, #8
 800036e:	d107      	bne.n	8000380 <SYS_WI+0x1d4>
 8000370:	4b31      	ldr	r3, [pc, #196]	; (8000438 <SYS_WI+0x28c>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	3301      	adds	r3, #1
 8000376:	4a30      	ldr	r2, [pc, #192]	; (8000438 <SYS_WI+0x28c>)
 8000378:	6013      	str	r3, [r2, #0]
 800037a:	4b30      	ldr	r3, [pc, #192]	; (800043c <SYS_WI+0x290>)
 800037c:	2200      	movs	r2, #0
 800037e:	601a      	str	r2, [r3, #0]
			if(page!=0){if(line==1){page=page-1;line=0;}}
 8000380:	4b2d      	ldr	r3, [pc, #180]	; (8000438 <SYS_WI+0x28c>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d00b      	beq.n	80003a0 <SYS_WI+0x1f4>
 8000388:	4b2c      	ldr	r3, [pc, #176]	; (800043c <SYS_WI+0x290>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	2b01      	cmp	r3, #1
 800038e:	d107      	bne.n	80003a0 <SYS_WI+0x1f4>
 8000390:	4b29      	ldr	r3, [pc, #164]	; (8000438 <SYS_WI+0x28c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	3b01      	subs	r3, #1
 8000396:	4a28      	ldr	r2, [pc, #160]	; (8000438 <SYS_WI+0x28c>)
 8000398:	6013      	str	r3, [r2, #0]
 800039a:	4b28      	ldr	r3, [pc, #160]	; (800043c <SYS_WI+0x290>)
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]
			if(page==3||page==2||page==1){if(line==2){page=page+1;line=0;}}
 80003a0:	4b25      	ldr	r3, [pc, #148]	; (8000438 <SYS_WI+0x28c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	2b03      	cmp	r3, #3
 80003a6:	d007      	beq.n	80003b8 <SYS_WI+0x20c>
 80003a8:	4b23      	ldr	r3, [pc, #140]	; (8000438 <SYS_WI+0x28c>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	2b02      	cmp	r3, #2
 80003ae:	d003      	beq.n	80003b8 <SYS_WI+0x20c>
 80003b0:	4b21      	ldr	r3, [pc, #132]	; (8000438 <SYS_WI+0x28c>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d10b      	bne.n	80003d0 <SYS_WI+0x224>
 80003b8:	4b20      	ldr	r3, [pc, #128]	; (800043c <SYS_WI+0x290>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	2b02      	cmp	r3, #2
 80003be:	d107      	bne.n	80003d0 <SYS_WI+0x224>
 80003c0:	4b1d      	ldr	r3, [pc, #116]	; (8000438 <SYS_WI+0x28c>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	3301      	adds	r3, #1
 80003c6:	4a1c      	ldr	r2, [pc, #112]	; (8000438 <SYS_WI+0x28c>)
 80003c8:	6013      	str	r3, [r2, #0]
 80003ca:	4b1c      	ldr	r3, [pc, #112]	; (800043c <SYS_WI+0x290>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
			if(page==4){if(line==2){page=0;line=0;}}
 80003d0:	4b19      	ldr	r3, [pc, #100]	; (8000438 <SYS_WI+0x28c>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	2b04      	cmp	r3, #4
 80003d6:	d109      	bne.n	80003ec <SYS_WI+0x240>
 80003d8:	4b18      	ldr	r3, [pc, #96]	; (800043c <SYS_WI+0x290>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	2b02      	cmp	r3, #2
 80003de:	d105      	bne.n	80003ec <SYS_WI+0x240>
 80003e0:	4b15      	ldr	r3, [pc, #84]	; (8000438 <SYS_WI+0x28c>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	4b15      	ldr	r3, [pc, #84]	; (800043c <SYS_WI+0x290>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]


		}

        //判断是否有新的数据变化，从而判断重新变化页面
		if(page!=page_1||line!=line_1||mode!=mode_1||warning!=warning_1)
 80003ec:	4b12      	ldr	r3, [pc, #72]	; (8000438 <SYS_WI+0x28c>)
 80003ee:	681a      	ldr	r2, [r3, #0]
 80003f0:	4b10      	ldr	r3, [pc, #64]	; (8000434 <SYS_WI+0x288>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	429a      	cmp	r2, r3
 80003f6:	d111      	bne.n	800041c <SYS_WI+0x270>
 80003f8:	4b10      	ldr	r3, [pc, #64]	; (800043c <SYS_WI+0x290>)
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	4b10      	ldr	r3, [pc, #64]	; (8000440 <SYS_WI+0x294>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	429a      	cmp	r2, r3
 8000402:	d10b      	bne.n	800041c <SYS_WI+0x270>
 8000404:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <SYS_WI+0x298>)
 8000406:	681a      	ldr	r2, [r3, #0]
 8000408:	4b0f      	ldr	r3, [pc, #60]	; (8000448 <SYS_WI+0x29c>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	429a      	cmp	r2, r3
 800040e:	d105      	bne.n	800041c <SYS_WI+0x270>
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <SYS_WI+0x280>)
 8000412:	681a      	ldr	r2, [r3, #0]
 8000414:	4b06      	ldr	r3, [pc, #24]	; (8000430 <SYS_WI+0x284>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	429a      	cmp	r2, r3
 800041a:	d070      	beq.n	80004fe <SYS_WI+0x352>
		{
			line_1=line;
 800041c:	4b07      	ldr	r3, [pc, #28]	; (800043c <SYS_WI+0x290>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a07      	ldr	r2, [pc, #28]	; (8000440 <SYS_WI+0x294>)
 8000422:	6013      	str	r3, [r2, #0]

			//选择页面
       switch(page)
 8000424:	4b04      	ldr	r3, [pc, #16]	; (8000438 <SYS_WI+0x28c>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	e012      	b.n	8000450 <SYS_WI+0x2a4>
 800042a:	bf00      	nop
 800042c:	20000040 	.word	0x20000040
 8000430:	20000044 	.word	0x20000044
 8000434:	20000000 	.word	0x20000000
 8000438:	20000030 	.word	0x20000030
 800043c:	20000034 	.word	0x20000034
 8000440:	20000004 	.word	0x20000004
 8000444:	20000038 	.word	0x20000038
 8000448:	2000003c 	.word	0x2000003c
 800044c:	40010c00 	.word	0x40010c00
 8000450:	2b04      	cmp	r3, #4
 8000452:	d854      	bhi.n	80004fe <SYS_WI+0x352>
 8000454:	a201      	add	r2, pc, #4	; (adr r2, 800045c <SYS_WI+0x2b0>)
 8000456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800045a:	bf00      	nop
 800045c:	08000471 	.word	0x08000471
 8000460:	0800048b 	.word	0x0800048b
 8000464:	080004a5 	.word	0x080004a5
 8000468:	080004bf 	.word	0x080004bf
 800046c:	080004d9 	.word	0x080004d9
       {
        case 0:LCD_MainOrder(page,&page_1,line,mode,&mode_1);  break;
 8000470:	4b25      	ldr	r3, [pc, #148]	; (8000508 <SYS_WI+0x35c>)
 8000472:	6818      	ldr	r0, [r3, #0]
 8000474:	4b25      	ldr	r3, [pc, #148]	; (800050c <SYS_WI+0x360>)
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	4b25      	ldr	r3, [pc, #148]	; (8000510 <SYS_WI+0x364>)
 800047a:	6819      	ldr	r1, [r3, #0]
 800047c:	4b25      	ldr	r3, [pc, #148]	; (8000514 <SYS_WI+0x368>)
 800047e:	9300      	str	r3, [sp, #0]
 8000480:	460b      	mov	r3, r1
 8000482:	4925      	ldr	r1, [pc, #148]	; (8000518 <SYS_WI+0x36c>)
 8000484:	f000 fc84 	bl	8000d90 <LCD_MainOrder>
 8000488:	e039      	b.n	80004fe <SYS_WI+0x352>
        case 1:LCD_BasicInformation (page,&page_1,line,mode,date);  break;
 800048a:	4b1f      	ldr	r3, [pc, #124]	; (8000508 <SYS_WI+0x35c>)
 800048c:	6818      	ldr	r0, [r3, #0]
 800048e:	4b1f      	ldr	r3, [pc, #124]	; (800050c <SYS_WI+0x360>)
 8000490:	681a      	ldr	r2, [r3, #0]
 8000492:	4b1f      	ldr	r3, [pc, #124]	; (8000510 <SYS_WI+0x364>)
 8000494:	6819      	ldr	r1, [r3, #0]
 8000496:	463b      	mov	r3, r7
 8000498:	9300      	str	r3, [sp, #0]
 800049a:	460b      	mov	r3, r1
 800049c:	491e      	ldr	r1, [pc, #120]	; (8000518 <SYS_WI+0x36c>)
 800049e:	f000 ff2f 	bl	8001300 <LCD_BasicInformation>
 80004a2:	e02c      	b.n	80004fe <SYS_WI+0x352>
        case 2:LCD_TheSenor(page,&page_1,line,mode,date);  break;
 80004a4:	4b18      	ldr	r3, [pc, #96]	; (8000508 <SYS_WI+0x35c>)
 80004a6:	6818      	ldr	r0, [r3, #0]
 80004a8:	4b18      	ldr	r3, [pc, #96]	; (800050c <SYS_WI+0x360>)
 80004aa:	681a      	ldr	r2, [r3, #0]
 80004ac:	4b18      	ldr	r3, [pc, #96]	; (8000510 <SYS_WI+0x364>)
 80004ae:	6819      	ldr	r1, [r3, #0]
 80004b0:	463b      	mov	r3, r7
 80004b2:	9300      	str	r3, [sp, #0]
 80004b4:	460b      	mov	r3, r1
 80004b6:	4918      	ldr	r1, [pc, #96]	; (8000518 <SYS_WI+0x36c>)
 80004b8:	f001 f8c8 	bl	800164c <LCD_TheSenor>
 80004bc:	e01f      	b.n	80004fe <SYS_WI+0x352>
        case 3:LCD_UltrasonicDistance(page,&page_1,line,mode,date);  break;
 80004be:	4b12      	ldr	r3, [pc, #72]	; (8000508 <SYS_WI+0x35c>)
 80004c0:	6818      	ldr	r0, [r3, #0]
 80004c2:	4b12      	ldr	r3, [pc, #72]	; (800050c <SYS_WI+0x360>)
 80004c4:	681a      	ldr	r2, [r3, #0]
 80004c6:	4b12      	ldr	r3, [pc, #72]	; (8000510 <SYS_WI+0x364>)
 80004c8:	6819      	ldr	r1, [r3, #0]
 80004ca:	463b      	mov	r3, r7
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	460b      	mov	r3, r1
 80004d0:	4911      	ldr	r1, [pc, #68]	; (8000518 <SYS_WI+0x36c>)
 80004d2:	f001 fadb 	bl	8001a8c <LCD_UltrasonicDistance>
 80004d6:	e012      	b.n	80004fe <SYS_WI+0x352>
        case 4:LCD_Warning(date,warning,&warning_1,line,mode,page,&page_1); break;
 80004d8:	4b10      	ldr	r3, [pc, #64]	; (800051c <SYS_WI+0x370>)
 80004da:	681c      	ldr	r4, [r3, #0]
 80004dc:	4b0b      	ldr	r3, [pc, #44]	; (800050c <SYS_WI+0x360>)
 80004de:	681d      	ldr	r5, [r3, #0]
 80004e0:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <SYS_WI+0x364>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a08      	ldr	r2, [pc, #32]	; (8000508 <SYS_WI+0x35c>)
 80004e6:	6812      	ldr	r2, [r2, #0]
 80004e8:	4638      	mov	r0, r7
 80004ea:	490b      	ldr	r1, [pc, #44]	; (8000518 <SYS_WI+0x36c>)
 80004ec:	9102      	str	r1, [sp, #8]
 80004ee:	9201      	str	r2, [sp, #4]
 80004f0:	9300      	str	r3, [sp, #0]
 80004f2:	462b      	mov	r3, r5
 80004f4:	4a0a      	ldr	r2, [pc, #40]	; (8000520 <SYS_WI+0x374>)
 80004f6:	4621      	mov	r1, r4
 80004f8:	f001 fd42 	bl	8001f80 <LCD_Warning>
 80004fc:	bf00      	nop
		//LCD_ShowString(50,120,"System Waiting.......",YELLOW ,RED ,16,0);




}
 80004fe:	bf00      	nop
 8000500:	3710      	adds	r7, #16
 8000502:	46bd      	mov	sp, r7
 8000504:	bdb0      	pop	{r4, r5, r7, pc}
 8000506:	bf00      	nop
 8000508:	20000030 	.word	0x20000030
 800050c:	20000034 	.word	0x20000034
 8000510:	20000038 	.word	0x20000038
 8000514:	2000003c 	.word	0x2000003c
 8000518:	20000000 	.word	0x20000000
 800051c:	20000040 	.word	0x20000040
 8000520:	20000044 	.word	0x20000044

08000524 <Ptotect>:


}

void Ptotect(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af04      	add	r7, sp, #16
	if(S==0X10)
 800052a:	4b3c      	ldr	r3, [pc, #240]	; (800061c <Ptotect+0xf8>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b10      	cmp	r3, #16
 8000530:	d11a      	bne.n	8000568 <Ptotect+0x44>
	{
		LCD_Fill(0,0,LCD_W,LCD_H,BLUE);
 8000532:	231f      	movs	r3, #31
 8000534:	9300      	str	r3, [sp, #0]
 8000536:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800053a:	22f0      	movs	r2, #240	; 0xf0
 800053c:	2100      	movs	r1, #0
 800053e:	2000      	movs	r0, #0
 8000540:	f000 f960 	bl	8000804 <LCD_Fill>
		    LCD_ShowString(135,120,"Attention Find Smok!!!",RED,YELLOW,16,0);
 8000544:	2300      	movs	r3, #0
 8000546:	9302      	str	r3, [sp, #8]
 8000548:	2310      	movs	r3, #16
 800054a:	9301      	str	r3, [sp, #4]
 800054c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000550:	9300      	str	r3, [sp, #0]
 8000552:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000556:	4a32      	ldr	r2, [pc, #200]	; (8000620 <Ptotect+0xfc>)
 8000558:	2178      	movs	r1, #120	; 0x78
 800055a:	2087      	movs	r0, #135	; 0x87
 800055c:	f000 fb52 	bl	8000c04 <LCD_ShowString>
		    delay_ms(5000);
 8000560:	f241 3088 	movw	r0, #5000	; 0x1388
 8000564:	f000 f87e 	bl	8000664 <delay_ms>
	}
	if(F1==0x01||F2==0x02||F3==0x03||F4==0x04||F5==0x05||F6==0x06||F7==0x07||F8==0x08||F9==0x09||F10==0x0a||F11==0x0b||F12==0x0c||F13==0x0d||F14==0x0e||F15==0x0f)
 8000568:	4b2e      	ldr	r3, [pc, #184]	; (8000624 <Ptotect+0x100>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b01      	cmp	r3, #1
 800056e:	d037      	beq.n	80005e0 <Ptotect+0xbc>
 8000570:	4b2d      	ldr	r3, [pc, #180]	; (8000628 <Ptotect+0x104>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b02      	cmp	r3, #2
 8000576:	d033      	beq.n	80005e0 <Ptotect+0xbc>
 8000578:	4b2c      	ldr	r3, [pc, #176]	; (800062c <Ptotect+0x108>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b03      	cmp	r3, #3
 800057e:	d02f      	beq.n	80005e0 <Ptotect+0xbc>
 8000580:	4b2b      	ldr	r3, [pc, #172]	; (8000630 <Ptotect+0x10c>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b04      	cmp	r3, #4
 8000586:	d02b      	beq.n	80005e0 <Ptotect+0xbc>
 8000588:	4b2a      	ldr	r3, [pc, #168]	; (8000634 <Ptotect+0x110>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b05      	cmp	r3, #5
 800058e:	d027      	beq.n	80005e0 <Ptotect+0xbc>
 8000590:	4b29      	ldr	r3, [pc, #164]	; (8000638 <Ptotect+0x114>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	2b06      	cmp	r3, #6
 8000596:	d023      	beq.n	80005e0 <Ptotect+0xbc>
 8000598:	4b28      	ldr	r3, [pc, #160]	; (800063c <Ptotect+0x118>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b07      	cmp	r3, #7
 800059e:	d01f      	beq.n	80005e0 <Ptotect+0xbc>
 80005a0:	4b27      	ldr	r3, [pc, #156]	; (8000640 <Ptotect+0x11c>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2b08      	cmp	r3, #8
 80005a6:	d01b      	beq.n	80005e0 <Ptotect+0xbc>
 80005a8:	4b26      	ldr	r3, [pc, #152]	; (8000644 <Ptotect+0x120>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b09      	cmp	r3, #9
 80005ae:	d017      	beq.n	80005e0 <Ptotect+0xbc>
 80005b0:	4b25      	ldr	r3, [pc, #148]	; (8000648 <Ptotect+0x124>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b0a      	cmp	r3, #10
 80005b6:	d013      	beq.n	80005e0 <Ptotect+0xbc>
 80005b8:	4b24      	ldr	r3, [pc, #144]	; (800064c <Ptotect+0x128>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b0b      	cmp	r3, #11
 80005be:	d00f      	beq.n	80005e0 <Ptotect+0xbc>
 80005c0:	4b23      	ldr	r3, [pc, #140]	; (8000650 <Ptotect+0x12c>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b0c      	cmp	r3, #12
 80005c6:	d00b      	beq.n	80005e0 <Ptotect+0xbc>
 80005c8:	4b22      	ldr	r3, [pc, #136]	; (8000654 <Ptotect+0x130>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b0d      	cmp	r3, #13
 80005ce:	d007      	beq.n	80005e0 <Ptotect+0xbc>
 80005d0:	4b21      	ldr	r3, [pc, #132]	; (8000658 <Ptotect+0x134>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b0e      	cmp	r3, #14
 80005d6:	d003      	beq.n	80005e0 <Ptotect+0xbc>
 80005d8:	4b20      	ldr	r3, [pc, #128]	; (800065c <Ptotect+0x138>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b0f      	cmp	r3, #15
 80005de:	d11a      	bne.n	8000616 <Ptotect+0xf2>
	{
		LCD_Fill(0,0,LCD_W,LCD_H,BLUE);
 80005e0:	231f      	movs	r3, #31
 80005e2:	9300      	str	r3, [sp, #0]
 80005e4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80005e8:	22f0      	movs	r2, #240	; 0xf0
 80005ea:	2100      	movs	r1, #0
 80005ec:	2000      	movs	r0, #0
 80005ee:	f000 f909 	bl	8000804 <LCD_Fill>
		 	 LCD_ShowString(135,120,"Attention Find Flame!!!",RED,YELLOW,16,0);
 80005f2:	2300      	movs	r3, #0
 80005f4:	9302      	str	r3, [sp, #8]
 80005f6:	2310      	movs	r3, #16
 80005f8:	9301      	str	r3, [sp, #4]
 80005fa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000604:	4a16      	ldr	r2, [pc, #88]	; (8000660 <Ptotect+0x13c>)
 8000606:	2178      	movs	r1, #120	; 0x78
 8000608:	2087      	movs	r0, #135	; 0x87
 800060a:	f000 fafb 	bl	8000c04 <LCD_ShowString>
		 	delay_ms(5000);
 800060e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000612:	f000 f827 	bl	8000664 <delay_ms>
	}

}
 8000616:	bf00      	nop
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	200000fb 	.word	0x200000fb
 8000620:	08005970 	.word	0x08005970
 8000624:	200000f4 	.word	0x200000f4
 8000628:	2000010f 	.word	0x2000010f
 800062c:	2000010c 	.word	0x2000010c
 8000630:	200000f2 	.word	0x200000f2
 8000634:	200000eb 	.word	0x200000eb
 8000638:	2000010d 	.word	0x2000010d
 800063c:	200000f5 	.word	0x200000f5
 8000640:	20000108 	.word	0x20000108
 8000644:	200000f3 	.word	0x200000f3
 8000648:	20000111 	.word	0x20000111
 800064c:	20000110 	.word	0x20000110
 8000650:	200000ea 	.word	0x200000ea
 8000654:	20000107 	.word	0x20000107
 8000658:	2000010b 	.word	0x2000010b
 800065c:	2000010e 	.word	0x2000010e
 8000660:	08005988 	.word	0x08005988

08000664 <delay_ms>:
      while(i--) ;
   }
}
//毫秒级的延时
void delay_ms(u16 time)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	80fb      	strh	r3, [r7, #6]
   u16 i=0;
 800066e:	2300      	movs	r3, #0
 8000670:	81fb      	strh	r3, [r7, #14]
   while(time--)
 8000672:	e008      	b.n	8000686 <delay_ms+0x22>
   {
      i=12000;  //自己定义
 8000674:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8000678:	81fb      	strh	r3, [r7, #14]
      while(i--) ;
 800067a:	bf00      	nop
 800067c:	89fb      	ldrh	r3, [r7, #14]
 800067e:	1e5a      	subs	r2, r3, #1
 8000680:	81fa      	strh	r2, [r7, #14]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d1fa      	bne.n	800067c <delay_ms+0x18>
   while(time--)
 8000686:	88fb      	ldrh	r3, [r7, #6]
 8000688:	1e5a      	subs	r2, r3, #1
 800068a:	80fa      	strh	r2, [r7, #6]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d1f1      	bne.n	8000674 <delay_ms+0x10>
   }
}
 8000690:	bf00      	nop
 8000692:	3714      	adds	r7, #20
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr
	...

0800069c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_DMA_Init+0x38>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	4a0b      	ldr	r2, [pc, #44]	; (80006d4 <MX_DMA_Init+0x38>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6153      	str	r3, [r2, #20]
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_DMA_Init+0x38>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2100      	movs	r1, #0
 80006be:	200c      	movs	r0, #12
 80006c0:	f002 ff1b 	bl	80034fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80006c4:	200c      	movs	r0, #12
 80006c6:	f002 ff34 	bl	8003532 <HAL_NVIC_EnableIRQ>

}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40021000 	.word	0x40021000

080006d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006de:	f107 0310 	add.w	r3, r7, #16
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ec:	4b42      	ldr	r3, [pc, #264]	; (80007f8 <MX_GPIO_Init+0x120>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4a41      	ldr	r2, [pc, #260]	; (80007f8 <MX_GPIO_Init+0x120>)
 80006f2:	f043 0310 	orr.w	r3, r3, #16
 80006f6:	6193      	str	r3, [r2, #24]
 80006f8:	4b3f      	ldr	r3, [pc, #252]	; (80007f8 <MX_GPIO_Init+0x120>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f003 0310 	and.w	r3, r3, #16
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000704:	4b3c      	ldr	r3, [pc, #240]	; (80007f8 <MX_GPIO_Init+0x120>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	4a3b      	ldr	r2, [pc, #236]	; (80007f8 <MX_GPIO_Init+0x120>)
 800070a:	f043 0320 	orr.w	r3, r3, #32
 800070e:	6193      	str	r3, [r2, #24]
 8000710:	4b39      	ldr	r3, [pc, #228]	; (80007f8 <MX_GPIO_Init+0x120>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	f003 0320 	and.w	r3, r3, #32
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071c:	4b36      	ldr	r3, [pc, #216]	; (80007f8 <MX_GPIO_Init+0x120>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	4a35      	ldr	r2, [pc, #212]	; (80007f8 <MX_GPIO_Init+0x120>)
 8000722:	f043 0304 	orr.w	r3, r3, #4
 8000726:	6193      	str	r3, [r2, #24]
 8000728:	4b33      	ldr	r3, [pc, #204]	; (80007f8 <MX_GPIO_Init+0x120>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	f003 0304 	and.w	r3, r3, #4
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000734:	4b30      	ldr	r3, [pc, #192]	; (80007f8 <MX_GPIO_Init+0x120>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	4a2f      	ldr	r2, [pc, #188]	; (80007f8 <MX_GPIO_Init+0x120>)
 800073a:	f043 0308 	orr.w	r3, r3, #8
 800073e:	6193      	str	r3, [r2, #24]
 8000740:	4b2d      	ldr	r3, [pc, #180]	; (80007f8 <MX_GPIO_Init+0x120>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	f003 0308 	and.w	r3, r3, #8
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_SCLK_Pin|LCD_MOSI_Pin|LCD_RES_Pin|LCD_DC_Pin
 800074c:	2200      	movs	r2, #0
 800074e:	21df      	movs	r1, #223	; 0xdf
 8000750:	482a      	ldr	r0, [pc, #168]	; (80007fc <MX_GPIO_Init+0x124>)
 8000752:	f003 f9da 	bl	8003b0a <HAL_GPIO_WritePin>
                          |LCD_BLK_Pin|LCD_CS_Pin|ZK_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CE_GPIO_Port, SPI1_CE_Pin, GPIO_PIN_SET);
 8000756:	2201      	movs	r2, #1
 8000758:	2140      	movs	r1, #64	; 0x40
 800075a:	4829      	ldr	r0, [pc, #164]	; (8000800 <MX_GPIO_Init+0x128>)
 800075c:	f003 f9d5 	bl	8003b0a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_IRT_GPIO_Port, SPI1_IRT_Pin, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	2180      	movs	r1, #128	; 0x80
 8000764:	4826      	ldr	r0, [pc, #152]	; (8000800 <MX_GPIO_Init+0x128>)
 8000766:	f003 f9d0 	bl	8003b0a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_SCLK_Pin|LCD_MOSI_Pin|LCD_RES_Pin|LCD_DC_Pin
 800076a:	23df      	movs	r3, #223	; 0xdf
 800076c:	613b      	str	r3, [r7, #16]
                          |LCD_BLK_Pin|LCD_CS_Pin|ZK_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	2301      	movs	r3, #1
 8000770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2302      	movs	r3, #2
 8000778:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077a:	f107 0310 	add.w	r3, r7, #16
 800077e:	4619      	mov	r1, r3
 8000780:	481e      	ldr	r0, [pc, #120]	; (80007fc <MX_GPIO_Init+0x124>)
 8000782:	f003 f851 	bl	8003828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ZK_MOSI_Pin;
 8000786:	2320      	movs	r3, #32
 8000788:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ZK_MOSI_GPIO_Port, &GPIO_InitStruct);
 8000792:	f107 0310 	add.w	r3, r7, #16
 8000796:	4619      	mov	r1, r3
 8000798:	4818      	ldr	r0, [pc, #96]	; (80007fc <MX_GPIO_Init+0x124>)
 800079a:	f003 f845 	bl	8003828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = select_Pin|backward_Pin|forward_Pin;
 800079e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80007a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007a8:	2301      	movs	r3, #1
 80007aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ac:	f107 0310 	add.w	r3, r7, #16
 80007b0:	4619      	mov	r1, r3
 80007b2:	4813      	ldr	r0, [pc, #76]	; (8000800 <MX_GPIO_Init+0x128>)
 80007b4:	f003 f838 	bl	8003828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 80007b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007c2:	2301      	movs	r3, #1
 80007c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 80007c6:	f107 0310 	add.w	r3, r7, #16
 80007ca:	4619      	mov	r1, r3
 80007cc:	480b      	ldr	r0, [pc, #44]	; (80007fc <MX_GPIO_Init+0x124>)
 80007ce:	f003 f82b 	bl	8003828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI1_CE_Pin|SPI1_IRT_Pin;
 80007d2:	23c0      	movs	r3, #192	; 0xc0
 80007d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007da:	2301      	movs	r3, #1
 80007dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2302      	movs	r3, #2
 80007e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e2:	f107 0310 	add.w	r3, r7, #16
 80007e6:	4619      	mov	r1, r3
 80007e8:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_GPIO_Init+0x128>)
 80007ea:	f003 f81d 	bl	8003828 <HAL_GPIO_Init>

}
 80007ee:	bf00      	nop
 80007f0:	3720      	adds	r7, #32
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40021000 	.word	0x40021000
 80007fc:	40010800 	.word	0x40010800
 8000800:	40010c00 	.word	0x40010c00

08000804 <LCD_Fill>:
                xend,yend   终止坐标
								color       要填充的颜色
      返回值：  无
******************************************************************************/
void LCD_Fill(u16 xsta,u16 ysta,u16 xend,u16 yend,u16 color)
{
 8000804:	b590      	push	{r4, r7, lr}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	4604      	mov	r4, r0
 800080c:	4608      	mov	r0, r1
 800080e:	4611      	mov	r1, r2
 8000810:	461a      	mov	r2, r3
 8000812:	4623      	mov	r3, r4
 8000814:	80fb      	strh	r3, [r7, #6]
 8000816:	4603      	mov	r3, r0
 8000818:	80bb      	strh	r3, [r7, #4]
 800081a:	460b      	mov	r3, r1
 800081c:	807b      	strh	r3, [r7, #2]
 800081e:	4613      	mov	r3, r2
 8000820:	803b      	strh	r3, [r7, #0]
	u16 i,j;
	LCD_Address_Set(xsta,ysta,xend-1,yend-1);//设置显示范围
 8000822:	887b      	ldrh	r3, [r7, #2]
 8000824:	3b01      	subs	r3, #1
 8000826:	b29a      	uxth	r2, r3
 8000828:	883b      	ldrh	r3, [r7, #0]
 800082a:	3b01      	subs	r3, #1
 800082c:	b29b      	uxth	r3, r3
 800082e:	88b9      	ldrh	r1, [r7, #4]
 8000830:	88f8      	ldrh	r0, [r7, #6]
 8000832:	f002 f821 	bl	8002878 <LCD_Address_Set>
	for(i=ysta;i<yend;i++)
 8000836:	88bb      	ldrh	r3, [r7, #4]
 8000838:	81fb      	strh	r3, [r7, #14]
 800083a:	e010      	b.n	800085e <LCD_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 800083c:	88fb      	ldrh	r3, [r7, #6]
 800083e:	81bb      	strh	r3, [r7, #12]
 8000840:	e006      	b.n	8000850 <LCD_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8000842:	8c3b      	ldrh	r3, [r7, #32]
 8000844:	4618      	mov	r0, r3
 8000846:	f001 ffe8 	bl	800281a <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 800084a:	89bb      	ldrh	r3, [r7, #12]
 800084c:	3301      	adds	r3, #1
 800084e:	81bb      	strh	r3, [r7, #12]
 8000850:	89ba      	ldrh	r2, [r7, #12]
 8000852:	887b      	ldrh	r3, [r7, #2]
 8000854:	429a      	cmp	r2, r3
 8000856:	d3f4      	bcc.n	8000842 <LCD_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8000858:	89fb      	ldrh	r3, [r7, #14]
 800085a:	3301      	adds	r3, #1
 800085c:	81fb      	strh	r3, [r7, #14]
 800085e:	89fa      	ldrh	r2, [r7, #14]
 8000860:	883b      	ldrh	r3, [r7, #0]
 8000862:	429a      	cmp	r2, r3
 8000864:	d3ea      	bcc.n	800083c <LCD_Fill+0x38>
		}
	}
}
 8000866:	bf00      	nop
 8000868:	3714      	adds	r7, #20
 800086a:	46bd      	mov	sp, r7
 800086c:	bd90      	pop	{r4, r7, pc}

0800086e <LCD_DrawPoint>:
      入口数据：x,y 画点坐标
                color 点的颜色
      返回值：  无
******************************************************************************/
void LCD_DrawPoint(u16 x,u16 y,u16 color)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b082      	sub	sp, #8
 8000872:	af00      	add	r7, sp, #0
 8000874:	4603      	mov	r3, r0
 8000876:	80fb      	strh	r3, [r7, #6]
 8000878:	460b      	mov	r3, r1
 800087a:	80bb      	strh	r3, [r7, #4]
 800087c:	4613      	mov	r3, r2
 800087e:	807b      	strh	r3, [r7, #2]
	LCD_Address_Set(x,y,x,y);//设置光标位置
 8000880:	88bb      	ldrh	r3, [r7, #4]
 8000882:	88fa      	ldrh	r2, [r7, #6]
 8000884:	88b9      	ldrh	r1, [r7, #4]
 8000886:	88f8      	ldrh	r0, [r7, #6]
 8000888:	f001 fff6 	bl	8002878 <LCD_Address_Set>
	LCD_WR_DATA(color);
 800088c:	887b      	ldrh	r3, [r7, #2]
 800088e:	4618      	mov	r0, r3
 8000890:	f001 ffc3 	bl	800281a <LCD_WR_DATA>
}
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <LCD_ShowChinese24x24>:
                sizey 字号
                mode:  0非叠加模式  1叠加模式
      返回值：  无
******************************************************************************/
void LCD_ShowChinese24x24(u16 x,u16 y,u8 *s,u16 fc,u16 bc,u8 sizey,u8 mode)
{
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b089      	sub	sp, #36	; 0x24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60ba      	str	r2, [r7, #8]
 80008a4:	461a      	mov	r2, r3
 80008a6:	4603      	mov	r3, r0
 80008a8:	81fb      	strh	r3, [r7, #14]
 80008aa:	460b      	mov	r3, r1
 80008ac:	81bb      	strh	r3, [r7, #12]
 80008ae:	4613      	mov	r3, r2
 80008b0:	80fb      	strh	r3, [r7, #6]
	u8 i,j,m=0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	777b      	strb	r3, [r7, #29]
	u16 k;
	u16 HZnum;//汉字数目
	u16 TypefaceNum;//一个字符所占字节大小
	u16 x0=x;
 80008b6:	89fb      	ldrh	r3, [r7, #14]
 80008b8:	833b      	strh	r3, [r7, #24]
	TypefaceNum=(sizey/8+((sizey%8)?1:0))*sizey;
 80008ba:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80008be:	08db      	lsrs	r3, r3, #3
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	461a      	mov	r2, r3
 80008c4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80008c8:	f003 0307 	and.w	r3, r3, #7
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	bf14      	ite	ne
 80008d2:	2301      	movne	r3, #1
 80008d4:	2300      	moveq	r3, #0
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	4413      	add	r3, r2
 80008da:	b29b      	uxth	r3, r3
 80008dc:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80008e0:	b292      	uxth	r2, r2
 80008e2:	fb02 f303 	mul.w	r3, r2, r3
 80008e6:	82fb      	strh	r3, [r7, #22]
	HZnum=sizeof(tfont24)/sizeof(typFNT_GB24);	//统计汉字数目
 80008e8:	2301      	movs	r3, #1
 80008ea:	82bb      	strh	r3, [r7, #20]
	for(k=0;k<HZnum;k++)
 80008ec:	2300      	movs	r3, #0
 80008ee:	837b      	strh	r3, [r7, #26]
 80008f0:	e09d      	b.n	8000a2e <LCD_ShowChinese24x24+0x192>
	{
		if ((tfont24[k].Index[0]==*(s))&&(tfont24[k].Index[1]==*(s+1)))
 80008f2:	8b7b      	ldrh	r3, [r7, #26]
 80008f4:	4a52      	ldr	r2, [pc, #328]	; (8000a40 <LCD_ShowChinese24x24+0x1a4>)
 80008f6:	214a      	movs	r1, #74	; 0x4a
 80008f8:	fb01 f303 	mul.w	r3, r1, r3
 80008fc:	4413      	add	r3, r2
 80008fe:	781a      	ldrb	r2, [r3, #0]
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	429a      	cmp	r2, r3
 8000906:	f040 808f 	bne.w	8000a28 <LCD_ShowChinese24x24+0x18c>
 800090a:	8b7b      	ldrh	r3, [r7, #26]
 800090c:	4a4c      	ldr	r2, [pc, #304]	; (8000a40 <LCD_ShowChinese24x24+0x1a4>)
 800090e:	214a      	movs	r1, #74	; 0x4a
 8000910:	fb01 f303 	mul.w	r3, r1, r3
 8000914:	4413      	add	r3, r2
 8000916:	3301      	adds	r3, #1
 8000918:	781a      	ldrb	r2, [r3, #0]
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	3301      	adds	r3, #1
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	429a      	cmp	r2, r3
 8000922:	f040 8081 	bne.w	8000a28 <LCD_ShowChinese24x24+0x18c>
		{
			LCD_Address_Set(x,y,x+sizey-1,y+sizey-1);
 8000926:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800092a:	b29a      	uxth	r2, r3
 800092c:	89fb      	ldrh	r3, [r7, #14]
 800092e:	4413      	add	r3, r2
 8000930:	b29b      	uxth	r3, r3
 8000932:	3b01      	subs	r3, #1
 8000934:	b29c      	uxth	r4, r3
 8000936:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800093a:	b29a      	uxth	r2, r3
 800093c:	89bb      	ldrh	r3, [r7, #12]
 800093e:	4413      	add	r3, r2
 8000940:	b29b      	uxth	r3, r3
 8000942:	3b01      	subs	r3, #1
 8000944:	b29b      	uxth	r3, r3
 8000946:	89b9      	ldrh	r1, [r7, #12]
 8000948:	89f8      	ldrh	r0, [r7, #14]
 800094a:	4622      	mov	r2, r4
 800094c:	f001 ff94 	bl	8002878 <LCD_Address_Set>
			for(i=0;i<TypefaceNum;i++)
 8000950:	2300      	movs	r3, #0
 8000952:	77fb      	strb	r3, [r7, #31]
 8000954:	e063      	b.n	8000a1e <LCD_ShowChinese24x24+0x182>
			{
				for(j=0;j<8;j++)
 8000956:	2300      	movs	r3, #0
 8000958:	77bb      	strb	r3, [r7, #30]
 800095a:	e05a      	b.n	8000a12 <LCD_ShowChinese24x24+0x176>
				{
					if(!mode)//非叠加方式
 800095c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000960:	2b00      	cmp	r3, #0
 8000962:	d12b      	bne.n	80009bc <LCD_ShowChinese24x24+0x120>
					{
						if(tfont24[k].Msk[i]&(0x01<<j))LCD_WR_DATA(fc);
 8000964:	8b7a      	ldrh	r2, [r7, #26]
 8000966:	7ffb      	ldrb	r3, [r7, #31]
 8000968:	4935      	ldr	r1, [pc, #212]	; (8000a40 <LCD_ShowChinese24x24+0x1a4>)
 800096a:	204a      	movs	r0, #74	; 0x4a
 800096c:	fb00 f202 	mul.w	r2, r0, r2
 8000970:	440a      	add	r2, r1
 8000972:	4413      	add	r3, r2
 8000974:	3302      	adds	r3, #2
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	461a      	mov	r2, r3
 800097a:	7fbb      	ldrb	r3, [r7, #30]
 800097c:	fa42 f303 	asr.w	r3, r2, r3
 8000980:	f003 0301 	and.w	r3, r3, #1
 8000984:	2b00      	cmp	r3, #0
 8000986:	d004      	beq.n	8000992 <LCD_ShowChinese24x24+0xf6>
 8000988:	88fb      	ldrh	r3, [r7, #6]
 800098a:	4618      	mov	r0, r3
 800098c:	f001 ff45 	bl	800281a <LCD_WR_DATA>
 8000990:	e003      	b.n	800099a <LCD_ShowChinese24x24+0xfe>
						else LCD_WR_DATA(bc);
 8000992:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000994:	4618      	mov	r0, r3
 8000996:	f001 ff40 	bl	800281a <LCD_WR_DATA>
						m++;
 800099a:	7f7b      	ldrb	r3, [r7, #29]
 800099c:	3301      	adds	r3, #1
 800099e:	777b      	strb	r3, [r7, #29]
						if(m%sizey==0)
 80009a0:	7f7b      	ldrb	r3, [r7, #29]
 80009a2:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80009a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80009aa:	fb02 f201 	mul.w	r2, r2, r1
 80009ae:	1a9b      	subs	r3, r3, r2
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d12a      	bne.n	8000a0c <LCD_ShowChinese24x24+0x170>
						{
							m=0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	777b      	strb	r3, [r7, #29]
							break;
 80009ba:	e02d      	b.n	8000a18 <LCD_ShowChinese24x24+0x17c>
						}
					}
					else//叠加方式
					{
						if(tfont24[k].Msk[i]&(0x01<<j))	LCD_DrawPoint(x,y,fc);//画一个点
 80009bc:	8b7a      	ldrh	r2, [r7, #26]
 80009be:	7ffb      	ldrb	r3, [r7, #31]
 80009c0:	491f      	ldr	r1, [pc, #124]	; (8000a40 <LCD_ShowChinese24x24+0x1a4>)
 80009c2:	204a      	movs	r0, #74	; 0x4a
 80009c4:	fb00 f202 	mul.w	r2, r0, r2
 80009c8:	440a      	add	r2, r1
 80009ca:	4413      	add	r3, r2
 80009cc:	3302      	adds	r3, #2
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	461a      	mov	r2, r3
 80009d2:	7fbb      	ldrb	r3, [r7, #30]
 80009d4:	fa42 f303 	asr.w	r3, r2, r3
 80009d8:	f003 0301 	and.w	r3, r3, #1
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d005      	beq.n	80009ec <LCD_ShowChinese24x24+0x150>
 80009e0:	88fa      	ldrh	r2, [r7, #6]
 80009e2:	89b9      	ldrh	r1, [r7, #12]
 80009e4:	89fb      	ldrh	r3, [r7, #14]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff ff41 	bl	800086e <LCD_DrawPoint>
						x++;
 80009ec:	89fb      	ldrh	r3, [r7, #14]
 80009ee:	3301      	adds	r3, #1
 80009f0:	81fb      	strh	r3, [r7, #14]
						if((x-x0)==sizey)
 80009f2:	89fa      	ldrh	r2, [r7, #14]
 80009f4:	8b3b      	ldrh	r3, [r7, #24]
 80009f6:	1ad2      	subs	r2, r2, r3
 80009f8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d105      	bne.n	8000a0c <LCD_ShowChinese24x24+0x170>
						{
							x=x0;
 8000a00:	8b3b      	ldrh	r3, [r7, #24]
 8000a02:	81fb      	strh	r3, [r7, #14]
							y++;
 8000a04:	89bb      	ldrh	r3, [r7, #12]
 8000a06:	3301      	adds	r3, #1
 8000a08:	81bb      	strh	r3, [r7, #12]
							break;
 8000a0a:	e005      	b.n	8000a18 <LCD_ShowChinese24x24+0x17c>
				for(j=0;j<8;j++)
 8000a0c:	7fbb      	ldrb	r3, [r7, #30]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	77bb      	strb	r3, [r7, #30]
 8000a12:	7fbb      	ldrb	r3, [r7, #30]
 8000a14:	2b07      	cmp	r3, #7
 8000a16:	d9a1      	bls.n	800095c <LCD_ShowChinese24x24+0xc0>
			for(i=0;i<TypefaceNum;i++)
 8000a18:	7ffb      	ldrb	r3, [r7, #31]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	77fb      	strb	r3, [r7, #31]
 8000a1e:	7ffb      	ldrb	r3, [r7, #31]
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	8afa      	ldrh	r2, [r7, #22]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d896      	bhi.n	8000956 <LCD_ShowChinese24x24+0xba>
	for(k=0;k<HZnum;k++)
 8000a28:	8b7b      	ldrh	r3, [r7, #26]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	837b      	strh	r3, [r7, #26]
 8000a2e:	8b7a      	ldrh	r2, [r7, #26]
 8000a30:	8abb      	ldrh	r3, [r7, #20]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	f4ff af5d 	bcc.w	80008f2 <LCD_ShowChinese24x24+0x56>
				}
			}
		}
		continue;  //查找到对应点阵字库立即退出，防止多个汉字重复取模带来影响
	}
}
 8000a38:	bf00      	nop
 8000a3a:	3724      	adds	r7, #36	; 0x24
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd90      	pop	{r4, r7, pc}
 8000a40:	0800900c 	.word	0x0800900c

08000a44 <LCD_ShowChar>:
                sizey 字号
                mode:  0非叠加模式  1叠加模式
      返回值：  无
******************************************************************************/
void LCD_ShowChar(u16 x,u16 y,u8 num,u16 fc,u16 bc,u8 sizey,u8 mode)
{
 8000a44:	b590      	push	{r4, r7, lr}
 8000a46:	b087      	sub	sp, #28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	4608      	mov	r0, r1
 8000a4e:	4611      	mov	r1, r2
 8000a50:	461a      	mov	r2, r3
 8000a52:	4623      	mov	r3, r4
 8000a54:	80fb      	strh	r3, [r7, #6]
 8000a56:	4603      	mov	r3, r0
 8000a58:	80bb      	strh	r3, [r7, #4]
 8000a5a:	460b      	mov	r3, r1
 8000a5c:	70fb      	strb	r3, [r7, #3]
 8000a5e:	4613      	mov	r3, r2
 8000a60:	803b      	strh	r3, [r7, #0]
	u8 temp,sizex,t,m=0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	757b      	strb	r3, [r7, #21]
	u16 i,TypefaceNum;//一个字符所占字节大小
	u16 x0=x;
 8000a66:	88fb      	ldrh	r3, [r7, #6]
 8000a68:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000a6a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000a6e:	085b      	lsrs	r3, r3, #1
 8000a70:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000a72:	7bfb      	ldrb	r3, [r7, #15]
 8000a74:	08db      	lsrs	r3, r3, #3
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	461a      	mov	r2, r3
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
 8000a7c:	f003 0307 	and.w	r3, r3, #7
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	bf14      	ite	ne
 8000a86:	2301      	movne	r3, #1
 8000a88:	2300      	moveq	r3, #0
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	4413      	add	r3, r2
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000a94:	b292      	uxth	r2, r2
 8000a96:	fb02 f303 	mul.w	r3, r2, r3
 8000a9a:	81bb      	strh	r3, [r7, #12]
	num=num-' ';    //得到偏移后的值
 8000a9c:	78fb      	ldrb	r3, [r7, #3]
 8000a9e:	3b20      	subs	r3, #32
 8000aa0:	70fb      	strb	r3, [r7, #3]
	LCD_Address_Set(x,y,x+sizex-1,y+sizey-1);  //设置光标位置
 8000aa2:	7bfb      	ldrb	r3, [r7, #15]
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	88fb      	ldrh	r3, [r7, #6]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	3b01      	subs	r3, #1
 8000aae:	b29c      	uxth	r4, r3
 8000ab0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	88bb      	ldrh	r3, [r7, #4]
 8000ab8:	4413      	add	r3, r2
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	3b01      	subs	r3, #1
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	88b9      	ldrh	r1, [r7, #4]
 8000ac2:	88f8      	ldrh	r0, [r7, #6]
 8000ac4:	4622      	mov	r2, r4
 8000ac6:	f001 fed7 	bl	8002878 <LCD_Address_Set>
	for(i=0;i<TypefaceNum;i++)
 8000aca:	2300      	movs	r3, #0
 8000acc:	827b      	strh	r3, [r7, #18]
 8000ace:	e086      	b.n	8000bde <LCD_ShowChar+0x19a>
	{
		if(sizey==12)temp=ascii_1206[num][i];		       //调用6x12字体
 8000ad0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ad4:	2b0c      	cmp	r3, #12
 8000ad6:	d10b      	bne.n	8000af0 <LCD_ShowChar+0xac>
 8000ad8:	78fa      	ldrb	r2, [r7, #3]
 8000ada:	8a79      	ldrh	r1, [r7, #18]
 8000adc:	4845      	ldr	r0, [pc, #276]	; (8000bf4 <LCD_ShowChar+0x1b0>)
 8000ade:	4613      	mov	r3, r2
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	4413      	add	r3, r2
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	4403      	add	r3, r0
 8000ae8:	440b      	add	r3, r1
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	75fb      	strb	r3, [r7, #23]
 8000aee:	e028      	b.n	8000b42 <LCD_ShowChar+0xfe>
		else if(sizey==16)temp=ascii_1608[num][i];		 //调用8x16字体
 8000af0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000af4:	2b10      	cmp	r3, #16
 8000af6:	d108      	bne.n	8000b0a <LCD_ShowChar+0xc6>
 8000af8:	78fa      	ldrb	r2, [r7, #3]
 8000afa:	8a7b      	ldrh	r3, [r7, #18]
 8000afc:	493e      	ldr	r1, [pc, #248]	; (8000bf8 <LCD_ShowChar+0x1b4>)
 8000afe:	0112      	lsls	r2, r2, #4
 8000b00:	440a      	add	r2, r1
 8000b02:	4413      	add	r3, r2
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	75fb      	strb	r3, [r7, #23]
 8000b08:	e01b      	b.n	8000b42 <LCD_ShowChar+0xfe>
		else if(sizey==24)temp=ascii_2412[num][i];		 //调用12x24字体
 8000b0a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b0e:	2b18      	cmp	r3, #24
 8000b10:	d10b      	bne.n	8000b2a <LCD_ShowChar+0xe6>
 8000b12:	78fa      	ldrb	r2, [r7, #3]
 8000b14:	8a79      	ldrh	r1, [r7, #18]
 8000b16:	4839      	ldr	r0, [pc, #228]	; (8000bfc <LCD_ShowChar+0x1b8>)
 8000b18:	4613      	mov	r3, r2
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	4413      	add	r3, r2
 8000b1e:	011b      	lsls	r3, r3, #4
 8000b20:	4403      	add	r3, r0
 8000b22:	440b      	add	r3, r1
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	75fb      	strb	r3, [r7, #23]
 8000b28:	e00b      	b.n	8000b42 <LCD_ShowChar+0xfe>
		else if(sizey==32)temp=ascii_3216[num][i];		 //调用16x32字体
 8000b2a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b2e:	2b20      	cmp	r3, #32
 8000b30:	d15b      	bne.n	8000bea <LCD_ShowChar+0x1a6>
 8000b32:	78fa      	ldrb	r2, [r7, #3]
 8000b34:	8a7b      	ldrh	r3, [r7, #18]
 8000b36:	4932      	ldr	r1, [pc, #200]	; (8000c00 <LCD_ShowChar+0x1bc>)
 8000b38:	0192      	lsls	r2, r2, #6
 8000b3a:	440a      	add	r2, r1
 8000b3c:	4413      	add	r3, r2
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000b42:	2300      	movs	r3, #0
 8000b44:	75bb      	strb	r3, [r7, #22]
 8000b46:	e044      	b.n	8000bd2 <LCD_ShowChar+0x18e>
		{
			if(!mode)//非叠加模式
 8000b48:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d120      	bne.n	8000b92 <LCD_ShowChar+0x14e>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000b50:	7dfa      	ldrb	r2, [r7, #23]
 8000b52:	7dbb      	ldrb	r3, [r7, #22]
 8000b54:	fa42 f303 	asr.w	r3, r2, r3
 8000b58:	f003 0301 	and.w	r3, r3, #1
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d004      	beq.n	8000b6a <LCD_ShowChar+0x126>
 8000b60:	883b      	ldrh	r3, [r7, #0]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f001 fe59 	bl	800281a <LCD_WR_DATA>
 8000b68:	e003      	b.n	8000b72 <LCD_ShowChar+0x12e>
				else LCD_WR_DATA(bc);
 8000b6a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f001 fe54 	bl	800281a <LCD_WR_DATA>
				m++;
 8000b72:	7d7b      	ldrb	r3, [r7, #21]
 8000b74:	3301      	adds	r3, #1
 8000b76:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000b78:	7d7b      	ldrb	r3, [r7, #21]
 8000b7a:	7bfa      	ldrb	r2, [r7, #15]
 8000b7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b80:	fb02 f201 	mul.w	r2, r2, r1
 8000b84:	1a9b      	subs	r3, r3, r2
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d11f      	bne.n	8000bcc <LCD_ShowChar+0x188>
				{
					m=0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	757b      	strb	r3, [r7, #21]
					break;
 8000b90:	e022      	b.n	8000bd8 <LCD_ShowChar+0x194>
				}
			}
			else//叠加模式
			{
				if(temp&(0x01<<t))LCD_DrawPoint(x,y,fc);//画一个点
 8000b92:	7dfa      	ldrb	r2, [r7, #23]
 8000b94:	7dbb      	ldrb	r3, [r7, #22]
 8000b96:	fa42 f303 	asr.w	r3, r2, r3
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d005      	beq.n	8000bae <LCD_ShowChar+0x16a>
 8000ba2:	883a      	ldrh	r2, [r7, #0]
 8000ba4:	88b9      	ldrh	r1, [r7, #4]
 8000ba6:	88fb      	ldrh	r3, [r7, #6]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fe60 	bl	800086e <LCD_DrawPoint>
				x++;
 8000bae:	88fb      	ldrh	r3, [r7, #6]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000bb4:	88fa      	ldrh	r2, [r7, #6]
 8000bb6:	8a3b      	ldrh	r3, [r7, #16]
 8000bb8:	1ad2      	subs	r2, r2, r3
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d105      	bne.n	8000bcc <LCD_ShowChar+0x188>
				{
					x=x0;
 8000bc0:	8a3b      	ldrh	r3, [r7, #16]
 8000bc2:	80fb      	strh	r3, [r7, #6]
					y++;
 8000bc4:	88bb      	ldrh	r3, [r7, #4]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	80bb      	strh	r3, [r7, #4]
					break;
 8000bca:	e005      	b.n	8000bd8 <LCD_ShowChar+0x194>
		for(t=0;t<8;t++)
 8000bcc:	7dbb      	ldrb	r3, [r7, #22]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	75bb      	strb	r3, [r7, #22]
 8000bd2:	7dbb      	ldrb	r3, [r7, #22]
 8000bd4:	2b07      	cmp	r3, #7
 8000bd6:	d9b7      	bls.n	8000b48 <LCD_ShowChar+0x104>
	for(i=0;i<TypefaceNum;i++)
 8000bd8:	8a7b      	ldrh	r3, [r7, #18]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	827b      	strh	r3, [r7, #18]
 8000bde:	8a7a      	ldrh	r2, [r7, #18]
 8000be0:	89bb      	ldrh	r3, [r7, #12]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	f4ff af74 	bcc.w	8000ad0 <LCD_ShowChar+0x8c>
 8000be8:	e000      	b.n	8000bec <LCD_ShowChar+0x1a8>
		else return;
 8000bea:	bf00      	nop
				}
			}
		}
	}
}
 8000bec:	371c      	adds	r7, #28
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd90      	pop	{r4, r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	08005c18 	.word	0x08005c18
 8000bf8:	0800608c 	.word	0x0800608c
 8000bfc:	0800667c 	.word	0x0800667c
 8000c00:	0800784c 	.word	0x0800784c

08000c04 <LCD_ShowString>:
                sizey 字号
                mode:  0非叠加模式  1叠加模式
      返回值：  无
******************************************************************************/
void LCD_ShowString(u16 x,u16 y,const u8 *p,u16 fc,u16 bc,u8 sizey,u8 mode)
{
 8000c04:	b590      	push	{r4, r7, lr}
 8000c06:	b089      	sub	sp, #36	; 0x24
 8000c08:	af04      	add	r7, sp, #16
 8000c0a:	60ba      	str	r2, [r7, #8]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4603      	mov	r3, r0
 8000c10:	81fb      	strh	r3, [r7, #14]
 8000c12:	460b      	mov	r3, r1
 8000c14:	81bb      	strh	r3, [r7, #12]
 8000c16:	4613      	mov	r3, r2
 8000c18:	80fb      	strh	r3, [r7, #6]
	while(*p!='\0')
 8000c1a:	e01a      	b.n	8000c52 <LCD_ShowString+0x4e>
	{
		LCD_ShowChar(x,y,*p,fc,bc,sizey,mode);
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	781a      	ldrb	r2, [r3, #0]
 8000c20:	88fc      	ldrh	r4, [r7, #6]
 8000c22:	89b9      	ldrh	r1, [r7, #12]
 8000c24:	89f8      	ldrh	r0, [r7, #14]
 8000c26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000c2a:	9302      	str	r3, [sp, #8]
 8000c2c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c30:	9301      	str	r3, [sp, #4]
 8000c32:	8c3b      	ldrh	r3, [r7, #32]
 8000c34:	9300      	str	r3, [sp, #0]
 8000c36:	4623      	mov	r3, r4
 8000c38:	f7ff ff04 	bl	8000a44 <LCD_ShowChar>
		x+=sizey/2;
 8000c3c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c40:	085b      	lsrs	r3, r3, #1
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	89fb      	ldrh	r3, [r7, #14]
 8000c48:	4413      	add	r3, r2
 8000c4a:	81fb      	strh	r3, [r7, #14]
		p++;
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	60bb      	str	r3, [r7, #8]
	while(*p!='\0')
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d1e0      	bne.n	8000c1c <LCD_ShowString+0x18>
	}
}
 8000c5a:	bf00      	nop
 8000c5c:	3714      	adds	r7, #20
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd90      	pop	{r4, r7, pc}

08000c62 <mypow>:
      函数说明：显示数字
      入口数据：m底数，n指数
      返回值：  无
******************************************************************************/
u32 mypow(u8 m,u8 n)
{
 8000c62:	b480      	push	{r7}
 8000c64:	b085      	sub	sp, #20
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	4603      	mov	r3, r0
 8000c6a:	460a      	mov	r2, r1
 8000c6c:	71fb      	strb	r3, [r7, #7]
 8000c6e:	4613      	mov	r3, r2
 8000c70:	71bb      	strb	r3, [r7, #6]
	u32 result=1;
 8000c72:	2301      	movs	r3, #1
 8000c74:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000c76:	e004      	b.n	8000c82 <mypow+0x20>
 8000c78:	79fa      	ldrb	r2, [r7, #7]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	fb02 f303 	mul.w	r3, r2, r3
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	79bb      	ldrb	r3, [r7, #6]
 8000c84:	1e5a      	subs	r2, r3, #1
 8000c86:	71ba      	strb	r2, [r7, #6]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d1f5      	bne.n	8000c78 <mypow+0x16>
	return result;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr

08000c98 <LCD_ShowIntNum>:
                bc 字的背景色
                sizey 字号
      返回值：  无
******************************************************************************/
void LCD_ShowIntNum(u16 x,u16 y,u16 num,u8 len,u16 fc,u16 bc,u8 sizey)
{
 8000c98:	b590      	push	{r4, r7, lr}
 8000c9a:	b089      	sub	sp, #36	; 0x24
 8000c9c:	af04      	add	r7, sp, #16
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	4608      	mov	r0, r1
 8000ca2:	4611      	mov	r1, r2
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4623      	mov	r3, r4
 8000ca8:	80fb      	strh	r3, [r7, #6]
 8000caa:	4603      	mov	r3, r0
 8000cac:	80bb      	strh	r3, [r7, #4]
 8000cae:	460b      	mov	r3, r1
 8000cb0:	807b      	strh	r3, [r7, #2]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	707b      	strb	r3, [r7, #1]
	u8 t,temp;
	u8 enshow=0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	73bb      	strb	r3, [r7, #14]
	u8 sizex=sizey/2;
 8000cba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000cbe:	085b      	lsrs	r3, r3, #1
 8000cc0:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	73fb      	strb	r3, [r7, #15]
 8000cc6:	e059      	b.n	8000d7c <LCD_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8000cc8:	887c      	ldrh	r4, [r7, #2]
 8000cca:	787a      	ldrb	r2, [r7, #1]
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	200a      	movs	r0, #10
 8000cda:	f7ff ffc2 	bl	8000c62 <mypow>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	fbb4 f1f3 	udiv	r1, r4, r3
 8000ce4:	4b29      	ldr	r3, [pc, #164]	; (8000d8c <LCD_ShowIntNum+0xf4>)
 8000ce6:	fba3 2301 	umull	r2, r3, r3, r1
 8000cea:	08da      	lsrs	r2, r3, #3
 8000cec:	4613      	mov	r3, r2
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	4413      	add	r3, r2
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	1aca      	subs	r2, r1, r3
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8000cfa:	7bbb      	ldrb	r3, [r7, #14]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d121      	bne.n	8000d44 <LCD_ShowIntNum+0xac>
 8000d00:	7bfa      	ldrb	r2, [r7, #15]
 8000d02:	787b      	ldrb	r3, [r7, #1]
 8000d04:	3b01      	subs	r3, #1
 8000d06:	429a      	cmp	r2, r3
 8000d08:	da1c      	bge.n	8000d44 <LCD_ShowIntNum+0xac>
		{
			if(temp==0)
 8000d0a:	7b3b      	ldrb	r3, [r7, #12]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d117      	bne.n	8000d40 <LCD_ShowIntNum+0xa8>
			{
				LCD_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	7b7a      	ldrb	r2, [r7, #13]
 8000d16:	b292      	uxth	r2, r2
 8000d18:	fb02 f303 	mul.w	r3, r2, r3
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	88fb      	ldrh	r3, [r7, #6]
 8000d20:	4413      	add	r3, r2
 8000d22:	b298      	uxth	r0, r3
 8000d24:	8c3a      	ldrh	r2, [r7, #32]
 8000d26:	88b9      	ldrh	r1, [r7, #4]
 8000d28:	2300      	movs	r3, #0
 8000d2a:	9302      	str	r3, [sp, #8]
 8000d2c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d30:	9301      	str	r3, [sp, #4]
 8000d32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	4613      	mov	r3, r2
 8000d38:	2220      	movs	r2, #32
 8000d3a:	f7ff fe83 	bl	8000a44 <LCD_ShowChar>
				continue;
 8000d3e:	e01a      	b.n	8000d76 <LCD_ShowIntNum+0xde>
			}else enshow=1;
 8000d40:	2301      	movs	r3, #1
 8000d42:	73bb      	strb	r3, [r7, #14]

		}
	 	LCD_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	7b7a      	ldrb	r2, [r7, #13]
 8000d4a:	b292      	uxth	r2, r2
 8000d4c:	fb02 f303 	mul.w	r3, r2, r3
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	88fb      	ldrh	r3, [r7, #6]
 8000d54:	4413      	add	r3, r2
 8000d56:	b298      	uxth	r0, r3
 8000d58:	7b3b      	ldrb	r3, [r7, #12]
 8000d5a:	3330      	adds	r3, #48	; 0x30
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	8c3c      	ldrh	r4, [r7, #32]
 8000d60:	88b9      	ldrh	r1, [r7, #4]
 8000d62:	2300      	movs	r3, #0
 8000d64:	9302      	str	r3, [sp, #8]
 8000d66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d6a:	9301      	str	r3, [sp, #4]
 8000d6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d6e:	9300      	str	r3, [sp, #0]
 8000d70:	4623      	mov	r3, r4
 8000d72:	f7ff fe67 	bl	8000a44 <LCD_ShowChar>
	for(t=0;t<len;t++)
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	73fb      	strb	r3, [r7, #15]
 8000d7c:	7bfa      	ldrb	r2, [r7, #15]
 8000d7e:	787b      	ldrb	r3, [r7, #1]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d3a1      	bcc.n	8000cc8 <LCD_ShowIntNum+0x30>
	}
}
 8000d84:	bf00      	nop
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd90      	pop	{r4, r7, pc}
 8000d8c:	cccccccd 	.word	0xcccccccd

08000d90 <LCD_MainOrder>:
		}
	}
}
//主页面显示
void LCD_MainOrder (int page,int *page_1,int line,int mode,int *mode_1)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af04      	add	r7, sp, #16
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
 8000d9c:	603b      	str	r3, [r7, #0]
	if(*page_1==4){LCD_ShowString(0,0,"                     ",WHITE,BLACK,24,0);}//清行代码
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	d10c      	bne.n	8000dc0 <LCD_MainOrder+0x30>
 8000da6:	2300      	movs	r3, #0
 8000da8:	9302      	str	r3, [sp, #8]
 8000daa:	2318      	movs	r3, #24
 8000dac:	9301      	str	r3, [sp, #4]
 8000dae:	2300      	movs	r3, #0
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000db6:	4aa2      	ldr	r2, [pc, #648]	; (8001040 <LCD_MainOrder+0x2b0>)
 8000db8:	2100      	movs	r1, #0
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f7ff ff22 	bl	8000c04 <LCD_ShowString>
	if(*page_1!=page){LCD_ShowString(0,10,"                     ",WHITE,BLACK,24,0);}//清行代码
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	68fa      	ldr	r2, [r7, #12]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d00c      	beq.n	8000de4 <LCD_MainOrder+0x54>
 8000dca:	2300      	movs	r3, #0
 8000dcc:	9302      	str	r3, [sp, #8]
 8000dce:	2318      	movs	r3, #24
 8000dd0:	9301      	str	r3, [sp, #4]
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	9300      	str	r3, [sp, #0]
 8000dd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dda:	4a99      	ldr	r2, [pc, #612]	; (8001040 <LCD_MainOrder+0x2b0>)
 8000ddc:	210a      	movs	r1, #10
 8000dde:	2000      	movs	r0, #0
 8000de0:	f7ff ff10 	bl	8000c04 <LCD_ShowString>
	if(*page_1==4){LCD_ShowString(0,25,"                     ",WHITE,BLACK,24,0);}//清行代码
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b04      	cmp	r3, #4
 8000dea:	d10c      	bne.n	8000e06 <LCD_MainOrder+0x76>
 8000dec:	2300      	movs	r3, #0
 8000dee:	9302      	str	r3, [sp, #8]
 8000df0:	2318      	movs	r3, #24
 8000df2:	9301      	str	r3, [sp, #4]
 8000df4:	2300      	movs	r3, #0
 8000df6:	9300      	str	r3, [sp, #0]
 8000df8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dfc:	4a90      	ldr	r2, [pc, #576]	; (8001040 <LCD_MainOrder+0x2b0>)
 8000dfe:	2119      	movs	r1, #25
 8000e00:	2000      	movs	r0, #0
 8000e02:	f7ff feff 	bl	8000c04 <LCD_ShowString>
	LCD_ShowString(65,10,"Main Order",WHITE,BLACK,24,0);
 8000e06:	2300      	movs	r3, #0
 8000e08:	9302      	str	r3, [sp, #8]
 8000e0a:	2318      	movs	r3, #24
 8000e0c:	9301      	str	r3, [sp, #4]
 8000e0e:	2300      	movs	r3, #0
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e16:	4a8b      	ldr	r2, [pc, #556]	; (8001044 <LCD_MainOrder+0x2b4>)
 8000e18:	210a      	movs	r1, #10
 8000e1a:	2041      	movs	r0, #65	; 0x41
 8000e1c:	f7ff fef2 	bl	8000c04 <LCD_ShowString>

	if(*page_1!=page){LCD_ShowString(0,40,"                     ",WHITE,BLACK,24,0);}//清行代码
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	68fa      	ldr	r2, [r7, #12]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d00c      	beq.n	8000e44 <LCD_MainOrder+0xb4>
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	9302      	str	r3, [sp, #8]
 8000e2e:	2318      	movs	r3, #24
 8000e30:	9301      	str	r3, [sp, #4]
 8000e32:	2300      	movs	r3, #0
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e3a:	4a81      	ldr	r2, [pc, #516]	; (8001040 <LCD_MainOrder+0x2b0>)
 8000e3c:	2128      	movs	r1, #40	; 0x28
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f7ff fee0 	bl	8000c04 <LCD_ShowString>
	if(*page_1!=page){LCD_ShowString(0,50,"                     ",WHITE,BLACK,24,0);}//清行代码
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	68fa      	ldr	r2, [r7, #12]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d00c      	beq.n	8000e68 <LCD_MainOrder+0xd8>
 8000e4e:	2300      	movs	r3, #0
 8000e50:	9302      	str	r3, [sp, #8]
 8000e52:	2318      	movs	r3, #24
 8000e54:	9301      	str	r3, [sp, #4]
 8000e56:	2300      	movs	r3, #0
 8000e58:	9300      	str	r3, [sp, #0]
 8000e5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e5e:	4a78      	ldr	r2, [pc, #480]	; (8001040 <LCD_MainOrder+0x2b0>)
 8000e60:	2132      	movs	r1, #50	; 0x32
 8000e62:	2000      	movs	r0, #0
 8000e64:	f7ff fece 	bl	8000c04 <LCD_ShowString>
	if(*page_1!=page||*mode_1!=mode){LCD_ShowString(0,40,"                     ",WHITE,BLACK,24,0);}//清行代码
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d104      	bne.n	8000e7c <LCD_MainOrder+0xec>
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	683a      	ldr	r2, [r7, #0]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d00c      	beq.n	8000e96 <LCD_MainOrder+0x106>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	9302      	str	r3, [sp, #8]
 8000e80:	2318      	movs	r3, #24
 8000e82:	9301      	str	r3, [sp, #4]
 8000e84:	2300      	movs	r3, #0
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e8c:	4a6c      	ldr	r2, [pc, #432]	; (8001040 <LCD_MainOrder+0x2b0>)
 8000e8e:	2128      	movs	r1, #40	; 0x28
 8000e90:	2000      	movs	r0, #0
 8000e92:	f7ff feb7 	bl	8000c04 <LCD_ShowString>
	if(mode==1)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d10c      	bne.n	8000eb6 <LCD_MainOrder+0x126>
	{
		LCD_ShowString(57,40,"Mode:Manual",YELLOW,BLACK,24,0);
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	9302      	str	r3, [sp, #8]
 8000ea0:	2318      	movs	r3, #24
 8000ea2:	9301      	str	r3, [sp, #4]
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000eac:	4a66      	ldr	r2, [pc, #408]	; (8001048 <LCD_MainOrder+0x2b8>)
 8000eae:	2128      	movs	r1, #40	; 0x28
 8000eb0:	2039      	movs	r0, #57	; 0x39
 8000eb2:	f7ff fea7 	bl	8000c04 <LCD_ShowString>
	}

	if(mode==2)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d10c      	bne.n	8000ed6 <LCD_MainOrder+0x146>
	{
		LCD_ShowString(42,40,"Mode:Automatic",YELLOW,BLACK,24,0);
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	9302      	str	r3, [sp, #8]
 8000ec0:	2318      	movs	r3, #24
 8000ec2:	9301      	str	r3, [sp, #4]
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000ecc:	4a5f      	ldr	r2, [pc, #380]	; (800104c <LCD_MainOrder+0x2bc>)
 8000ece:	2128      	movs	r1, #40	; 0x28
 8000ed0:	202a      	movs	r0, #42	; 0x2a
 8000ed2:	f7ff fe97 	bl	8000c04 <LCD_ShowString>
	}

	if(*page_1==4){LCD_ShowString(0,75,"                     ",WHITE,BLACK,24,0);}//清行代码
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b04      	cmp	r3, #4
 8000edc:	d10c      	bne.n	8000ef8 <LCD_MainOrder+0x168>
 8000ede:	2300      	movs	r3, #0
 8000ee0:	9302      	str	r3, [sp, #8]
 8000ee2:	2318      	movs	r3, #24
 8000ee4:	9301      	str	r3, [sp, #4]
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eee:	4a54      	ldr	r2, [pc, #336]	; (8001040 <LCD_MainOrder+0x2b0>)
 8000ef0:	214b      	movs	r1, #75	; 0x4b
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f7ff fe86 	bl	8000c04 <LCD_ShowString>
	if(*page_1!=page){LCD_ShowString(0,90,"                     ",WHITE,BLACK,24,0);}//清行代码
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	68fa      	ldr	r2, [r7, #12]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d00c      	beq.n	8000f1c <LCD_MainOrder+0x18c>
 8000f02:	2300      	movs	r3, #0
 8000f04:	9302      	str	r3, [sp, #8]
 8000f06:	2318      	movs	r3, #24
 8000f08:	9301      	str	r3, [sp, #4]
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f12:	4a4b      	ldr	r2, [pc, #300]	; (8001040 <LCD_MainOrder+0x2b0>)
 8000f14:	215a      	movs	r1, #90	; 0x5a
 8000f16:	2000      	movs	r0, #0
 8000f18:	f7ff fe74 	bl	8000c04 <LCD_ShowString>
	if(*page_1==4){LCD_ShowString(0,100,"                     ",WHITE,BLACK,24,0);}//清行代码
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b04      	cmp	r3, #4
 8000f22:	d10c      	bne.n	8000f3e <LCD_MainOrder+0x1ae>
 8000f24:	2300      	movs	r3, #0
 8000f26:	9302      	str	r3, [sp, #8]
 8000f28:	2318      	movs	r3, #24
 8000f2a:	9301      	str	r3, [sp, #4]
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f34:	4a42      	ldr	r2, [pc, #264]	; (8001040 <LCD_MainOrder+0x2b0>)
 8000f36:	2164      	movs	r1, #100	; 0x64
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f7ff fe63 	bl	8000c04 <LCD_ShowString>
	if(line==1){LCD_ShowString(30,90,"Manual",WHITE,DARKBLUE ,24,0);}
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d10e      	bne.n	8000f62 <LCD_MainOrder+0x1d2>
 8000f44:	2300      	movs	r3, #0
 8000f46:	9302      	str	r3, [sp, #8]
 8000f48:	2318      	movs	r3, #24
 8000f4a:	9301      	str	r3, [sp, #4]
 8000f4c:	f240 13cf 	movw	r3, #463	; 0x1cf
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f56:	4a3e      	ldr	r2, [pc, #248]	; (8001050 <LCD_MainOrder+0x2c0>)
 8000f58:	215a      	movs	r1, #90	; 0x5a
 8000f5a:	201e      	movs	r0, #30
 8000f5c:	f7ff fe52 	bl	8000c04 <LCD_ShowString>
 8000f60:	e00c      	b.n	8000f7c <LCD_MainOrder+0x1ec>
	else{LCD_ShowString(30,90,"Manual",WHITE,BLACK,24,0);}
 8000f62:	2300      	movs	r3, #0
 8000f64:	9302      	str	r3, [sp, #8]
 8000f66:	2318      	movs	r3, #24
 8000f68:	9301      	str	r3, [sp, #4]
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f72:	4a37      	ldr	r2, [pc, #220]	; (8001050 <LCD_MainOrder+0x2c0>)
 8000f74:	215a      	movs	r1, #90	; 0x5a
 8000f76:	201e      	movs	r0, #30
 8000f78:	f7ff fe44 	bl	8000c04 <LCD_ShowString>

	LCD_ShowString(100,90,"/",WHITE,BLACK,24,0);
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	9302      	str	r3, [sp, #8]
 8000f80:	2318      	movs	r3, #24
 8000f82:	9301      	str	r3, [sp, #4]
 8000f84:	2300      	movs	r3, #0
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f8c:	4a31      	ldr	r2, [pc, #196]	; (8001054 <LCD_MainOrder+0x2c4>)
 8000f8e:	215a      	movs	r1, #90	; 0x5a
 8000f90:	2064      	movs	r0, #100	; 0x64
 8000f92:	f7ff fe37 	bl	8000c04 <LCD_ShowString>

	if(line==2){LCD_ShowString(110,90,"Automatic",WHITE,DARKBLUE ,24,0);}
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d10e      	bne.n	8000fba <LCD_MainOrder+0x22a>
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	9302      	str	r3, [sp, #8]
 8000fa0:	2318      	movs	r3, #24
 8000fa2:	9301      	str	r3, [sp, #4]
 8000fa4:	f240 13cf 	movw	r3, #463	; 0x1cf
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fae:	4a2a      	ldr	r2, [pc, #168]	; (8001058 <LCD_MainOrder+0x2c8>)
 8000fb0:	215a      	movs	r1, #90	; 0x5a
 8000fb2:	206e      	movs	r0, #110	; 0x6e
 8000fb4:	f7ff fe26 	bl	8000c04 <LCD_ShowString>
 8000fb8:	e00c      	b.n	8000fd4 <LCD_MainOrder+0x244>
	else{LCD_ShowString(110,90,"Automatic",WHITE,BLACK,24,0);}
 8000fba:	2300      	movs	r3, #0
 8000fbc:	9302      	str	r3, [sp, #8]
 8000fbe:	2318      	movs	r3, #24
 8000fc0:	9301      	str	r3, [sp, #4]
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fca:	4a23      	ldr	r2, [pc, #140]	; (8001058 <LCD_MainOrder+0x2c8>)
 8000fcc:	215a      	movs	r1, #90	; 0x5a
 8000fce:	206e      	movs	r0, #110	; 0x6e
 8000fd0:	f7ff fe18 	bl	8000c04 <LCD_ShowString>


	if(*page_1!=page){LCD_ShowString(0,120,"                     ",WHITE,BLACK,24,0);}//清行代码
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	68fa      	ldr	r2, [r7, #12]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d00c      	beq.n	8000ff8 <LCD_MainOrder+0x268>
 8000fde:	2300      	movs	r3, #0
 8000fe0:	9302      	str	r3, [sp, #8]
 8000fe2:	2318      	movs	r3, #24
 8000fe4:	9301      	str	r3, [sp, #4]
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fee:	4a14      	ldr	r2, [pc, #80]	; (8001040 <LCD_MainOrder+0x2b0>)
 8000ff0:	2178      	movs	r1, #120	; 0x78
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f7ff fe06 	bl	8000c04 <LCD_ShowString>
	if(*page_1==4){LCD_ShowString(0,125,"                     ",WHITE,BLACK,24,0);}//清行代码
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b04      	cmp	r3, #4
 8000ffe:	d10c      	bne.n	800101a <LCD_MainOrder+0x28a>
 8001000:	2300      	movs	r3, #0
 8001002:	9302      	str	r3, [sp, #8]
 8001004:	2318      	movs	r3, #24
 8001006:	9301      	str	r3, [sp, #4]
 8001008:	2300      	movs	r3, #0
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001010:	4a0b      	ldr	r2, [pc, #44]	; (8001040 <LCD_MainOrder+0x2b0>)
 8001012:	217d      	movs	r1, #125	; 0x7d
 8001014:	2000      	movs	r0, #0
 8001016:	f7ff fdf5 	bl	8000c04 <LCD_ShowString>
	if(line==3){LCD_ShowString(20,120,"Basic information",WHITE,DARKBLUE ,24,0);}
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b03      	cmp	r3, #3
 800101e:	d11f      	bne.n	8001060 <LCD_MainOrder+0x2d0>
 8001020:	2300      	movs	r3, #0
 8001022:	9302      	str	r3, [sp, #8]
 8001024:	2318      	movs	r3, #24
 8001026:	9301      	str	r3, [sp, #4]
 8001028:	f240 13cf 	movw	r3, #463	; 0x1cf
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001032:	4a0a      	ldr	r2, [pc, #40]	; (800105c <LCD_MainOrder+0x2cc>)
 8001034:	2178      	movs	r1, #120	; 0x78
 8001036:	2014      	movs	r0, #20
 8001038:	f7ff fde4 	bl	8000c04 <LCD_ShowString>
 800103c:	e01d      	b.n	800107a <LCD_MainOrder+0x2ea>
 800103e:	bf00      	nop
 8001040:	080059a0 	.word	0x080059a0
 8001044:	080059b8 	.word	0x080059b8
 8001048:	080059c4 	.word	0x080059c4
 800104c:	080059d0 	.word	0x080059d0
 8001050:	080059e0 	.word	0x080059e0
 8001054:	080059e8 	.word	0x080059e8
 8001058:	080059ec 	.word	0x080059ec
 800105c:	080059f8 	.word	0x080059f8
	else{LCD_ShowString(20,120,"Basic information",WHITE,BLACK,24,0);}
 8001060:	2300      	movs	r3, #0
 8001062:	9302      	str	r3, [sp, #8]
 8001064:	2318      	movs	r3, #24
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	2300      	movs	r3, #0
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001070:	4a9c      	ldr	r2, [pc, #624]	; (80012e4 <LCD_MainOrder+0x554>)
 8001072:	2178      	movs	r1, #120	; 0x78
 8001074:	2014      	movs	r0, #20
 8001076:	f7ff fdc5 	bl	8000c04 <LCD_ShowString>

	if(*page_1!=page){LCD_ShowString(0,150,"                     ",WHITE,BLACK,24,0);}//清行代码
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	429a      	cmp	r2, r3
 8001082:	d00c      	beq.n	800109e <LCD_MainOrder+0x30e>
 8001084:	2300      	movs	r3, #0
 8001086:	9302      	str	r3, [sp, #8]
 8001088:	2318      	movs	r3, #24
 800108a:	9301      	str	r3, [sp, #4]
 800108c:	2300      	movs	r3, #0
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001094:	4a94      	ldr	r2, [pc, #592]	; (80012e8 <LCD_MainOrder+0x558>)
 8001096:	2196      	movs	r1, #150	; 0x96
 8001098:	2000      	movs	r0, #0
 800109a:	f7ff fdb3 	bl	8000c04 <LCD_ShowString>
	if(line==4){LCD_ShowString(70,150,"The senor",WHITE,DARKBLUE ,24,0);}
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b04      	cmp	r3, #4
 80010a2:	d10e      	bne.n	80010c2 <LCD_MainOrder+0x332>
 80010a4:	2300      	movs	r3, #0
 80010a6:	9302      	str	r3, [sp, #8]
 80010a8:	2318      	movs	r3, #24
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	f240 13cf 	movw	r3, #463	; 0x1cf
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010b6:	4a8d      	ldr	r2, [pc, #564]	; (80012ec <LCD_MainOrder+0x55c>)
 80010b8:	2196      	movs	r1, #150	; 0x96
 80010ba:	2046      	movs	r0, #70	; 0x46
 80010bc:	f7ff fda2 	bl	8000c04 <LCD_ShowString>
 80010c0:	e00c      	b.n	80010dc <LCD_MainOrder+0x34c>
	else{LCD_ShowString(70,150,"The senor",WHITE,BLACK,24,0);}
 80010c2:	2300      	movs	r3, #0
 80010c4:	9302      	str	r3, [sp, #8]
 80010c6:	2318      	movs	r3, #24
 80010c8:	9301      	str	r3, [sp, #4]
 80010ca:	2300      	movs	r3, #0
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010d2:	4a86      	ldr	r2, [pc, #536]	; (80012ec <LCD_MainOrder+0x55c>)
 80010d4:	2196      	movs	r1, #150	; 0x96
 80010d6:	2046      	movs	r0, #70	; 0x46
 80010d8:	f7ff fd94 	bl	8000c04 <LCD_ShowString>

	if(*page_1==4){LCD_ShowString(0,175,"                     ",WHITE,BLACK,24,0);}//清行代码
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b04      	cmp	r3, #4
 80010e2:	d10c      	bne.n	80010fe <LCD_MainOrder+0x36e>
 80010e4:	2300      	movs	r3, #0
 80010e6:	9302      	str	r3, [sp, #8]
 80010e8:	2318      	movs	r3, #24
 80010ea:	9301      	str	r3, [sp, #4]
 80010ec:	2300      	movs	r3, #0
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010f4:	4a7c      	ldr	r2, [pc, #496]	; (80012e8 <LCD_MainOrder+0x558>)
 80010f6:	21af      	movs	r1, #175	; 0xaf
 80010f8:	2000      	movs	r0, #0
 80010fa:	f7ff fd83 	bl	8000c04 <LCD_ShowString>
	if(*page_1!=page){LCD_ShowString(0,180,"                     ",WHITE,BLACK,24,0);}//清行代码
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	429a      	cmp	r2, r3
 8001106:	d00c      	beq.n	8001122 <LCD_MainOrder+0x392>
 8001108:	2300      	movs	r3, #0
 800110a:	9302      	str	r3, [sp, #8]
 800110c:	2318      	movs	r3, #24
 800110e:	9301      	str	r3, [sp, #4]
 8001110:	2300      	movs	r3, #0
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001118:	4a73      	ldr	r2, [pc, #460]	; (80012e8 <LCD_MainOrder+0x558>)
 800111a:	21b4      	movs	r1, #180	; 0xb4
 800111c:	2000      	movs	r0, #0
 800111e:	f7ff fd71 	bl	8000c04 <LCD_ShowString>
	if(*page_1==4){LCD_ShowString(0,200,"                     ",WHITE,BLACK,24,0);}//清行代码
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2b04      	cmp	r3, #4
 8001128:	d10c      	bne.n	8001144 <LCD_MainOrder+0x3b4>
 800112a:	2300      	movs	r3, #0
 800112c:	9302      	str	r3, [sp, #8]
 800112e:	2318      	movs	r3, #24
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	2300      	movs	r3, #0
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800113a:	4a6b      	ldr	r2, [pc, #428]	; (80012e8 <LCD_MainOrder+0x558>)
 800113c:	21c8      	movs	r1, #200	; 0xc8
 800113e:	2000      	movs	r0, #0
 8001140:	f7ff fd60 	bl	8000c04 <LCD_ShowString>
	if(line==5){LCD_ShowString(5,180,"Ultrasonic distance",WHITE,DARKBLUE ,24,0);}
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b05      	cmp	r3, #5
 8001148:	d10e      	bne.n	8001168 <LCD_MainOrder+0x3d8>
 800114a:	2300      	movs	r3, #0
 800114c:	9302      	str	r3, [sp, #8]
 800114e:	2318      	movs	r3, #24
 8001150:	9301      	str	r3, [sp, #4]
 8001152:	f240 13cf 	movw	r3, #463	; 0x1cf
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800115c:	4a64      	ldr	r2, [pc, #400]	; (80012f0 <LCD_MainOrder+0x560>)
 800115e:	21b4      	movs	r1, #180	; 0xb4
 8001160:	2005      	movs	r0, #5
 8001162:	f7ff fd4f 	bl	8000c04 <LCD_ShowString>
 8001166:	e00c      	b.n	8001182 <LCD_MainOrder+0x3f2>
	else{LCD_ShowString(5,180,"Ultrasonic distance",WHITE,BLACK,24,0);}
 8001168:	2300      	movs	r3, #0
 800116a:	9302      	str	r3, [sp, #8]
 800116c:	2318      	movs	r3, #24
 800116e:	9301      	str	r3, [sp, #4]
 8001170:	2300      	movs	r3, #0
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001178:	4a5d      	ldr	r2, [pc, #372]	; (80012f0 <LCD_MainOrder+0x560>)
 800117a:	21b4      	movs	r1, #180	; 0xb4
 800117c:	2005      	movs	r0, #5
 800117e:	f7ff fd41 	bl	8000c04 <LCD_ShowString>


	if(*page_1!=page){LCD_ShowString(0,210,"                     ",WHITE,BLACK,24,0);}//清行代码
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	429a      	cmp	r2, r3
 800118a:	d00c      	beq.n	80011a6 <LCD_MainOrder+0x416>
 800118c:	2300      	movs	r3, #0
 800118e:	9302      	str	r3, [sp, #8]
 8001190:	2318      	movs	r3, #24
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	2300      	movs	r3, #0
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800119c:	4a52      	ldr	r2, [pc, #328]	; (80012e8 <LCD_MainOrder+0x558>)
 800119e:	21d2      	movs	r1, #210	; 0xd2
 80011a0:	2000      	movs	r0, #0
 80011a2:	f7ff fd2f 	bl	8000c04 <LCD_ShowString>
	if(*page_1==4){LCD_ShowString(0,225,"                     ",WHITE,BLACK,24,0);}//清行代码
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	d10c      	bne.n	80011c8 <LCD_MainOrder+0x438>
 80011ae:	2300      	movs	r3, #0
 80011b0:	9302      	str	r3, [sp, #8]
 80011b2:	2318      	movs	r3, #24
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	2300      	movs	r3, #0
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011be:	4a4a      	ldr	r2, [pc, #296]	; (80012e8 <LCD_MainOrder+0x558>)
 80011c0:	21e1      	movs	r1, #225	; 0xe1
 80011c2:	2000      	movs	r0, #0
 80011c4:	f7ff fd1e 	bl	8000c04 <LCD_ShowString>
	if(line==6){LCD_ShowString(80,210,"Warning",WHITE,DARKBLUE ,24,0);}
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b06      	cmp	r3, #6
 80011cc:	d10e      	bne.n	80011ec <LCD_MainOrder+0x45c>
 80011ce:	2300      	movs	r3, #0
 80011d0:	9302      	str	r3, [sp, #8]
 80011d2:	2318      	movs	r3, #24
 80011d4:	9301      	str	r3, [sp, #4]
 80011d6:	f240 13cf 	movw	r3, #463	; 0x1cf
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011e0:	4a44      	ldr	r2, [pc, #272]	; (80012f4 <LCD_MainOrder+0x564>)
 80011e2:	21d2      	movs	r1, #210	; 0xd2
 80011e4:	2050      	movs	r0, #80	; 0x50
 80011e6:	f7ff fd0d 	bl	8000c04 <LCD_ShowString>
 80011ea:	e00c      	b.n	8001206 <LCD_MainOrder+0x476>
	else{LCD_ShowString(80,210,"Warning",WHITE,BLACK,24,0);}
 80011ec:	2300      	movs	r3, #0
 80011ee:	9302      	str	r3, [sp, #8]
 80011f0:	2318      	movs	r3, #24
 80011f2:	9301      	str	r3, [sp, #4]
 80011f4:	2300      	movs	r3, #0
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011fc:	4a3d      	ldr	r2, [pc, #244]	; (80012f4 <LCD_MainOrder+0x564>)
 80011fe:	21d2      	movs	r1, #210	; 0xd2
 8001200:	2050      	movs	r0, #80	; 0x50
 8001202:	f7ff fcff 	bl	8000c04 <LCD_ShowString>

	if(*page_1!=page){LCD_ShowString(0,240,"                     ",WHITE,BLACK,24,0);}//清行代码
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	429a      	cmp	r2, r3
 800120e:	d00c      	beq.n	800122a <LCD_MainOrder+0x49a>
 8001210:	2300      	movs	r3, #0
 8001212:	9302      	str	r3, [sp, #8]
 8001214:	2318      	movs	r3, #24
 8001216:	9301      	str	r3, [sp, #4]
 8001218:	2300      	movs	r3, #0
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001220:	4a31      	ldr	r2, [pc, #196]	; (80012e8 <LCD_MainOrder+0x558>)
 8001222:	21f0      	movs	r1, #240	; 0xf0
 8001224:	2000      	movs	r0, #0
 8001226:	f7ff fced 	bl	8000c04 <LCD_ShowString>
	if(*page_1==4){LCD_ShowString(0,250,"                     ",WHITE,BLACK,24,0);}//清行代码
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b04      	cmp	r3, #4
 8001230:	d10c      	bne.n	800124c <LCD_MainOrder+0x4bc>
 8001232:	2300      	movs	r3, #0
 8001234:	9302      	str	r3, [sp, #8]
 8001236:	2318      	movs	r3, #24
 8001238:	9301      	str	r3, [sp, #4]
 800123a:	2300      	movs	r3, #0
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001242:	4a29      	ldr	r2, [pc, #164]	; (80012e8 <LCD_MainOrder+0x558>)
 8001244:	21fa      	movs	r1, #250	; 0xfa
 8001246:	2000      	movs	r0, #0
 8001248:	f7ff fcdc 	bl	8000c04 <LCD_ShowString>

	if(line==7){LCD_ShowString(10,280,"Forward",WHITE,DARKBLUE ,24,0);}
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b07      	cmp	r3, #7
 8001250:	d10f      	bne.n	8001272 <LCD_MainOrder+0x4e2>
 8001252:	2300      	movs	r3, #0
 8001254:	9302      	str	r3, [sp, #8]
 8001256:	2318      	movs	r3, #24
 8001258:	9301      	str	r3, [sp, #4]
 800125a:	f240 13cf 	movw	r3, #463	; 0x1cf
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001264:	4a24      	ldr	r2, [pc, #144]	; (80012f8 <LCD_MainOrder+0x568>)
 8001266:	f44f 718c 	mov.w	r1, #280	; 0x118
 800126a:	200a      	movs	r0, #10
 800126c:	f7ff fcca 	bl	8000c04 <LCD_ShowString>
 8001270:	e00d      	b.n	800128e <LCD_MainOrder+0x4fe>
	else{LCD_ShowString(10,280,"Forward",WHITE,BLACK,24,0);}
 8001272:	2300      	movs	r3, #0
 8001274:	9302      	str	r3, [sp, #8]
 8001276:	2318      	movs	r3, #24
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	2300      	movs	r3, #0
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001282:	4a1d      	ldr	r2, [pc, #116]	; (80012f8 <LCD_MainOrder+0x568>)
 8001284:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001288:	200a      	movs	r0, #10
 800128a:	f7ff fcbb 	bl	8000c04 <LCD_ShowString>

	if(line==8){LCD_ShowString(135,280,"Backward",WHITE,DARKBLUE ,24,0);}
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b08      	cmp	r3, #8
 8001292:	d10f      	bne.n	80012b4 <LCD_MainOrder+0x524>
 8001294:	2300      	movs	r3, #0
 8001296:	9302      	str	r3, [sp, #8]
 8001298:	2318      	movs	r3, #24
 800129a:	9301      	str	r3, [sp, #4]
 800129c:	f240 13cf 	movw	r3, #463	; 0x1cf
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012a6:	4a15      	ldr	r2, [pc, #84]	; (80012fc <LCD_MainOrder+0x56c>)
 80012a8:	f44f 718c 	mov.w	r1, #280	; 0x118
 80012ac:	2087      	movs	r0, #135	; 0x87
 80012ae:	f7ff fca9 	bl	8000c04 <LCD_ShowString>
 80012b2:	e00d      	b.n	80012d0 <LCD_MainOrder+0x540>
	else{LCD_ShowString(135,280,"Backward",WHITE,BLACK,24,0);}
 80012b4:	2300      	movs	r3, #0
 80012b6:	9302      	str	r3, [sp, #8]
 80012b8:	2318      	movs	r3, #24
 80012ba:	9301      	str	r3, [sp, #4]
 80012bc:	2300      	movs	r3, #0
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012c4:	4a0d      	ldr	r2, [pc, #52]	; (80012fc <LCD_MainOrder+0x56c>)
 80012c6:	f44f 718c 	mov.w	r1, #280	; 0x118
 80012ca:	2087      	movs	r0, #135	; 0x87
 80012cc:	f7ff fc9a 	bl	8000c04 <LCD_ShowString>

    *page_1=page;
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	601a      	str	r2, [r3, #0]
    *mode_1=mode;
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	601a      	str	r2, [r3, #0]
}
 80012dc:	bf00      	nop
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	080059f8 	.word	0x080059f8
 80012e8:	080059a0 	.word	0x080059a0
 80012ec:	08005a0c 	.word	0x08005a0c
 80012f0:	08005a18 	.word	0x08005a18
 80012f4:	08005a2c 	.word	0x08005a2c
 80012f8:	08005a34 	.word	0x08005a34
 80012fc:	08005a3c 	.word	0x08005a3c

08001300 <LCD_BasicInformation>:


void LCD_BasicInformation (int page,int *page_1,int line,int mode,unsigned char *date)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af04      	add	r7, sp, #16
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
 800130c:	603b      	str	r3, [r7, #0]
	if(*page_1!=page){LCD_ShowString(0,10,"                     ",WHITE,BLACK,24,0);}//清行代码
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	429a      	cmp	r2, r3
 8001316:	d00c      	beq.n	8001332 <LCD_BasicInformation+0x32>
 8001318:	2300      	movs	r3, #0
 800131a:	9302      	str	r3, [sp, #8]
 800131c:	2318      	movs	r3, #24
 800131e:	9301      	str	r3, [sp, #4]
 8001320:	2300      	movs	r3, #0
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001328:	4ab0      	ldr	r2, [pc, #704]	; (80015ec <LCD_BasicInformation+0x2ec>)
 800132a:	210a      	movs	r1, #10
 800132c:	2000      	movs	r0, #0
 800132e:	f7ff fc69 	bl	8000c04 <LCD_ShowString>
	LCD_ShowString(20,10,"Basic information",WHITE,BLACK,24,0);
 8001332:	2300      	movs	r3, #0
 8001334:	9302      	str	r3, [sp, #8]
 8001336:	2318      	movs	r3, #24
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	2300      	movs	r3, #0
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001342:	4aab      	ldr	r2, [pc, #684]	; (80015f0 <LCD_BasicInformation+0x2f0>)
 8001344:	210a      	movs	r1, #10
 8001346:	2014      	movs	r0, #20
 8001348:	f7ff fc5c 	bl	8000c04 <LCD_ShowString>

	if(*page_1!=page){LCD_ShowString(0,40,"                     ",WHITE,BLACK,24,0);}//清行代码
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	68fa      	ldr	r2, [r7, #12]
 8001352:	429a      	cmp	r2, r3
 8001354:	d00c      	beq.n	8001370 <LCD_BasicInformation+0x70>
 8001356:	2300      	movs	r3, #0
 8001358:	9302      	str	r3, [sp, #8]
 800135a:	2318      	movs	r3, #24
 800135c:	9301      	str	r3, [sp, #4]
 800135e:	2300      	movs	r3, #0
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001366:	4aa1      	ldr	r2, [pc, #644]	; (80015ec <LCD_BasicInformation+0x2ec>)
 8001368:	2128      	movs	r1, #40	; 0x28
 800136a:	2000      	movs	r0, #0
 800136c:	f7ff fc4a 	bl	8000c04 <LCD_ShowString>
	if(mode==1)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d10c      	bne.n	8001390 <LCD_BasicInformation+0x90>
		{
			LCD_ShowString(57,40,"Mode:Manual",YELLOW,BLACK,24,0);
 8001376:	2300      	movs	r3, #0
 8001378:	9302      	str	r3, [sp, #8]
 800137a:	2318      	movs	r3, #24
 800137c:	9301      	str	r3, [sp, #4]
 800137e:	2300      	movs	r3, #0
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001386:	4a9b      	ldr	r2, [pc, #620]	; (80015f4 <LCD_BasicInformation+0x2f4>)
 8001388:	2128      	movs	r1, #40	; 0x28
 800138a:	2039      	movs	r0, #57	; 0x39
 800138c:	f7ff fc3a 	bl	8000c04 <LCD_ShowString>
		}

		if(mode==2)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	2b02      	cmp	r3, #2
 8001394:	d10c      	bne.n	80013b0 <LCD_BasicInformation+0xb0>
		{
			LCD_ShowString(42,40,"Mode:Automatic",YELLOW,BLACK,24,0);
 8001396:	2300      	movs	r3, #0
 8001398:	9302      	str	r3, [sp, #8]
 800139a:	2318      	movs	r3, #24
 800139c:	9301      	str	r3, [sp, #4]
 800139e:	2300      	movs	r3, #0
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80013a6:	4a94      	ldr	r2, [pc, #592]	; (80015f8 <LCD_BasicInformation+0x2f8>)
 80013a8:	2128      	movs	r1, #40	; 0x28
 80013aa:	202a      	movs	r0, #42	; 0x2a
 80013ac:	f7ff fc2a 	bl	8000c04 <LCD_ShowString>
		}

	if(*page_1!=page){LCD_ShowString(0,90,"                     ",WHITE,BLACK,24,0);}//清行代码
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	68fa      	ldr	r2, [r7, #12]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d00c      	beq.n	80013d4 <LCD_BasicInformation+0xd4>
 80013ba:	2300      	movs	r3, #0
 80013bc:	9302      	str	r3, [sp, #8]
 80013be:	2318      	movs	r3, #24
 80013c0:	9301      	str	r3, [sp, #4]
 80013c2:	2300      	movs	r3, #0
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013ca:	4a88      	ldr	r2, [pc, #544]	; (80015ec <LCD_BasicInformation+0x2ec>)
 80013cc:	215a      	movs	r1, #90	; 0x5a
 80013ce:	2000      	movs	r0, #0
 80013d0:	f7ff fc18 	bl	8000c04 <LCD_ShowString>
	LCD_ShowString(20,90,"Battery-power:",WHITE,BLACK,24,0);
 80013d4:	2300      	movs	r3, #0
 80013d6:	9302      	str	r3, [sp, #8]
 80013d8:	2318      	movs	r3, #24
 80013da:	9301      	str	r3, [sp, #4]
 80013dc:	2300      	movs	r3, #0
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013e4:	4a85      	ldr	r2, [pc, #532]	; (80015fc <LCD_BasicInformation+0x2fc>)
 80013e6:	215a      	movs	r1, #90	; 0x5a
 80013e8:	2014      	movs	r0, #20
 80013ea:	f7ff fc0b 	bl	8000c04 <LCD_ShowString>

	if(*page_1!=page){LCD_ShowString(0,120,"                     ",WHITE,BLACK,24,0);}//清行代码
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d00c      	beq.n	8001412 <LCD_BasicInformation+0x112>
 80013f8:	2300      	movs	r3, #0
 80013fa:	9302      	str	r3, [sp, #8]
 80013fc:	2318      	movs	r3, #24
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	2300      	movs	r3, #0
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001408:	4a78      	ldr	r2, [pc, #480]	; (80015ec <LCD_BasicInformation+0x2ec>)
 800140a:	2178      	movs	r1, #120	; 0x78
 800140c:	2000      	movs	r0, #0
 800140e:	f7ff fbf9 	bl	8000c04 <LCD_ShowString>
	LCD_ShowIntNum(40,120,date[6],3,WHITE,BLACK,24);
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	3306      	adds	r3, #6
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	b29a      	uxth	r2, r3
 800141a:	2318      	movs	r3, #24
 800141c:	9302      	str	r3, [sp, #8]
 800141e:	2300      	movs	r3, #0
 8001420:	9301      	str	r3, [sp, #4]
 8001422:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	2303      	movs	r3, #3
 800142a:	2178      	movs	r1, #120	; 0x78
 800142c:	2028      	movs	r0, #40	; 0x28
 800142e:	f7ff fc33 	bl	8000c98 <LCD_ShowIntNum>
	LCD_ShowString(80,120,"percentage",WHITE,BLACK,24,0);
 8001432:	2300      	movs	r3, #0
 8001434:	9302      	str	r3, [sp, #8]
 8001436:	2318      	movs	r3, #24
 8001438:	9301      	str	r3, [sp, #4]
 800143a:	2300      	movs	r3, #0
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001442:	4a6f      	ldr	r2, [pc, #444]	; (8001600 <LCD_BasicInformation+0x300>)
 8001444:	2178      	movs	r1, #120	; 0x78
 8001446:	2050      	movs	r0, #80	; 0x50
 8001448:	f7ff fbdc 	bl	8000c04 <LCD_ShowString>

	if(*page_1!=page){LCD_ShowString(0,150,"                     ",WHITE,BLACK,24,0);}//清行代码
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	429a      	cmp	r2, r3
 8001454:	d00c      	beq.n	8001470 <LCD_BasicInformation+0x170>
 8001456:	2300      	movs	r3, #0
 8001458:	9302      	str	r3, [sp, #8]
 800145a:	2318      	movs	r3, #24
 800145c:	9301      	str	r3, [sp, #4]
 800145e:	2300      	movs	r3, #0
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001466:	4a61      	ldr	r2, [pc, #388]	; (80015ec <LCD_BasicInformation+0x2ec>)
 8001468:	2196      	movs	r1, #150	; 0x96
 800146a:	2000      	movs	r0, #0
 800146c:	f7ff fbca 	bl	8000c04 <LCD_ShowString>
	LCD_ShowString(20,150,"The speed of car:",WHITE,BLACK,24,0);
 8001470:	2300      	movs	r3, #0
 8001472:	9302      	str	r3, [sp, #8]
 8001474:	2318      	movs	r3, #24
 8001476:	9301      	str	r3, [sp, #4]
 8001478:	2300      	movs	r3, #0
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001480:	4a60      	ldr	r2, [pc, #384]	; (8001604 <LCD_BasicInformation+0x304>)
 8001482:	2196      	movs	r1, #150	; 0x96
 8001484:	2014      	movs	r0, #20
 8001486:	f7ff fbbd 	bl	8000c04 <LCD_ShowString>

	if(*page_1!=page){LCD_ShowString(0,180,"                     ",WHITE,BLACK,24,0);}//清行代码
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	429a      	cmp	r2, r3
 8001492:	d00c      	beq.n	80014ae <LCD_BasicInformation+0x1ae>
 8001494:	2300      	movs	r3, #0
 8001496:	9302      	str	r3, [sp, #8]
 8001498:	2318      	movs	r3, #24
 800149a:	9301      	str	r3, [sp, #4]
 800149c:	2300      	movs	r3, #0
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014a4:	4a51      	ldr	r2, [pc, #324]	; (80015ec <LCD_BasicInformation+0x2ec>)
 80014a6:	21b4      	movs	r1, #180	; 0xb4
 80014a8:	2000      	movs	r0, #0
 80014aa:	f7ff fbab 	bl	8000c04 <LCD_ShowString>
	LCD_ShowIntNum(40,180,date[7],3,WHITE,BLACK,24);
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	3307      	adds	r3, #7
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	2318      	movs	r3, #24
 80014b8:	9302      	str	r3, [sp, #8]
 80014ba:	2300      	movs	r3, #0
 80014bc:	9301      	str	r3, [sp, #4]
 80014be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	2303      	movs	r3, #3
 80014c6:	21b4      	movs	r1, #180	; 0xb4
 80014c8:	2028      	movs	r0, #40	; 0x28
 80014ca:	f7ff fbe5 	bl	8000c98 <LCD_ShowIntNum>
	LCD_ShowString(80,180,"cm/s",WHITE,BLACK,24,0);
 80014ce:	2300      	movs	r3, #0
 80014d0:	9302      	str	r3, [sp, #8]
 80014d2:	2318      	movs	r3, #24
 80014d4:	9301      	str	r3, [sp, #4]
 80014d6:	2300      	movs	r3, #0
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014de:	4a4a      	ldr	r2, [pc, #296]	; (8001608 <LCD_BasicInformation+0x308>)
 80014e0:	21b4      	movs	r1, #180	; 0xb4
 80014e2:	2050      	movs	r0, #80	; 0x50
 80014e4:	f7ff fb8e 	bl	8000c04 <LCD_ShowString>

	if(*page_1!=page){LCD_ShowString(0,210,"                     ",WHITE,BLACK,24,0);}//清行代码
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d00c      	beq.n	800150c <LCD_BasicInformation+0x20c>
 80014f2:	2300      	movs	r3, #0
 80014f4:	9302      	str	r3, [sp, #8]
 80014f6:	2318      	movs	r3, #24
 80014f8:	9301      	str	r3, [sp, #4]
 80014fa:	2300      	movs	r3, #0
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001502:	4a3a      	ldr	r2, [pc, #232]	; (80015ec <LCD_BasicInformation+0x2ec>)
 8001504:	21d2      	movs	r1, #210	; 0xd2
 8001506:	2000      	movs	r0, #0
 8001508:	f7ff fb7c 	bl	8000c04 <LCD_ShowString>
	LCD_ShowString(20,210,"The angle of car:",WHITE,BLACK,24,0);
 800150c:	2300      	movs	r3, #0
 800150e:	9302      	str	r3, [sp, #8]
 8001510:	2318      	movs	r3, #24
 8001512:	9301      	str	r3, [sp, #4]
 8001514:	2300      	movs	r3, #0
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800151c:	4a3b      	ldr	r2, [pc, #236]	; (800160c <LCD_BasicInformation+0x30c>)
 800151e:	21d2      	movs	r1, #210	; 0xd2
 8001520:	2014      	movs	r0, #20
 8001522:	f7ff fb6f 	bl	8000c04 <LCD_ShowString>

	if(*page_1!=page){LCD_ShowString(0,240,"                     ",WHITE,BLACK,24,0);}//清行代码
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	429a      	cmp	r2, r3
 800152e:	d00c      	beq.n	800154a <LCD_BasicInformation+0x24a>
 8001530:	2300      	movs	r3, #0
 8001532:	9302      	str	r3, [sp, #8]
 8001534:	2318      	movs	r3, #24
 8001536:	9301      	str	r3, [sp, #4]
 8001538:	2300      	movs	r3, #0
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001540:	4a2a      	ldr	r2, [pc, #168]	; (80015ec <LCD_BasicInformation+0x2ec>)
 8001542:	21f0      	movs	r1, #240	; 0xf0
 8001544:	2000      	movs	r0, #0
 8001546:	f7ff fb5d 	bl	8000c04 <LCD_ShowString>
	LCD_ShowIntNum(40,240,date[8],4,WHITE,BLACK,24);
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	3308      	adds	r3, #8
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	b29a      	uxth	r2, r3
 8001552:	2318      	movs	r3, #24
 8001554:	9302      	str	r3, [sp, #8]
 8001556:	2300      	movs	r3, #0
 8001558:	9301      	str	r3, [sp, #4]
 800155a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800155e:	9300      	str	r3, [sp, #0]
 8001560:	2304      	movs	r3, #4
 8001562:	21f0      	movs	r1, #240	; 0xf0
 8001564:	2028      	movs	r0, #40	; 0x28
 8001566:	f7ff fb97 	bl	8000c98 <LCD_ShowIntNum>
	LCD_ShowChinese24x24(100,240,"°",WHITE,BLACK,24,0);
 800156a:	2300      	movs	r3, #0
 800156c:	9302      	str	r3, [sp, #8]
 800156e:	2318      	movs	r3, #24
 8001570:	9301      	str	r3, [sp, #4]
 8001572:	2300      	movs	r3, #0
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800157a:	4a25      	ldr	r2, [pc, #148]	; (8001610 <LCD_BasicInformation+0x310>)
 800157c:	21f0      	movs	r1, #240	; 0xf0
 800157e:	2064      	movs	r0, #100	; 0x64
 8001580:	f7ff f98c 	bl	800089c <LCD_ShowChinese24x24>

	if(line==1){LCD_ShowString(10,280,"Forward",WHITE,DARKBLUE ,24,0);}
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d10f      	bne.n	80015aa <LCD_BasicInformation+0x2aa>
 800158a:	2300      	movs	r3, #0
 800158c:	9302      	str	r3, [sp, #8]
 800158e:	2318      	movs	r3, #24
 8001590:	9301      	str	r3, [sp, #4]
 8001592:	f240 13cf 	movw	r3, #463	; 0x1cf
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800159c:	4a1d      	ldr	r2, [pc, #116]	; (8001614 <LCD_BasicInformation+0x314>)
 800159e:	f44f 718c 	mov.w	r1, #280	; 0x118
 80015a2:	200a      	movs	r0, #10
 80015a4:	f7ff fb2e 	bl	8000c04 <LCD_ShowString>
 80015a8:	e00d      	b.n	80015c6 <LCD_BasicInformation+0x2c6>
	else{LCD_ShowString(10,280,"Forward",WHITE,BLACK,24,0);}
 80015aa:	2300      	movs	r3, #0
 80015ac:	9302      	str	r3, [sp, #8]
 80015ae:	2318      	movs	r3, #24
 80015b0:	9301      	str	r3, [sp, #4]
 80015b2:	2300      	movs	r3, #0
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015ba:	4a16      	ldr	r2, [pc, #88]	; (8001614 <LCD_BasicInformation+0x314>)
 80015bc:	f44f 718c 	mov.w	r1, #280	; 0x118
 80015c0:	200a      	movs	r0, #10
 80015c2:	f7ff fb1f 	bl	8000c04 <LCD_ShowString>

	if(line==2){LCD_ShowString(135,280,"Backward",WHITE,DARKBLUE ,24,0);}
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d127      	bne.n	800161c <LCD_BasicInformation+0x31c>
 80015cc:	2300      	movs	r3, #0
 80015ce:	9302      	str	r3, [sp, #8]
 80015d0:	2318      	movs	r3, #24
 80015d2:	9301      	str	r3, [sp, #4]
 80015d4:	f240 13cf 	movw	r3, #463	; 0x1cf
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015de:	4a0e      	ldr	r2, [pc, #56]	; (8001618 <LCD_BasicInformation+0x318>)
 80015e0:	f44f 718c 	mov.w	r1, #280	; 0x118
 80015e4:	2087      	movs	r0, #135	; 0x87
 80015e6:	f7ff fb0d 	bl	8000c04 <LCD_ShowString>
 80015ea:	e025      	b.n	8001638 <LCD_BasicInformation+0x338>
 80015ec:	080059a0 	.word	0x080059a0
 80015f0:	080059f8 	.word	0x080059f8
 80015f4:	080059c4 	.word	0x080059c4
 80015f8:	080059d0 	.word	0x080059d0
 80015fc:	08005a48 	.word	0x08005a48
 8001600:	08005a58 	.word	0x08005a58
 8001604:	08005a64 	.word	0x08005a64
 8001608:	08005a78 	.word	0x08005a78
 800160c:	08005a80 	.word	0x08005a80
 8001610:	08005a94 	.word	0x08005a94
 8001614:	08005a34 	.word	0x08005a34
 8001618:	08005a3c 	.word	0x08005a3c
	else{LCD_ShowString(135,280,"Backward",WHITE,BLACK,24,0);}
 800161c:	2300      	movs	r3, #0
 800161e:	9302      	str	r3, [sp, #8]
 8001620:	2318      	movs	r3, #24
 8001622:	9301      	str	r3, [sp, #4]
 8001624:	2300      	movs	r3, #0
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800162c:	4a06      	ldr	r2, [pc, #24]	; (8001648 <LCD_BasicInformation+0x348>)
 800162e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001632:	2087      	movs	r0, #135	; 0x87
 8001634:	f7ff fae6 	bl	8000c04 <LCD_ShowString>

    *page_1=page;
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	601a      	str	r2, [r3, #0]
}
 800163e:	bf00      	nop
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	08005a3c 	.word	0x08005a3c

0800164c <LCD_TheSenor>:


void LCD_TheSenor (int page,int *page_1,int line,int mode,unsigned char *date)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af04      	add	r7, sp, #16
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
 8001658:	603b      	str	r3, [r7, #0]

			if(*page_1!=page){LCD_ShowString(0,10,"                     ",WHITE,BLACK,24,0);}//清行代码
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	429a      	cmp	r2, r3
 8001662:	d00c      	beq.n	800167e <LCD_TheSenor+0x32>
 8001664:	2300      	movs	r3, #0
 8001666:	9302      	str	r3, [sp, #8]
 8001668:	2318      	movs	r3, #24
 800166a:	9301      	str	r3, [sp, #4]
 800166c:	2300      	movs	r3, #0
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001674:	4aa1      	ldr	r2, [pc, #644]	; (80018fc <LCD_TheSenor+0x2b0>)
 8001676:	210a      	movs	r1, #10
 8001678:	2000      	movs	r0, #0
 800167a:	f7ff fac3 	bl	8000c04 <LCD_ShowString>
			LCD_ShowString(70,10,"The senor",WHITE,BLACK,24,0);
 800167e:	2300      	movs	r3, #0
 8001680:	9302      	str	r3, [sp, #8]
 8001682:	2318      	movs	r3, #24
 8001684:	9301      	str	r3, [sp, #4]
 8001686:	2300      	movs	r3, #0
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800168e:	4a9c      	ldr	r2, [pc, #624]	; (8001900 <LCD_TheSenor+0x2b4>)
 8001690:	210a      	movs	r1, #10
 8001692:	2046      	movs	r0, #70	; 0x46
 8001694:	f7ff fab6 	bl	8000c04 <LCD_ShowString>

			if(*page_1!=page){LCD_ShowString(0,40,"                     ",WHITE,BLACK,24,0);}//清行代码
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68fa      	ldr	r2, [r7, #12]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d00c      	beq.n	80016bc <LCD_TheSenor+0x70>
 80016a2:	2300      	movs	r3, #0
 80016a4:	9302      	str	r3, [sp, #8]
 80016a6:	2318      	movs	r3, #24
 80016a8:	9301      	str	r3, [sp, #4]
 80016aa:	2300      	movs	r3, #0
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016b2:	4a92      	ldr	r2, [pc, #584]	; (80018fc <LCD_TheSenor+0x2b0>)
 80016b4:	2128      	movs	r1, #40	; 0x28
 80016b6:	2000      	movs	r0, #0
 80016b8:	f7ff faa4 	bl	8000c04 <LCD_ShowString>
			if(mode==1)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d10c      	bne.n	80016dc <LCD_TheSenor+0x90>
				{
					LCD_ShowString(57,40,"Mode:Manual",YELLOW,BLACK,24,0);
 80016c2:	2300      	movs	r3, #0
 80016c4:	9302      	str	r3, [sp, #8]
 80016c6:	2318      	movs	r3, #24
 80016c8:	9301      	str	r3, [sp, #4]
 80016ca:	2300      	movs	r3, #0
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80016d2:	4a8c      	ldr	r2, [pc, #560]	; (8001904 <LCD_TheSenor+0x2b8>)
 80016d4:	2128      	movs	r1, #40	; 0x28
 80016d6:	2039      	movs	r0, #57	; 0x39
 80016d8:	f7ff fa94 	bl	8000c04 <LCD_ShowString>
				}

				if(mode==2)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d10c      	bne.n	80016fc <LCD_TheSenor+0xb0>
				{
					LCD_ShowString(42,40,"Mode:Automatic",YELLOW,BLACK,24,0);
 80016e2:	2300      	movs	r3, #0
 80016e4:	9302      	str	r3, [sp, #8]
 80016e6:	2318      	movs	r3, #24
 80016e8:	9301      	str	r3, [sp, #4]
 80016ea:	2300      	movs	r3, #0
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80016f2:	4a85      	ldr	r2, [pc, #532]	; (8001908 <LCD_TheSenor+0x2bc>)
 80016f4:	2128      	movs	r1, #40	; 0x28
 80016f6:	202a      	movs	r0, #42	; 0x2a
 80016f8:	f7ff fa84 	bl	8000c04 <LCD_ShowString>
				}

			if(*page_1!=page){LCD_ShowString(0,90,"                     ",WHITE,BLACK,24,0);}//清行代码
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	429a      	cmp	r2, r3
 8001704:	d00c      	beq.n	8001720 <LCD_TheSenor+0xd4>
 8001706:	2300      	movs	r3, #0
 8001708:	9302      	str	r3, [sp, #8]
 800170a:	2318      	movs	r3, #24
 800170c:	9301      	str	r3, [sp, #4]
 800170e:	2300      	movs	r3, #0
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001716:	4a79      	ldr	r2, [pc, #484]	; (80018fc <LCD_TheSenor+0x2b0>)
 8001718:	215a      	movs	r1, #90	; 0x5a
 800171a:	2000      	movs	r0, #0
 800171c:	f7ff fa72 	bl	8000c04 <LCD_ShowString>
			if (date[0]==0){LCD_ShowString(20,90,"Flame front:nomal",WHITE,BLACK,24,0);}
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d10d      	bne.n	8001744 <LCD_TheSenor+0xf8>
 8001728:	2300      	movs	r3, #0
 800172a:	9302      	str	r3, [sp, #8]
 800172c:	2318      	movs	r3, #24
 800172e:	9301      	str	r3, [sp, #4]
 8001730:	2300      	movs	r3, #0
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001738:	4a74      	ldr	r2, [pc, #464]	; (800190c <LCD_TheSenor+0x2c0>)
 800173a:	215a      	movs	r1, #90	; 0x5a
 800173c:	2014      	movs	r0, #20
 800173e:	f7ff fa61 	bl	8000c04 <LCD_ShowString>
 8001742:	e010      	b.n	8001766 <LCD_TheSenor+0x11a>
			else if(date[0]==1){LCD_ShowString(10,90,"Flame front:abnomal",RED,BLACK,24,0);}
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d10c      	bne.n	8001766 <LCD_TheSenor+0x11a>
 800174c:	2300      	movs	r3, #0
 800174e:	9302      	str	r3, [sp, #8]
 8001750:	2318      	movs	r3, #24
 8001752:	9301      	str	r3, [sp, #4]
 8001754:	2300      	movs	r3, #0
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800175c:	4a6c      	ldr	r2, [pc, #432]	; (8001910 <LCD_TheSenor+0x2c4>)
 800175e:	215a      	movs	r1, #90	; 0x5a
 8001760:	200a      	movs	r0, #10
 8001762:	f7ff fa4f 	bl	8000c04 <LCD_ShowString>

			if(*page_1!=page){	LCD_ShowString(0,120,"                     ",WHITE,BLACK,24,0);}//清行代码
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	429a      	cmp	r2, r3
 800176e:	d00c      	beq.n	800178a <LCD_TheSenor+0x13e>
 8001770:	2300      	movs	r3, #0
 8001772:	9302      	str	r3, [sp, #8]
 8001774:	2318      	movs	r3, #24
 8001776:	9301      	str	r3, [sp, #4]
 8001778:	2300      	movs	r3, #0
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001780:	4a5e      	ldr	r2, [pc, #376]	; (80018fc <LCD_TheSenor+0x2b0>)
 8001782:	2178      	movs	r1, #120	; 0x78
 8001784:	2000      	movs	r0, #0
 8001786:	f7ff fa3d 	bl	8000c04 <LCD_ShowString>
			if (date[1]==0){LCD_ShowString(20,120,"Flame right:nomal",WHITE,BLACK,24,0);}
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	3301      	adds	r3, #1
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d10d      	bne.n	80017b0 <LCD_TheSenor+0x164>
 8001794:	2300      	movs	r3, #0
 8001796:	9302      	str	r3, [sp, #8]
 8001798:	2318      	movs	r3, #24
 800179a:	9301      	str	r3, [sp, #4]
 800179c:	2300      	movs	r3, #0
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017a4:	4a5b      	ldr	r2, [pc, #364]	; (8001914 <LCD_TheSenor+0x2c8>)
 80017a6:	2178      	movs	r1, #120	; 0x78
 80017a8:	2014      	movs	r0, #20
 80017aa:	f7ff fa2b 	bl	8000c04 <LCD_ShowString>
 80017ae:	e011      	b.n	80017d4 <LCD_TheSenor+0x188>
			else if(date[1]==1){LCD_ShowString(10,120,"Flame right:abnomal",RED,BLACK,24,0);}
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	3301      	adds	r3, #1
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d10c      	bne.n	80017d4 <LCD_TheSenor+0x188>
 80017ba:	2300      	movs	r3, #0
 80017bc:	9302      	str	r3, [sp, #8]
 80017be:	2318      	movs	r3, #24
 80017c0:	9301      	str	r3, [sp, #4]
 80017c2:	2300      	movs	r3, #0
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80017ca:	4a53      	ldr	r2, [pc, #332]	; (8001918 <LCD_TheSenor+0x2cc>)
 80017cc:	2178      	movs	r1, #120	; 0x78
 80017ce:	200a      	movs	r0, #10
 80017d0:	f7ff fa18 	bl	8000c04 <LCD_ShowString>

			if(*page_1!=page){LCD_ShowString(0,150,"                     ",WHITE,BLACK,24,0);}//清行代码
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d00c      	beq.n	80017f8 <LCD_TheSenor+0x1ac>
 80017de:	2300      	movs	r3, #0
 80017e0:	9302      	str	r3, [sp, #8]
 80017e2:	2318      	movs	r3, #24
 80017e4:	9301      	str	r3, [sp, #4]
 80017e6:	2300      	movs	r3, #0
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017ee:	4a43      	ldr	r2, [pc, #268]	; (80018fc <LCD_TheSenor+0x2b0>)
 80017f0:	2196      	movs	r1, #150	; 0x96
 80017f2:	2000      	movs	r0, #0
 80017f4:	f7ff fa06 	bl	8000c04 <LCD_ShowString>
			if (date[2]==0){LCD_ShowString(28,150,"Flame left:nomal",WHITE,BLACK,24,0);}
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	3302      	adds	r3, #2
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10d      	bne.n	800181e <LCD_TheSenor+0x1d2>
 8001802:	2300      	movs	r3, #0
 8001804:	9302      	str	r3, [sp, #8]
 8001806:	2318      	movs	r3, #24
 8001808:	9301      	str	r3, [sp, #4]
 800180a:	2300      	movs	r3, #0
 800180c:	9300      	str	r3, [sp, #0]
 800180e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001812:	4a42      	ldr	r2, [pc, #264]	; (800191c <LCD_TheSenor+0x2d0>)
 8001814:	2196      	movs	r1, #150	; 0x96
 8001816:	201c      	movs	r0, #28
 8001818:	f7ff f9f4 	bl	8000c04 <LCD_ShowString>
 800181c:	e011      	b.n	8001842 <LCD_TheSenor+0x1f6>
			else if(date[2]==1){LCD_ShowString(20,150,"Flame lef:abnomal",RED,BLACK,24,0);}
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	3302      	adds	r3, #2
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d10c      	bne.n	8001842 <LCD_TheSenor+0x1f6>
 8001828:	2300      	movs	r3, #0
 800182a:	9302      	str	r3, [sp, #8]
 800182c:	2318      	movs	r3, #24
 800182e:	9301      	str	r3, [sp, #4]
 8001830:	2300      	movs	r3, #0
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001838:	4a39      	ldr	r2, [pc, #228]	; (8001920 <LCD_TheSenor+0x2d4>)
 800183a:	2196      	movs	r1, #150	; 0x96
 800183c:	2014      	movs	r0, #20
 800183e:	f7ff f9e1 	bl	8000c04 <LCD_ShowString>

			if(*page_1!=page){LCD_ShowString(0,180,"                     ",WHITE,BLACK,24,0);}//清行代码
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	429a      	cmp	r2, r3
 800184a:	d00c      	beq.n	8001866 <LCD_TheSenor+0x21a>
 800184c:	2300      	movs	r3, #0
 800184e:	9302      	str	r3, [sp, #8]
 8001850:	2318      	movs	r3, #24
 8001852:	9301      	str	r3, [sp, #4]
 8001854:	2300      	movs	r3, #0
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800185c:	4a27      	ldr	r2, [pc, #156]	; (80018fc <LCD_TheSenor+0x2b0>)
 800185e:	21b4      	movs	r1, #180	; 0xb4
 8001860:	2000      	movs	r0, #0
 8001862:	f7ff f9cf 	bl	8000c04 <LCD_ShowString>
			if (date[3]==0){LCD_ShowString(55,180,"People:nomal",WHITE,BLACK,24,0);}
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	3303      	adds	r3, #3
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d10d      	bne.n	800188c <LCD_TheSenor+0x240>
 8001870:	2300      	movs	r3, #0
 8001872:	9302      	str	r3, [sp, #8]
 8001874:	2318      	movs	r3, #24
 8001876:	9301      	str	r3, [sp, #4]
 8001878:	2300      	movs	r3, #0
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001880:	4a28      	ldr	r2, [pc, #160]	; (8001924 <LCD_TheSenor+0x2d8>)
 8001882:	21b4      	movs	r1, #180	; 0xb4
 8001884:	2037      	movs	r0, #55	; 0x37
 8001886:	f7ff f9bd 	bl	8000c04 <LCD_ShowString>
 800188a:	e011      	b.n	80018b0 <LCD_TheSenor+0x264>
			else if(date[3]==1){LCD_ShowString(40,180,"People:abnomal",RED,BLACK,24,0);}
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	3303      	adds	r3, #3
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d10c      	bne.n	80018b0 <LCD_TheSenor+0x264>
 8001896:	2300      	movs	r3, #0
 8001898:	9302      	str	r3, [sp, #8]
 800189a:	2318      	movs	r3, #24
 800189c:	9301      	str	r3, [sp, #4]
 800189e:	2300      	movs	r3, #0
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80018a6:	4a20      	ldr	r2, [pc, #128]	; (8001928 <LCD_TheSenor+0x2dc>)
 80018a8:	21b4      	movs	r1, #180	; 0xb4
 80018aa:	2028      	movs	r0, #40	; 0x28
 80018ac:	f7ff f9aa 	bl	8000c04 <LCD_ShowString>

			if(*page_1!=page){LCD_ShowString(0,210,"                     ",WHITE,BLACK,24,0);}//清行代码
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	68fa      	ldr	r2, [r7, #12]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d00c      	beq.n	80018d4 <LCD_TheSenor+0x288>
 80018ba:	2300      	movs	r3, #0
 80018bc:	9302      	str	r3, [sp, #8]
 80018be:	2318      	movs	r3, #24
 80018c0:	9301      	str	r3, [sp, #4]
 80018c2:	2300      	movs	r3, #0
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018ca:	4a0c      	ldr	r2, [pc, #48]	; (80018fc <LCD_TheSenor+0x2b0>)
 80018cc:	21d2      	movs	r1, #210	; 0xd2
 80018ce:	2000      	movs	r0, #0
 80018d0:	f7ff f998 	bl	8000c04 <LCD_ShowString>
			if (date[4]==0){LCD_ShowString(60,210,"Smoke:nomal",WHITE,BLACK,24,0);}
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	3304      	adds	r3, #4
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d128      	bne.n	8001930 <LCD_TheSenor+0x2e4>
 80018de:	2300      	movs	r3, #0
 80018e0:	9302      	str	r3, [sp, #8]
 80018e2:	2318      	movs	r3, #24
 80018e4:	9301      	str	r3, [sp, #4]
 80018e6:	2300      	movs	r3, #0
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018ee:	4a0f      	ldr	r2, [pc, #60]	; (800192c <LCD_TheSenor+0x2e0>)
 80018f0:	21d2      	movs	r1, #210	; 0xd2
 80018f2:	203c      	movs	r0, #60	; 0x3c
 80018f4:	f7ff f986 	bl	8000c04 <LCD_ShowString>
 80018f8:	e02c      	b.n	8001954 <LCD_TheSenor+0x308>
 80018fa:	bf00      	nop
 80018fc:	080059a0 	.word	0x080059a0
 8001900:	08005a0c 	.word	0x08005a0c
 8001904:	080059c4 	.word	0x080059c4
 8001908:	080059d0 	.word	0x080059d0
 800190c:	08005a98 	.word	0x08005a98
 8001910:	08005aac 	.word	0x08005aac
 8001914:	08005ac0 	.word	0x08005ac0
 8001918:	08005ad4 	.word	0x08005ad4
 800191c:	08005ae8 	.word	0x08005ae8
 8001920:	08005afc 	.word	0x08005afc
 8001924:	08005b10 	.word	0x08005b10
 8001928:	08005b20 	.word	0x08005b20
 800192c:	08005b30 	.word	0x08005b30
			else if(date[4]==1){LCD_ShowString(45,210,"Smoke:abnomal",RED,BLACK,24,0);}
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	3304      	adds	r3, #4
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d10c      	bne.n	8001954 <LCD_TheSenor+0x308>
 800193a:	2300      	movs	r3, #0
 800193c:	9302      	str	r3, [sp, #8]
 800193e:	2318      	movs	r3, #24
 8001940:	9301      	str	r3, [sp, #4]
 8001942:	2300      	movs	r3, #0
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800194a:	4a4a      	ldr	r2, [pc, #296]	; (8001a74 <LCD_TheSenor+0x428>)
 800194c:	21d2      	movs	r1, #210	; 0xd2
 800194e:	202d      	movs	r0, #45	; 0x2d
 8001950:	f7ff f958 	bl	8000c04 <LCD_ShowString>

			if(*page_1!=page){LCD_ShowString(0,240,"                     ",WHITE,BLACK,24,0);}//清行代码
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	429a      	cmp	r2, r3
 800195c:	d00c      	beq.n	8001978 <LCD_TheSenor+0x32c>
 800195e:	2300      	movs	r3, #0
 8001960:	9302      	str	r3, [sp, #8]
 8001962:	2318      	movs	r3, #24
 8001964:	9301      	str	r3, [sp, #4]
 8001966:	2300      	movs	r3, #0
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800196e:	4a42      	ldr	r2, [pc, #264]	; (8001a78 <LCD_TheSenor+0x42c>)
 8001970:	21f0      	movs	r1, #240	; 0xf0
 8001972:	2000      	movs	r0, #0
 8001974:	f7ff f946 	bl	8000c04 <LCD_ShowString>
			if (date[5]<=20||date[6]<=20||date[7]<=20||date[8]<=20){LCD_ShowString(20,240,"Ultrasonic:nomal",WHITE,BLACK,24,0);}
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	3305      	adds	r3, #5
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b14      	cmp	r3, #20
 8001980:	d90e      	bls.n	80019a0 <LCD_TheSenor+0x354>
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	3306      	adds	r3, #6
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b14      	cmp	r3, #20
 800198a:	d909      	bls.n	80019a0 <LCD_TheSenor+0x354>
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	3307      	adds	r3, #7
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b14      	cmp	r3, #20
 8001994:	d904      	bls.n	80019a0 <LCD_TheSenor+0x354>
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	3308      	adds	r3, #8
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b14      	cmp	r3, #20
 800199e:	d80d      	bhi.n	80019bc <LCD_TheSenor+0x370>
 80019a0:	2300      	movs	r3, #0
 80019a2:	9302      	str	r3, [sp, #8]
 80019a4:	2318      	movs	r3, #24
 80019a6:	9301      	str	r3, [sp, #4]
 80019a8:	2300      	movs	r3, #0
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019b0:	4a32      	ldr	r2, [pc, #200]	; (8001a7c <LCD_TheSenor+0x430>)
 80019b2:	21f0      	movs	r1, #240	; 0xf0
 80019b4:	2014      	movs	r0, #20
 80019b6:	f7ff f925 	bl	8000c04 <LCD_ShowString>
 80019ba:	e011      	b.n	80019e0 <LCD_TheSenor+0x394>
			else if(date[5]==1){LCD_ShowString(10,240,"Ultrasonic:abnomal",RED,BLACK,24,0);}
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	3305      	adds	r3, #5
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d10c      	bne.n	80019e0 <LCD_TheSenor+0x394>
 80019c6:	2300      	movs	r3, #0
 80019c8:	9302      	str	r3, [sp, #8]
 80019ca:	2318      	movs	r3, #24
 80019cc:	9301      	str	r3, [sp, #4]
 80019ce:	2300      	movs	r3, #0
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80019d6:	4a2a      	ldr	r2, [pc, #168]	; (8001a80 <LCD_TheSenor+0x434>)
 80019d8:	21f0      	movs	r1, #240	; 0xf0
 80019da:	200a      	movs	r0, #10
 80019dc:	f7ff f912 	bl	8000c04 <LCD_ShowString>

			if(line==1){LCD_ShowString(10,280,"Forward",WHITE,DARKBLUE ,24,0);}
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d10f      	bne.n	8001a06 <LCD_TheSenor+0x3ba>
 80019e6:	2300      	movs	r3, #0
 80019e8:	9302      	str	r3, [sp, #8]
 80019ea:	2318      	movs	r3, #24
 80019ec:	9301      	str	r3, [sp, #4]
 80019ee:	f240 13cf 	movw	r3, #463	; 0x1cf
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019f8:	4a22      	ldr	r2, [pc, #136]	; (8001a84 <LCD_TheSenor+0x438>)
 80019fa:	f44f 718c 	mov.w	r1, #280	; 0x118
 80019fe:	200a      	movs	r0, #10
 8001a00:	f7ff f900 	bl	8000c04 <LCD_ShowString>
 8001a04:	e00d      	b.n	8001a22 <LCD_TheSenor+0x3d6>
			else{LCD_ShowString(10,280,"Forward",WHITE,BLACK,24,0);}
 8001a06:	2300      	movs	r3, #0
 8001a08:	9302      	str	r3, [sp, #8]
 8001a0a:	2318      	movs	r3, #24
 8001a0c:	9301      	str	r3, [sp, #4]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a16:	4a1b      	ldr	r2, [pc, #108]	; (8001a84 <LCD_TheSenor+0x438>)
 8001a18:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001a1c:	200a      	movs	r0, #10
 8001a1e:	f7ff f8f1 	bl	8000c04 <LCD_ShowString>

			if(line==2){LCD_ShowString(135,280,"Backward",WHITE,DARKBLUE ,24,0);}
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d10f      	bne.n	8001a48 <LCD_TheSenor+0x3fc>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	9302      	str	r3, [sp, #8]
 8001a2c:	2318      	movs	r3, #24
 8001a2e:	9301      	str	r3, [sp, #4]
 8001a30:	f240 13cf 	movw	r3, #463	; 0x1cf
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a3a:	4a13      	ldr	r2, [pc, #76]	; (8001a88 <LCD_TheSenor+0x43c>)
 8001a3c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001a40:	2087      	movs	r0, #135	; 0x87
 8001a42:	f7ff f8df 	bl	8000c04 <LCD_ShowString>
 8001a46:	e00d      	b.n	8001a64 <LCD_TheSenor+0x418>
			else{LCD_ShowString(135,280,"Backward",WHITE,BLACK,24,0);}
 8001a48:	2300      	movs	r3, #0
 8001a4a:	9302      	str	r3, [sp, #8]
 8001a4c:	2318      	movs	r3, #24
 8001a4e:	9301      	str	r3, [sp, #4]
 8001a50:	2300      	movs	r3, #0
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a58:	4a0b      	ldr	r2, [pc, #44]	; (8001a88 <LCD_TheSenor+0x43c>)
 8001a5a:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001a5e:	2087      	movs	r0, #135	; 0x87
 8001a60:	f7ff f8d0 	bl	8000c04 <LCD_ShowString>

		   *page_1=page;
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	601a      	str	r2, [r3, #0]
}
 8001a6a:	bf00      	nop
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	08005b3c 	.word	0x08005b3c
 8001a78:	080059a0 	.word	0x080059a0
 8001a7c:	08005b4c 	.word	0x08005b4c
 8001a80:	08005b60 	.word	0x08005b60
 8001a84:	08005a34 	.word	0x08005a34
 8001a88:	08005a3c 	.word	0x08005a3c

08001a8c <LCD_UltrasonicDistance>:

void LCD_UltrasonicDistance (int page,int *page_1,int line,int mode,unsigned char *date)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b088      	sub	sp, #32
 8001a90:	af04      	add	r7, sp, #16
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
 8001a98:	603b      	str	r3, [r7, #0]

	if(*page_1==4){LCD_ShowString(0,0,"                     ",WHITE,BLACK,24,0);}//清行代码
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	d10c      	bne.n	8001abc <LCD_UltrasonicDistance+0x30>
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	9302      	str	r3, [sp, #8]
 8001aa6:	2318      	movs	r3, #24
 8001aa8:	9301      	str	r3, [sp, #4]
 8001aaa:	2300      	movs	r3, #0
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ab2:	4ab8      	ldr	r2, [pc, #736]	; (8001d94 <LCD_UltrasonicDistance+0x308>)
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	f7ff f8a4 	bl	8000c04 <LCD_ShowString>
	if(*page_1!=page){LCD_ShowString(0,10,"                     ",WHITE,BLACK,24,0);}//清行代码
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d00c      	beq.n	8001ae0 <LCD_UltrasonicDistance+0x54>
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	9302      	str	r3, [sp, #8]
 8001aca:	2318      	movs	r3, #24
 8001acc:	9301      	str	r3, [sp, #4]
 8001ace:	2300      	movs	r3, #0
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ad6:	4aaf      	ldr	r2, [pc, #700]	; (8001d94 <LCD_UltrasonicDistance+0x308>)
 8001ad8:	210a      	movs	r1, #10
 8001ada:	2000      	movs	r0, #0
 8001adc:	f7ff f892 	bl	8000c04 <LCD_ShowString>
	if(*page_1==4){LCD_ShowString(0,25,"                     ",WHITE,BLACK,24,0);}//清行代码
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b04      	cmp	r3, #4
 8001ae6:	d10c      	bne.n	8001b02 <LCD_UltrasonicDistance+0x76>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	9302      	str	r3, [sp, #8]
 8001aec:	2318      	movs	r3, #24
 8001aee:	9301      	str	r3, [sp, #4]
 8001af0:	2300      	movs	r3, #0
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001af8:	4aa6      	ldr	r2, [pc, #664]	; (8001d94 <LCD_UltrasonicDistance+0x308>)
 8001afa:	2119      	movs	r1, #25
 8001afc:	2000      	movs	r0, #0
 8001afe:	f7ff f881 	bl	8000c04 <LCD_ShowString>
	LCD_ShowString(5,10,"Ultrasonic distance",WHITE,BLACK,24,0);
 8001b02:	2300      	movs	r3, #0
 8001b04:	9302      	str	r3, [sp, #8]
 8001b06:	2318      	movs	r3, #24
 8001b08:	9301      	str	r3, [sp, #4]
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b12:	4aa1      	ldr	r2, [pc, #644]	; (8001d98 <LCD_UltrasonicDistance+0x30c>)
 8001b14:	210a      	movs	r1, #10
 8001b16:	2005      	movs	r0, #5
 8001b18:	f7ff f874 	bl	8000c04 <LCD_ShowString>

	if(*page_1!=page){	LCD_ShowString(0,40,"                     ",WHITE,BLACK,24,0);}//清行代码
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d00c      	beq.n	8001b40 <LCD_UltrasonicDistance+0xb4>
 8001b26:	2300      	movs	r3, #0
 8001b28:	9302      	str	r3, [sp, #8]
 8001b2a:	2318      	movs	r3, #24
 8001b2c:	9301      	str	r3, [sp, #4]
 8001b2e:	2300      	movs	r3, #0
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b36:	4a97      	ldr	r2, [pc, #604]	; (8001d94 <LCD_UltrasonicDistance+0x308>)
 8001b38:	2128      	movs	r1, #40	; 0x28
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f7ff f862 	bl	8000c04 <LCD_ShowString>
	if(*page_1==4){LCD_ShowString(0,50,"                     ",WHITE,BLACK,24,0);}//清行代码
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b04      	cmp	r3, #4
 8001b46:	d10c      	bne.n	8001b62 <LCD_UltrasonicDistance+0xd6>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	9302      	str	r3, [sp, #8]
 8001b4c:	2318      	movs	r3, #24
 8001b4e:	9301      	str	r3, [sp, #4]
 8001b50:	2300      	movs	r3, #0
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b58:	4a8e      	ldr	r2, [pc, #568]	; (8001d94 <LCD_UltrasonicDistance+0x308>)
 8001b5a:	2132      	movs	r1, #50	; 0x32
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f7ff f851 	bl	8000c04 <LCD_ShowString>
	if(mode==1)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d10c      	bne.n	8001b82 <LCD_UltrasonicDistance+0xf6>
		{
			LCD_ShowString(57,40,"Mode:Manual",YELLOW,BLACK,24,0);
 8001b68:	2300      	movs	r3, #0
 8001b6a:	9302      	str	r3, [sp, #8]
 8001b6c:	2318      	movs	r3, #24
 8001b6e:	9301      	str	r3, [sp, #4]
 8001b70:	2300      	movs	r3, #0
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001b78:	4a88      	ldr	r2, [pc, #544]	; (8001d9c <LCD_UltrasonicDistance+0x310>)
 8001b7a:	2128      	movs	r1, #40	; 0x28
 8001b7c:	2039      	movs	r0, #57	; 0x39
 8001b7e:	f7ff f841 	bl	8000c04 <LCD_ShowString>
		}

		if(mode==2)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d10c      	bne.n	8001ba2 <LCD_UltrasonicDistance+0x116>
		{
			LCD_ShowString(42,40,"Mode:Automatic",YELLOW,BLACK,24,0);
 8001b88:	2300      	movs	r3, #0
 8001b8a:	9302      	str	r3, [sp, #8]
 8001b8c:	2318      	movs	r3, #24
 8001b8e:	9301      	str	r3, [sp, #4]
 8001b90:	2300      	movs	r3, #0
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001b98:	4a81      	ldr	r2, [pc, #516]	; (8001da0 <LCD_UltrasonicDistance+0x314>)
 8001b9a:	2128      	movs	r1, #40	; 0x28
 8001b9c:	202a      	movs	r0, #42	; 0x2a
 8001b9e:	f7ff f831 	bl	8000c04 <LCD_ShowString>
		}

	if(*page_1==4){LCD_ShowString(0,75,"                     ",WHITE,BLACK,24,0);}//清行代码
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d10c      	bne.n	8001bc4 <LCD_UltrasonicDistance+0x138>
 8001baa:	2300      	movs	r3, #0
 8001bac:	9302      	str	r3, [sp, #8]
 8001bae:	2318      	movs	r3, #24
 8001bb0:	9301      	str	r3, [sp, #4]
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bba:	4a76      	ldr	r2, [pc, #472]	; (8001d94 <LCD_UltrasonicDistance+0x308>)
 8001bbc:	214b      	movs	r1, #75	; 0x4b
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f7ff f820 	bl	8000c04 <LCD_ShowString>
	if(*page_1!=page){LCD_ShowString(0,90,"                     ",WHITE,BLACK,24,0);}//清行代码
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d00c      	beq.n	8001be8 <LCD_UltrasonicDistance+0x15c>
 8001bce:	2300      	movs	r3, #0
 8001bd0:	9302      	str	r3, [sp, #8]
 8001bd2:	2318      	movs	r3, #24
 8001bd4:	9301      	str	r3, [sp, #4]
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bde:	4a6d      	ldr	r2, [pc, #436]	; (8001d94 <LCD_UltrasonicDistance+0x308>)
 8001be0:	215a      	movs	r1, #90	; 0x5a
 8001be2:	2000      	movs	r0, #0
 8001be4:	f7ff f80e 	bl	8000c04 <LCD_ShowString>
	if(*page_1==4){LCD_ShowString(0,100,"                     ",WHITE,BLACK,24,0);}//清行代码
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2b04      	cmp	r3, #4
 8001bee:	d10c      	bne.n	8001c0a <LCD_UltrasonicDistance+0x17e>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	9302      	str	r3, [sp, #8]
 8001bf4:	2318      	movs	r3, #24
 8001bf6:	9301      	str	r3, [sp, #4]
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c00:	4a64      	ldr	r2, [pc, #400]	; (8001d94 <LCD_UltrasonicDistance+0x308>)
 8001c02:	2164      	movs	r1, #100	; 0x64
 8001c04:	2000      	movs	r0, #0
 8001c06:	f7fe fffd 	bl	8000c04 <LCD_ShowString>
	LCD_ShowString(30,90,"Behind:",WHITE,BLACK,24,0);
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	9302      	str	r3, [sp, #8]
 8001c0e:	2318      	movs	r3, #24
 8001c10:	9301      	str	r3, [sp, #4]
 8001c12:	2300      	movs	r3, #0
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c1a:	4a62      	ldr	r2, [pc, #392]	; (8001da4 <LCD_UltrasonicDistance+0x318>)
 8001c1c:	215a      	movs	r1, #90	; 0x5a
 8001c1e:	201e      	movs	r0, #30
 8001c20:	f7fe fff0 	bl	8000c04 <LCD_ShowString>
	LCD_ShowIntNum(110,90,date[0],2,WHITE,BLACK,24);
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	2318      	movs	r3, #24
 8001c2c:	9302      	str	r3, [sp, #8]
 8001c2e:	2300      	movs	r3, #0
 8001c30:	9301      	str	r3, [sp, #4]
 8001c32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	2302      	movs	r3, #2
 8001c3a:	215a      	movs	r1, #90	; 0x5a
 8001c3c:	206e      	movs	r0, #110	; 0x6e
 8001c3e:	f7ff f82b 	bl	8000c98 <LCD_ShowIntNum>
	LCD_ShowString(140,90,"cm",WHITE,BLACK,24,0);
 8001c42:	2300      	movs	r3, #0
 8001c44:	9302      	str	r3, [sp, #8]
 8001c46:	2318      	movs	r3, #24
 8001c48:	9301      	str	r3, [sp, #4]
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c52:	4a55      	ldr	r2, [pc, #340]	; (8001da8 <LCD_UltrasonicDistance+0x31c>)
 8001c54:	215a      	movs	r1, #90	; 0x5a
 8001c56:	208c      	movs	r0, #140	; 0x8c
 8001c58:	f7fe ffd4 	bl	8000c04 <LCD_ShowString>

	if(*page_1!=page){	LCD_ShowString(0,120,"                     ",WHITE,BLACK,24,0);}//清行代码
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d00c      	beq.n	8001c80 <LCD_UltrasonicDistance+0x1f4>
 8001c66:	2300      	movs	r3, #0
 8001c68:	9302      	str	r3, [sp, #8]
 8001c6a:	2318      	movs	r3, #24
 8001c6c:	9301      	str	r3, [sp, #4]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c76:	4a47      	ldr	r2, [pc, #284]	; (8001d94 <LCD_UltrasonicDistance+0x308>)
 8001c78:	2178      	movs	r1, #120	; 0x78
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	f7fe ffc2 	bl	8000c04 <LCD_ShowString>
	if(*page_1==4){LCD_ShowString(0,125,"                     ",WHITE,BLACK,24,0);}//清行代码
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	d10c      	bne.n	8001ca2 <LCD_UltrasonicDistance+0x216>
 8001c88:	2300      	movs	r3, #0
 8001c8a:	9302      	str	r3, [sp, #8]
 8001c8c:	2318      	movs	r3, #24
 8001c8e:	9301      	str	r3, [sp, #4]
 8001c90:	2300      	movs	r3, #0
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c98:	4a3e      	ldr	r2, [pc, #248]	; (8001d94 <LCD_UltrasonicDistance+0x308>)
 8001c9a:	217d      	movs	r1, #125	; 0x7d
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	f7fe ffb1 	bl	8000c04 <LCD_ShowString>
	LCD_ShowString(30,120,"Front:",WHITE,BLACK,24,0);
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	9302      	str	r3, [sp, #8]
 8001ca6:	2318      	movs	r3, #24
 8001ca8:	9301      	str	r3, [sp, #4]
 8001caa:	2300      	movs	r3, #0
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cb2:	4a3e      	ldr	r2, [pc, #248]	; (8001dac <LCD_UltrasonicDistance+0x320>)
 8001cb4:	2178      	movs	r1, #120	; 0x78
 8001cb6:	201e      	movs	r0, #30
 8001cb8:	f7fe ffa4 	bl	8000c04 <LCD_ShowString>
	LCD_ShowIntNum(100,120,date[1],2,WHITE,BLACK,24);
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	2318      	movs	r3, #24
 8001cc6:	9302      	str	r3, [sp, #8]
 8001cc8:	2300      	movs	r3, #0
 8001cca:	9301      	str	r3, [sp, #4]
 8001ccc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	2178      	movs	r1, #120	; 0x78
 8001cd6:	2064      	movs	r0, #100	; 0x64
 8001cd8:	f7fe ffde 	bl	8000c98 <LCD_ShowIntNum>
	LCD_ShowString(130,120,"cm",WHITE,BLACK,24,0);
 8001cdc:	2300      	movs	r3, #0
 8001cde:	9302      	str	r3, [sp, #8]
 8001ce0:	2318      	movs	r3, #24
 8001ce2:	9301      	str	r3, [sp, #4]
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cec:	4a2e      	ldr	r2, [pc, #184]	; (8001da8 <LCD_UltrasonicDistance+0x31c>)
 8001cee:	2178      	movs	r1, #120	; 0x78
 8001cf0:	2082      	movs	r0, #130	; 0x82
 8001cf2:	f7fe ff87 	bl	8000c04 <LCD_ShowString>

	if(*page_1!=page){	LCD_ShowString(0,150,"                     ",WHITE,BLACK,24,0);}//清行代码
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d00c      	beq.n	8001d1a <LCD_UltrasonicDistance+0x28e>
 8001d00:	2300      	movs	r3, #0
 8001d02:	9302      	str	r3, [sp, #8]
 8001d04:	2318      	movs	r3, #24
 8001d06:	9301      	str	r3, [sp, #4]
 8001d08:	2300      	movs	r3, #0
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d10:	4a20      	ldr	r2, [pc, #128]	; (8001d94 <LCD_UltrasonicDistance+0x308>)
 8001d12:	2196      	movs	r1, #150	; 0x96
 8001d14:	2000      	movs	r0, #0
 8001d16:	f7fe ff75 	bl	8000c04 <LCD_ShowString>
	LCD_ShowString(30,150,"Right:",WHITE,BLACK,24,0);
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	9302      	str	r3, [sp, #8]
 8001d1e:	2318      	movs	r3, #24
 8001d20:	9301      	str	r3, [sp, #4]
 8001d22:	2300      	movs	r3, #0
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d2a:	4a21      	ldr	r2, [pc, #132]	; (8001db0 <LCD_UltrasonicDistance+0x324>)
 8001d2c:	2196      	movs	r1, #150	; 0x96
 8001d2e:	201e      	movs	r0, #30
 8001d30:	f7fe ff68 	bl	8000c04 <LCD_ShowString>
	LCD_ShowIntNum(100,150,date[2],2,WHITE,BLACK,24);
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	3302      	adds	r3, #2
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	2318      	movs	r3, #24
 8001d3e:	9302      	str	r3, [sp, #8]
 8001d40:	2300      	movs	r3, #0
 8001d42:	9301      	str	r3, [sp, #4]
 8001d44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	2196      	movs	r1, #150	; 0x96
 8001d4e:	2064      	movs	r0, #100	; 0x64
 8001d50:	f7fe ffa2 	bl	8000c98 <LCD_ShowIntNum>
	LCD_ShowString(130,150,"cm",WHITE,BLACK,24,0);
 8001d54:	2300      	movs	r3, #0
 8001d56:	9302      	str	r3, [sp, #8]
 8001d58:	2318      	movs	r3, #24
 8001d5a:	9301      	str	r3, [sp, #4]
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d64:	4a10      	ldr	r2, [pc, #64]	; (8001da8 <LCD_UltrasonicDistance+0x31c>)
 8001d66:	2196      	movs	r1, #150	; 0x96
 8001d68:	2082      	movs	r0, #130	; 0x82
 8001d6a:	f7fe ff4b 	bl	8000c04 <LCD_ShowString>

	if(*page_1==4){LCD_ShowString(0,175,"                     ",WHITE,BLACK,24,0);}//清行代码
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	d11e      	bne.n	8001db4 <LCD_UltrasonicDistance+0x328>
 8001d76:	2300      	movs	r3, #0
 8001d78:	9302      	str	r3, [sp, #8]
 8001d7a:	2318      	movs	r3, #24
 8001d7c:	9301      	str	r3, [sp, #4]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d86:	4a03      	ldr	r2, [pc, #12]	; (8001d94 <LCD_UltrasonicDistance+0x308>)
 8001d88:	21af      	movs	r1, #175	; 0xaf
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f7fe ff3a 	bl	8000c04 <LCD_ShowString>
 8001d90:	e010      	b.n	8001db4 <LCD_UltrasonicDistance+0x328>
 8001d92:	bf00      	nop
 8001d94:	080059a0 	.word	0x080059a0
 8001d98:	08005a18 	.word	0x08005a18
 8001d9c:	080059c4 	.word	0x080059c4
 8001da0:	080059d0 	.word	0x080059d0
 8001da4:	08005b74 	.word	0x08005b74
 8001da8:	08005b7c 	.word	0x08005b7c
 8001dac:	08005b80 	.word	0x08005b80
 8001db0:	08005b88 	.word	0x08005b88
	if(*page_1!=page){LCD_ShowString(0,180,"                     ",WHITE,BLACK,24,0);}//清行代码
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d00c      	beq.n	8001dd8 <LCD_UltrasonicDistance+0x34c>
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	9302      	str	r3, [sp, #8]
 8001dc2:	2318      	movs	r3, #24
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dce:	4a67      	ldr	r2, [pc, #412]	; (8001f6c <LCD_UltrasonicDistance+0x4e0>)
 8001dd0:	21b4      	movs	r1, #180	; 0xb4
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	f7fe ff16 	bl	8000c04 <LCD_ShowString>
	if(*page_1==4){LCD_ShowString(0,200,"                     ",WHITE,BLACK,24,0);}//清行代码
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d10c      	bne.n	8001dfa <LCD_UltrasonicDistance+0x36e>
 8001de0:	2300      	movs	r3, #0
 8001de2:	9302      	str	r3, [sp, #8]
 8001de4:	2318      	movs	r3, #24
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	2300      	movs	r3, #0
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001df0:	4a5e      	ldr	r2, [pc, #376]	; (8001f6c <LCD_UltrasonicDistance+0x4e0>)
 8001df2:	21c8      	movs	r1, #200	; 0xc8
 8001df4:	2000      	movs	r0, #0
 8001df6:	f7fe ff05 	bl	8000c04 <LCD_ShowString>
	LCD_ShowString(30,180,"Left:",WHITE,BLACK,24,0);
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	9302      	str	r3, [sp, #8]
 8001dfe:	2318      	movs	r3, #24
 8001e00:	9301      	str	r3, [sp, #4]
 8001e02:	2300      	movs	r3, #0
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e0a:	4a59      	ldr	r2, [pc, #356]	; (8001f70 <LCD_UltrasonicDistance+0x4e4>)
 8001e0c:	21b4      	movs	r1, #180	; 0xb4
 8001e0e:	201e      	movs	r0, #30
 8001e10:	f7fe fef8 	bl	8000c04 <LCD_ShowString>
	LCD_ShowIntNum(90,180,date[3],2,WHITE,BLACK,24);
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	3303      	adds	r3, #3
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	2318      	movs	r3, #24
 8001e1e:	9302      	str	r3, [sp, #8]
 8001e20:	2300      	movs	r3, #0
 8001e22:	9301      	str	r3, [sp, #4]
 8001e24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	21b4      	movs	r1, #180	; 0xb4
 8001e2e:	205a      	movs	r0, #90	; 0x5a
 8001e30:	f7fe ff32 	bl	8000c98 <LCD_ShowIntNum>
	LCD_ShowString(120,180,"cm",WHITE,BLACK,24,0);
 8001e34:	2300      	movs	r3, #0
 8001e36:	9302      	str	r3, [sp, #8]
 8001e38:	2318      	movs	r3, #24
 8001e3a:	9301      	str	r3, [sp, #4]
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e44:	4a4b      	ldr	r2, [pc, #300]	; (8001f74 <LCD_UltrasonicDistance+0x4e8>)
 8001e46:	21b4      	movs	r1, #180	; 0xb4
 8001e48:	2078      	movs	r0, #120	; 0x78
 8001e4a:	f7fe fedb 	bl	8000c04 <LCD_ShowString>

	if(*page_1!=page){LCD_ShowString(0,210,"                     ",WHITE,BLACK,24,0);}//清行代码
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d00c      	beq.n	8001e72 <LCD_UltrasonicDistance+0x3e6>
 8001e58:	2300      	movs	r3, #0
 8001e5a:	9302      	str	r3, [sp, #8]
 8001e5c:	2318      	movs	r3, #24
 8001e5e:	9301      	str	r3, [sp, #4]
 8001e60:	2300      	movs	r3, #0
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e68:	4a40      	ldr	r2, [pc, #256]	; (8001f6c <LCD_UltrasonicDistance+0x4e0>)
 8001e6a:	21d2      	movs	r1, #210	; 0xd2
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	f7fe fec9 	bl	8000c04 <LCD_ShowString>
	if(*page_1==4){LCD_ShowString(0,225,"                     ",WHITE,BLACK,24,0);}//清行代码
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d10c      	bne.n	8001e94 <LCD_UltrasonicDistance+0x408>
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	9302      	str	r3, [sp, #8]
 8001e7e:	2318      	movs	r3, #24
 8001e80:	9301      	str	r3, [sp, #4]
 8001e82:	2300      	movs	r3, #0
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e8a:	4a38      	ldr	r2, [pc, #224]	; (8001f6c <LCD_UltrasonicDistance+0x4e0>)
 8001e8c:	21e1      	movs	r1, #225	; 0xe1
 8001e8e:	2000      	movs	r0, #0
 8001e90:	f7fe feb8 	bl	8000c04 <LCD_ShowString>
	if(*page_1!=page){LCD_ShowString(0,240,"                     ",WHITE,BLACK,24,0);}//清行代码
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d00c      	beq.n	8001eb8 <LCD_UltrasonicDistance+0x42c>
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	9302      	str	r3, [sp, #8]
 8001ea2:	2318      	movs	r3, #24
 8001ea4:	9301      	str	r3, [sp, #4]
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001eae:	4a2f      	ldr	r2, [pc, #188]	; (8001f6c <LCD_UltrasonicDistance+0x4e0>)
 8001eb0:	21f0      	movs	r1, #240	; 0xf0
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	f7fe fea6 	bl	8000c04 <LCD_ShowString>
	if(*page_1==4){LCD_ShowString(0,250,"                     ",WHITE,BLACK,24,0);}//清行代码
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d10c      	bne.n	8001eda <LCD_UltrasonicDistance+0x44e>
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	9302      	str	r3, [sp, #8]
 8001ec4:	2318      	movs	r3, #24
 8001ec6:	9301      	str	r3, [sp, #4]
 8001ec8:	2300      	movs	r3, #0
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ed0:	4a26      	ldr	r2, [pc, #152]	; (8001f6c <LCD_UltrasonicDistance+0x4e0>)
 8001ed2:	21fa      	movs	r1, #250	; 0xfa
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	f7fe fe95 	bl	8000c04 <LCD_ShowString>

	if(line==1){LCD_ShowString(10,280,"Forward",WHITE,DARKBLUE ,24,0);}
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d10f      	bne.n	8001f00 <LCD_UltrasonicDistance+0x474>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	9302      	str	r3, [sp, #8]
 8001ee4:	2318      	movs	r3, #24
 8001ee6:	9301      	str	r3, [sp, #4]
 8001ee8:	f240 13cf 	movw	r3, #463	; 0x1cf
 8001eec:	9300      	str	r3, [sp, #0]
 8001eee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ef2:	4a21      	ldr	r2, [pc, #132]	; (8001f78 <LCD_UltrasonicDistance+0x4ec>)
 8001ef4:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001ef8:	200a      	movs	r0, #10
 8001efa:	f7fe fe83 	bl	8000c04 <LCD_ShowString>
 8001efe:	e00d      	b.n	8001f1c <LCD_UltrasonicDistance+0x490>
	else{LCD_ShowString(10,280,"Forward",WHITE,BLACK,24,0);}
 8001f00:	2300      	movs	r3, #0
 8001f02:	9302      	str	r3, [sp, #8]
 8001f04:	2318      	movs	r3, #24
 8001f06:	9301      	str	r3, [sp, #4]
 8001f08:	2300      	movs	r3, #0
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f10:	4a19      	ldr	r2, [pc, #100]	; (8001f78 <LCD_UltrasonicDistance+0x4ec>)
 8001f12:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001f16:	200a      	movs	r0, #10
 8001f18:	f7fe fe74 	bl	8000c04 <LCD_ShowString>

	if(line==2){LCD_ShowString(135,280,"Backward",WHITE,DARKBLUE ,24,0);}
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d10f      	bne.n	8001f42 <LCD_UltrasonicDistance+0x4b6>
 8001f22:	2300      	movs	r3, #0
 8001f24:	9302      	str	r3, [sp, #8]
 8001f26:	2318      	movs	r3, #24
 8001f28:	9301      	str	r3, [sp, #4]
 8001f2a:	f240 13cf 	movw	r3, #463	; 0x1cf
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f34:	4a11      	ldr	r2, [pc, #68]	; (8001f7c <LCD_UltrasonicDistance+0x4f0>)
 8001f36:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001f3a:	2087      	movs	r0, #135	; 0x87
 8001f3c:	f7fe fe62 	bl	8000c04 <LCD_ShowString>
 8001f40:	e00d      	b.n	8001f5e <LCD_UltrasonicDistance+0x4d2>
	else{LCD_ShowString(135,280,"Backward",WHITE,BLACK,24,0);}
 8001f42:	2300      	movs	r3, #0
 8001f44:	9302      	str	r3, [sp, #8]
 8001f46:	2318      	movs	r3, #24
 8001f48:	9301      	str	r3, [sp, #4]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f52:	4a0a      	ldr	r2, [pc, #40]	; (8001f7c <LCD_UltrasonicDistance+0x4f0>)
 8001f54:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001f58:	2087      	movs	r0, #135	; 0x87
 8001f5a:	f7fe fe53 	bl	8000c04 <LCD_ShowString>

	  *page_1=page;
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	601a      	str	r2, [r3, #0]
}
 8001f64:	bf00      	nop
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	080059a0 	.word	0x080059a0
 8001f70:	08005b90 	.word	0x08005b90
 8001f74:	08005b7c 	.word	0x08005b7c
 8001f78:	08005a34 	.word	0x08005a34
 8001f7c:	08005a3c 	.word	0x08005a3c

08001f80 <LCD_Warning>:

void LCD_Warning(unsigned char *date,int warning,int*warning_1,int line,int mode,int page,int *page_1)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08a      	sub	sp, #40	; 0x28
 8001f84:	af04      	add	r7, sp, #16
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
 8001f8c:	603b      	str	r3, [r7, #0]
			int i=1;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	617b      	str	r3, [r7, #20]
			if(*warning_1!=warning){LCD_ShowString(0,10,"                     ",WHITE,BLACK,24,0);}//清行代码
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d00c      	beq.n	8001fb6 <LCD_Warning+0x36>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	9302      	str	r3, [sp, #8]
 8001fa0:	2318      	movs	r3, #24
 8001fa2:	9301      	str	r3, [sp, #4]
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fac:	4aa7      	ldr	r2, [pc, #668]	; (800224c <LCD_Warning+0x2cc>)
 8001fae:	210a      	movs	r1, #10
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	f7fe fe27 	bl	8000c04 <LCD_ShowString>
			if(*page_1!=page){LCD_ShowString(0,10,"                     ",WHITE,BLACK,24,0);}//清行代码
 8001fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d00c      	beq.n	8001fda <LCD_Warning+0x5a>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	9302      	str	r3, [sp, #8]
 8001fc4:	2318      	movs	r3, #24
 8001fc6:	9301      	str	r3, [sp, #4]
 8001fc8:	2300      	movs	r3, #0
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fd0:	4a9e      	ldr	r2, [pc, #632]	; (800224c <LCD_Warning+0x2cc>)
 8001fd2:	210a      	movs	r1, #10
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	f7fe fe15 	bl	8000c04 <LCD_ShowString>
			if(*warning_1!=warning){LCD_ShowString(0,30,"                     ",WHITE,BLACK,24,0);}//清行代码
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d00c      	beq.n	8001ffe <LCD_Warning+0x7e>
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	9302      	str	r3, [sp, #8]
 8001fe8:	2318      	movs	r3, #24
 8001fea:	9301      	str	r3, [sp, #4]
 8001fec:	2300      	movs	r3, #0
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ff4:	4a95      	ldr	r2, [pc, #596]	; (800224c <LCD_Warning+0x2cc>)
 8001ff6:	211e      	movs	r1, #30
 8001ff8:	2000      	movs	r0, #0
 8001ffa:	f7fe fe03 	bl	8000c04 <LCD_ShowString>
			if(*page_1!=page){LCD_ShowString(0,30,"                     ",WHITE,BLACK,24,0);}//清行代码
 8001ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002004:	429a      	cmp	r2, r3
 8002006:	d00c      	beq.n	8002022 <LCD_Warning+0xa2>
 8002008:	2300      	movs	r3, #0
 800200a:	9302      	str	r3, [sp, #8]
 800200c:	2318      	movs	r3, #24
 800200e:	9301      	str	r3, [sp, #4]
 8002010:	2300      	movs	r3, #0
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002018:	4a8c      	ldr	r2, [pc, #560]	; (800224c <LCD_Warning+0x2cc>)
 800201a:	211e      	movs	r1, #30
 800201c:	2000      	movs	r0, #0
 800201e:	f7fe fdf1 	bl	8000c04 <LCD_ShowString>
			if(*warning_1!=warning){LCD_ShowString(0,40,"                     ",WHITE,BLACK,24,0);}//清行代码
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	429a      	cmp	r2, r3
 800202a:	d00c      	beq.n	8002046 <LCD_Warning+0xc6>
 800202c:	2300      	movs	r3, #0
 800202e:	9302      	str	r3, [sp, #8]
 8002030:	2318      	movs	r3, #24
 8002032:	9301      	str	r3, [sp, #4]
 8002034:	2300      	movs	r3, #0
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800203c:	4a83      	ldr	r2, [pc, #524]	; (800224c <LCD_Warning+0x2cc>)
 800203e:	2128      	movs	r1, #40	; 0x28
 8002040:	2000      	movs	r0, #0
 8002042:	f7fe fddf 	bl	8000c04 <LCD_ShowString>
			if(*page_1!=page){LCD_ShowString(0,40,"                     ",WHITE,BLACK,24,0);}//清行代码
 8002046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800204c:	429a      	cmp	r2, r3
 800204e:	d00c      	beq.n	800206a <LCD_Warning+0xea>
 8002050:	2300      	movs	r3, #0
 8002052:	9302      	str	r3, [sp, #8]
 8002054:	2318      	movs	r3, #24
 8002056:	9301      	str	r3, [sp, #4]
 8002058:	2300      	movs	r3, #0
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002060:	4a7a      	ldr	r2, [pc, #488]	; (800224c <LCD_Warning+0x2cc>)
 8002062:	2128      	movs	r1, #40	; 0x28
 8002064:	2000      	movs	r0, #0
 8002066:	f7fe fdcd 	bl	8000c04 <LCD_ShowString>
			LCD_ShowString(80,0,"Warning",BRED,BLACK,24,0);
 800206a:	2300      	movs	r3, #0
 800206c:	9302      	str	r3, [sp, #8]
 800206e:	2318      	movs	r3, #24
 8002070:	9301      	str	r3, [sp, #4]
 8002072:	2300      	movs	r3, #0
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800207a:	4a75      	ldr	r2, [pc, #468]	; (8002250 <LCD_Warning+0x2d0>)
 800207c:	2100      	movs	r1, #0
 800207e:	2050      	movs	r0, #80	; 0x50
 8002080:	f7fe fdc0 	bl	8000c04 <LCD_ShowString>

			if(mode==1)
 8002084:	6a3b      	ldr	r3, [r7, #32]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d119      	bne.n	80020be <LCD_Warning+0x13e>
			{
				LCD_ShowString(57,25*i,"Mode:Manual",YELLOW,BLACK,24,0);i++;
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	b29b      	uxth	r3, r3
 800208e:	461a      	mov	r2, r3
 8002090:	0092      	lsls	r2, r2, #2
 8002092:	4413      	add	r3, r2
 8002094:	461a      	mov	r2, r3
 8002096:	0091      	lsls	r1, r2, #2
 8002098:	461a      	mov	r2, r3
 800209a:	460b      	mov	r3, r1
 800209c:	4413      	add	r3, r2
 800209e:	b299      	uxth	r1, r3
 80020a0:	2300      	movs	r3, #0
 80020a2:	9302      	str	r3, [sp, #8]
 80020a4:	2318      	movs	r3, #24
 80020a6:	9301      	str	r3, [sp, #4]
 80020a8:	2300      	movs	r3, #0
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80020b0:	4a68      	ldr	r2, [pc, #416]	; (8002254 <LCD_Warning+0x2d4>)
 80020b2:	2039      	movs	r0, #57	; 0x39
 80020b4:	f7fe fda6 	bl	8000c04 <LCD_ShowString>
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	3301      	adds	r3, #1
 80020bc:	617b      	str	r3, [r7, #20]
			}

			if(mode==2)
 80020be:	6a3b      	ldr	r3, [r7, #32]
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d119      	bne.n	80020f8 <LCD_Warning+0x178>
			{
				LCD_ShowString(42,25*i,"Mode:Automatic",YELLOW,BLACK,24,0);i++;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	461a      	mov	r2, r3
 80020ca:	0092      	lsls	r2, r2, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	461a      	mov	r2, r3
 80020d0:	0091      	lsls	r1, r2, #2
 80020d2:	461a      	mov	r2, r3
 80020d4:	460b      	mov	r3, r1
 80020d6:	4413      	add	r3, r2
 80020d8:	b299      	uxth	r1, r3
 80020da:	2300      	movs	r3, #0
 80020dc:	9302      	str	r3, [sp, #8]
 80020de:	2318      	movs	r3, #24
 80020e0:	9301      	str	r3, [sp, #4]
 80020e2:	2300      	movs	r3, #0
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80020ea:	4a5b      	ldr	r2, [pc, #364]	; (8002258 <LCD_Warning+0x2d8>)
 80020ec:	202a      	movs	r0, #42	; 0x2a
 80020ee:	f7fe fd89 	bl	8000c04 <LCD_ShowString>
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	3301      	adds	r3, #1
 80020f6:	617b      	str	r3, [r7, #20]
			}
			if(*page_1!=page){LCD_ShowString(0,60,"                     ",WHITE,BLACK,24,0);}//清行代码
 80020f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020fe:	429a      	cmp	r2, r3
 8002100:	d00c      	beq.n	800211c <LCD_Warning+0x19c>
 8002102:	2300      	movs	r3, #0
 8002104:	9302      	str	r3, [sp, #8]
 8002106:	2318      	movs	r3, #24
 8002108:	9301      	str	r3, [sp, #4]
 800210a:	2300      	movs	r3, #0
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002112:	4a4e      	ldr	r2, [pc, #312]	; (800224c <LCD_Warning+0x2cc>)
 8002114:	213c      	movs	r1, #60	; 0x3c
 8002116:	2000      	movs	r0, #0
 8002118:	f7fe fd74 	bl	8000c04 <LCD_ShowString>
			if(*warning_1!=warning){LCD_ShowString(0,60,"                     ",WHITE,BLACK,24,0);}//清行代码
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68ba      	ldr	r2, [r7, #8]
 8002122:	429a      	cmp	r2, r3
 8002124:	d00c      	beq.n	8002140 <LCD_Warning+0x1c0>
 8002126:	2300      	movs	r3, #0
 8002128:	9302      	str	r3, [sp, #8]
 800212a:	2318      	movs	r3, #24
 800212c:	9301      	str	r3, [sp, #4]
 800212e:	2300      	movs	r3, #0
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002136:	4a45      	ldr	r2, [pc, #276]	; (800224c <LCD_Warning+0x2cc>)
 8002138:	213c      	movs	r1, #60	; 0x3c
 800213a:	2000      	movs	r0, #0
 800213c:	f7fe fd62 	bl	8000c04 <LCD_ShowString>
			if(date[0]==1){LCD_ShowString(10,25*i,"Flame front:abnomal",RED,BLACK,24,0);i++;}
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d119      	bne.n	800217c <LCD_Warning+0x1fc>
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	b29b      	uxth	r3, r3
 800214c:	461a      	mov	r2, r3
 800214e:	0092      	lsls	r2, r2, #2
 8002150:	4413      	add	r3, r2
 8002152:	461a      	mov	r2, r3
 8002154:	0091      	lsls	r1, r2, #2
 8002156:	461a      	mov	r2, r3
 8002158:	460b      	mov	r3, r1
 800215a:	4413      	add	r3, r2
 800215c:	b299      	uxth	r1, r3
 800215e:	2300      	movs	r3, #0
 8002160:	9302      	str	r3, [sp, #8]
 8002162:	2318      	movs	r3, #24
 8002164:	9301      	str	r3, [sp, #4]
 8002166:	2300      	movs	r3, #0
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800216e:	4a3b      	ldr	r2, [pc, #236]	; (800225c <LCD_Warning+0x2dc>)
 8002170:	200a      	movs	r0, #10
 8002172:	f7fe fd47 	bl	8000c04 <LCD_ShowString>
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	3301      	adds	r3, #1
 800217a:	617b      	str	r3, [r7, #20]

			if(*page_1!=page){LCD_ShowString(0,90,"                     ",WHITE,BLACK,24,0);}//清行代码
 800217c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002182:	429a      	cmp	r2, r3
 8002184:	d00c      	beq.n	80021a0 <LCD_Warning+0x220>
 8002186:	2300      	movs	r3, #0
 8002188:	9302      	str	r3, [sp, #8]
 800218a:	2318      	movs	r3, #24
 800218c:	9301      	str	r3, [sp, #4]
 800218e:	2300      	movs	r3, #0
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002196:	4a2d      	ldr	r2, [pc, #180]	; (800224c <LCD_Warning+0x2cc>)
 8002198:	215a      	movs	r1, #90	; 0x5a
 800219a:	2000      	movs	r0, #0
 800219c:	f7fe fd32 	bl	8000c04 <LCD_ShowString>
			if(*warning_1!=warning){	LCD_ShowString(0,90,"                     ",WHITE,BLACK,24,0);}//清行代码
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68ba      	ldr	r2, [r7, #8]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d00c      	beq.n	80021c4 <LCD_Warning+0x244>
 80021aa:	2300      	movs	r3, #0
 80021ac:	9302      	str	r3, [sp, #8]
 80021ae:	2318      	movs	r3, #24
 80021b0:	9301      	str	r3, [sp, #4]
 80021b2:	2300      	movs	r3, #0
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021ba:	4a24      	ldr	r2, [pc, #144]	; (800224c <LCD_Warning+0x2cc>)
 80021bc:	215a      	movs	r1, #90	; 0x5a
 80021be:	2000      	movs	r0, #0
 80021c0:	f7fe fd20 	bl	8000c04 <LCD_ShowString>
			if(date[1]==1){LCD_ShowString(10,25*i,"Flame right:abnomal",RED,BLACK,24,0);i++;}
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	3301      	adds	r3, #1
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d119      	bne.n	8002202 <LCD_Warning+0x282>
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	461a      	mov	r2, r3
 80021d4:	0092      	lsls	r2, r2, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	461a      	mov	r2, r3
 80021da:	0091      	lsls	r1, r2, #2
 80021dc:	461a      	mov	r2, r3
 80021de:	460b      	mov	r3, r1
 80021e0:	4413      	add	r3, r2
 80021e2:	b299      	uxth	r1, r3
 80021e4:	2300      	movs	r3, #0
 80021e6:	9302      	str	r3, [sp, #8]
 80021e8:	2318      	movs	r3, #24
 80021ea:	9301      	str	r3, [sp, #4]
 80021ec:	2300      	movs	r3, #0
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80021f4:	4a1a      	ldr	r2, [pc, #104]	; (8002260 <LCD_Warning+0x2e0>)
 80021f6:	200a      	movs	r0, #10
 80021f8:	f7fe fd04 	bl	8000c04 <LCD_ShowString>
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	3301      	adds	r3, #1
 8002200:	617b      	str	r3, [r7, #20]

			if(*page_1!=page){LCD_ShowString(0,120,"                     ",WHITE,BLACK,24,0);}//清行代码
 8002202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002208:	429a      	cmp	r2, r3
 800220a:	d00c      	beq.n	8002226 <LCD_Warning+0x2a6>
 800220c:	2300      	movs	r3, #0
 800220e:	9302      	str	r3, [sp, #8]
 8002210:	2318      	movs	r3, #24
 8002212:	9301      	str	r3, [sp, #4]
 8002214:	2300      	movs	r3, #0
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800221c:	4a0b      	ldr	r2, [pc, #44]	; (800224c <LCD_Warning+0x2cc>)
 800221e:	2178      	movs	r1, #120	; 0x78
 8002220:	2000      	movs	r0, #0
 8002222:	f7fe fcef 	bl	8000c04 <LCD_ShowString>
			if(*warning_1!=warning){LCD_ShowString(0,120,"                     ",WHITE,BLACK,24,0);}//清行代码
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	429a      	cmp	r2, r3
 800222e:	d019      	beq.n	8002264 <LCD_Warning+0x2e4>
 8002230:	2300      	movs	r3, #0
 8002232:	9302      	str	r3, [sp, #8]
 8002234:	2318      	movs	r3, #24
 8002236:	9301      	str	r3, [sp, #4]
 8002238:	2300      	movs	r3, #0
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002240:	4a02      	ldr	r2, [pc, #8]	; (800224c <LCD_Warning+0x2cc>)
 8002242:	2178      	movs	r1, #120	; 0x78
 8002244:	2000      	movs	r0, #0
 8002246:	f7fe fcdd 	bl	8000c04 <LCD_ShowString>
 800224a:	e00b      	b.n	8002264 <LCD_Warning+0x2e4>
 800224c:	080059a0 	.word	0x080059a0
 8002250:	08005a2c 	.word	0x08005a2c
 8002254:	080059c4 	.word	0x080059c4
 8002258:	080059d0 	.word	0x080059d0
 800225c:	08005aac 	.word	0x08005aac
 8002260:	08005ad4 	.word	0x08005ad4
			if(date[2]==1){LCD_ShowString(20,25*i,"Flame left:abnomal",RED,BLACK,24,0);i++;}
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	3302      	adds	r3, #2
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d119      	bne.n	80022a2 <LCD_Warning+0x322>
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	b29b      	uxth	r3, r3
 8002272:	461a      	mov	r2, r3
 8002274:	0092      	lsls	r2, r2, #2
 8002276:	4413      	add	r3, r2
 8002278:	461a      	mov	r2, r3
 800227a:	0091      	lsls	r1, r2, #2
 800227c:	461a      	mov	r2, r3
 800227e:	460b      	mov	r3, r1
 8002280:	4413      	add	r3, r2
 8002282:	b299      	uxth	r1, r3
 8002284:	2300      	movs	r3, #0
 8002286:	9302      	str	r3, [sp, #8]
 8002288:	2318      	movs	r3, #24
 800228a:	9301      	str	r3, [sp, #4]
 800228c:	2300      	movs	r3, #0
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002294:	4ab6      	ldr	r2, [pc, #728]	; (8002570 <LCD_Warning+0x5f0>)
 8002296:	2014      	movs	r0, #20
 8002298:	f7fe fcb4 	bl	8000c04 <LCD_ShowString>
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	3301      	adds	r3, #1
 80022a0:	617b      	str	r3, [r7, #20]

			if(*page_1!=page){LCD_ShowString(0,150,"                     ",WHITE,BLACK,24,0);}//清行代码
 80022a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d00c      	beq.n	80022c6 <LCD_Warning+0x346>
 80022ac:	2300      	movs	r3, #0
 80022ae:	9302      	str	r3, [sp, #8]
 80022b0:	2318      	movs	r3, #24
 80022b2:	9301      	str	r3, [sp, #4]
 80022b4:	2300      	movs	r3, #0
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022bc:	4aad      	ldr	r2, [pc, #692]	; (8002574 <LCD_Warning+0x5f4>)
 80022be:	2196      	movs	r1, #150	; 0x96
 80022c0:	2000      	movs	r0, #0
 80022c2:	f7fe fc9f 	bl	8000c04 <LCD_ShowString>
			if(*warning_1!=warning){LCD_ShowString(0,150,"                     ",WHITE,BLACK,24,0);}//清行代码
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68ba      	ldr	r2, [r7, #8]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d00c      	beq.n	80022ea <LCD_Warning+0x36a>
 80022d0:	2300      	movs	r3, #0
 80022d2:	9302      	str	r3, [sp, #8]
 80022d4:	2318      	movs	r3, #24
 80022d6:	9301      	str	r3, [sp, #4]
 80022d8:	2300      	movs	r3, #0
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022e0:	4aa4      	ldr	r2, [pc, #656]	; (8002574 <LCD_Warning+0x5f4>)
 80022e2:	2196      	movs	r1, #150	; 0x96
 80022e4:	2000      	movs	r0, #0
 80022e6:	f7fe fc8d 	bl	8000c04 <LCD_ShowString>
			if(date[3]==1){LCD_ShowString(40,25*i,"People:abnomal",RED,BLACK,24,0);i++;}
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	3303      	adds	r3, #3
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d119      	bne.n	8002328 <LCD_Warning+0x3a8>
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	461a      	mov	r2, r3
 80022fa:	0092      	lsls	r2, r2, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	461a      	mov	r2, r3
 8002300:	0091      	lsls	r1, r2, #2
 8002302:	461a      	mov	r2, r3
 8002304:	460b      	mov	r3, r1
 8002306:	4413      	add	r3, r2
 8002308:	b299      	uxth	r1, r3
 800230a:	2300      	movs	r3, #0
 800230c:	9302      	str	r3, [sp, #8]
 800230e:	2318      	movs	r3, #24
 8002310:	9301      	str	r3, [sp, #4]
 8002312:	2300      	movs	r3, #0
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800231a:	4a97      	ldr	r2, [pc, #604]	; (8002578 <LCD_Warning+0x5f8>)
 800231c:	2028      	movs	r0, #40	; 0x28
 800231e:	f7fe fc71 	bl	8000c04 <LCD_ShowString>
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	3301      	adds	r3, #1
 8002326:	617b      	str	r3, [r7, #20]

			if(*page_1!=page){LCD_ShowString(0,180,"                     ",WHITE,BLACK,24,0);}//清行代码
 8002328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800232e:	429a      	cmp	r2, r3
 8002330:	d00c      	beq.n	800234c <LCD_Warning+0x3cc>
 8002332:	2300      	movs	r3, #0
 8002334:	9302      	str	r3, [sp, #8]
 8002336:	2318      	movs	r3, #24
 8002338:	9301      	str	r3, [sp, #4]
 800233a:	2300      	movs	r3, #0
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002342:	4a8c      	ldr	r2, [pc, #560]	; (8002574 <LCD_Warning+0x5f4>)
 8002344:	21b4      	movs	r1, #180	; 0xb4
 8002346:	2000      	movs	r0, #0
 8002348:	f7fe fc5c 	bl	8000c04 <LCD_ShowString>
			if(*warning_1!=warning){LCD_ShowString(0,180,"                     ",WHITE,BLACK,24,0);}//清行代码
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	429a      	cmp	r2, r3
 8002354:	d00c      	beq.n	8002370 <LCD_Warning+0x3f0>
 8002356:	2300      	movs	r3, #0
 8002358:	9302      	str	r3, [sp, #8]
 800235a:	2318      	movs	r3, #24
 800235c:	9301      	str	r3, [sp, #4]
 800235e:	2300      	movs	r3, #0
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002366:	4a83      	ldr	r2, [pc, #524]	; (8002574 <LCD_Warning+0x5f4>)
 8002368:	21b4      	movs	r1, #180	; 0xb4
 800236a:	2000      	movs	r0, #0
 800236c:	f7fe fc4a 	bl	8000c04 <LCD_ShowString>
			if(date[4]==1){LCD_ShowString(45,25*i,"Smoke:abnomal",RED,BLACK,24,0);i++;}
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	3304      	adds	r3, #4
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d119      	bne.n	80023ae <LCD_Warning+0x42e>
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	b29b      	uxth	r3, r3
 800237e:	461a      	mov	r2, r3
 8002380:	0092      	lsls	r2, r2, #2
 8002382:	4413      	add	r3, r2
 8002384:	461a      	mov	r2, r3
 8002386:	0091      	lsls	r1, r2, #2
 8002388:	461a      	mov	r2, r3
 800238a:	460b      	mov	r3, r1
 800238c:	4413      	add	r3, r2
 800238e:	b299      	uxth	r1, r3
 8002390:	2300      	movs	r3, #0
 8002392:	9302      	str	r3, [sp, #8]
 8002394:	2318      	movs	r3, #24
 8002396:	9301      	str	r3, [sp, #4]
 8002398:	2300      	movs	r3, #0
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80023a0:	4a76      	ldr	r2, [pc, #472]	; (800257c <LCD_Warning+0x5fc>)
 80023a2:	202d      	movs	r0, #45	; 0x2d
 80023a4:	f7fe fc2e 	bl	8000c04 <LCD_ShowString>
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	3301      	adds	r3, #1
 80023ac:	617b      	str	r3, [r7, #20]

			if(*page_1!=page){LCD_ShowString(0,210,"                     ",WHITE,BLACK,24,0);}//清行代码
 80023ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d00c      	beq.n	80023d2 <LCD_Warning+0x452>
 80023b8:	2300      	movs	r3, #0
 80023ba:	9302      	str	r3, [sp, #8]
 80023bc:	2318      	movs	r3, #24
 80023be:	9301      	str	r3, [sp, #4]
 80023c0:	2300      	movs	r3, #0
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023c8:	4a6a      	ldr	r2, [pc, #424]	; (8002574 <LCD_Warning+0x5f4>)
 80023ca:	21d2      	movs	r1, #210	; 0xd2
 80023cc:	2000      	movs	r0, #0
 80023ce:	f7fe fc19 	bl	8000c04 <LCD_ShowString>
			if(*warning_1!=warning){LCD_ShowString(0,210,"                     ",WHITE,BLACK,24,0);}//清行代码
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d00c      	beq.n	80023f6 <LCD_Warning+0x476>
 80023dc:	2300      	movs	r3, #0
 80023de:	9302      	str	r3, [sp, #8]
 80023e0:	2318      	movs	r3, #24
 80023e2:	9301      	str	r3, [sp, #4]
 80023e4:	2300      	movs	r3, #0
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023ec:	4a61      	ldr	r2, [pc, #388]	; (8002574 <LCD_Warning+0x5f4>)
 80023ee:	21d2      	movs	r1, #210	; 0xd2
 80023f0:	2000      	movs	r0, #0
 80023f2:	f7fe fc07 	bl	8000c04 <LCD_ShowString>
			if(date[5]<21)	{LCD_ShowString(0,25*i,"Behind distance::",RED,BLACK,24,0);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	3305      	adds	r3, #5
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b14      	cmp	r3, #20
 80023fe:	d84a      	bhi.n	8002496 <LCD_Warning+0x516>
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	b29b      	uxth	r3, r3
 8002404:	461a      	mov	r2, r3
 8002406:	0092      	lsls	r2, r2, #2
 8002408:	4413      	add	r3, r2
 800240a:	461a      	mov	r2, r3
 800240c:	0091      	lsls	r1, r2, #2
 800240e:	461a      	mov	r2, r3
 8002410:	460b      	mov	r3, r1
 8002412:	4413      	add	r3, r2
 8002414:	b299      	uxth	r1, r3
 8002416:	2300      	movs	r3, #0
 8002418:	9302      	str	r3, [sp, #8]
 800241a:	2318      	movs	r3, #24
 800241c:	9301      	str	r3, [sp, #4]
 800241e:	2300      	movs	r3, #0
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002426:	4a56      	ldr	r2, [pc, #344]	; (8002580 <LCD_Warning+0x600>)
 8002428:	2000      	movs	r0, #0
 800242a:	f7fe fbeb 	bl	8000c04 <LCD_ShowString>
						LCD_ShowIntNum(190,25*i,date[5],2,RED,BLACK,24);
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	b29b      	uxth	r3, r3
 8002432:	461a      	mov	r2, r3
 8002434:	0092      	lsls	r2, r2, #2
 8002436:	4413      	add	r3, r2
 8002438:	461a      	mov	r2, r3
 800243a:	0091      	lsls	r1, r2, #2
 800243c:	461a      	mov	r2, r3
 800243e:	460b      	mov	r3, r1
 8002440:	4413      	add	r3, r2
 8002442:	b299      	uxth	r1, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	3305      	adds	r3, #5
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	b29a      	uxth	r2, r3
 800244c:	2318      	movs	r3, #24
 800244e:	9302      	str	r3, [sp, #8]
 8002450:	2300      	movs	r3, #0
 8002452:	9301      	str	r3, [sp, #4]
 8002454:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	2302      	movs	r3, #2
 800245c:	20be      	movs	r0, #190	; 0xbe
 800245e:	f7fe fc1b 	bl	8000c98 <LCD_ShowIntNum>
						LCD_ShowString(215,25*i,"cm",RED,BLACK,24,0);
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	b29b      	uxth	r3, r3
 8002466:	461a      	mov	r2, r3
 8002468:	0092      	lsls	r2, r2, #2
 800246a:	4413      	add	r3, r2
 800246c:	461a      	mov	r2, r3
 800246e:	0091      	lsls	r1, r2, #2
 8002470:	461a      	mov	r2, r3
 8002472:	460b      	mov	r3, r1
 8002474:	4413      	add	r3, r2
 8002476:	b299      	uxth	r1, r3
 8002478:	2300      	movs	r3, #0
 800247a:	9302      	str	r3, [sp, #8]
 800247c:	2318      	movs	r3, #24
 800247e:	9301      	str	r3, [sp, #4]
 8002480:	2300      	movs	r3, #0
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002488:	4a3e      	ldr	r2, [pc, #248]	; (8002584 <LCD_Warning+0x604>)
 800248a:	20d7      	movs	r0, #215	; 0xd7
 800248c:	f7fe fbba 	bl	8000c04 <LCD_ShowString>
						i++;}
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	3301      	adds	r3, #1
 8002494:	617b      	str	r3, [r7, #20]

			if(*page_1!=page){LCD_ShowString(0,240,"                     ",WHITE,BLACK,24,0);}//清行代码
 8002496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800249c:	429a      	cmp	r2, r3
 800249e:	d00c      	beq.n	80024ba <LCD_Warning+0x53a>
 80024a0:	2300      	movs	r3, #0
 80024a2:	9302      	str	r3, [sp, #8]
 80024a4:	2318      	movs	r3, #24
 80024a6:	9301      	str	r3, [sp, #4]
 80024a8:	2300      	movs	r3, #0
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024b0:	4a30      	ldr	r2, [pc, #192]	; (8002574 <LCD_Warning+0x5f4>)
 80024b2:	21f0      	movs	r1, #240	; 0xf0
 80024b4:	2000      	movs	r0, #0
 80024b6:	f7fe fba5 	bl	8000c04 <LCD_ShowString>
			if(*warning_1!=warning){LCD_ShowString(0,240,"                     ",WHITE,BLACK,24,0);}//清行代码
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d00c      	beq.n	80024de <LCD_Warning+0x55e>
 80024c4:	2300      	movs	r3, #0
 80024c6:	9302      	str	r3, [sp, #8]
 80024c8:	2318      	movs	r3, #24
 80024ca:	9301      	str	r3, [sp, #4]
 80024cc:	2300      	movs	r3, #0
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024d4:	4a27      	ldr	r2, [pc, #156]	; (8002574 <LCD_Warning+0x5f4>)
 80024d6:	21f0      	movs	r1, #240	; 0xf0
 80024d8:	2000      	movs	r0, #0
 80024da:	f7fe fb93 	bl	8000c04 <LCD_ShowString>

			if(date[6]<21)	{LCD_ShowString(5,25*i,"Front distance:",RED,BLACK,24,0);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	3306      	adds	r3, #6
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b14      	cmp	r3, #20
 80024e6:	d85a      	bhi.n	800259e <LCD_Warning+0x61e>
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	461a      	mov	r2, r3
 80024ee:	0092      	lsls	r2, r2, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	461a      	mov	r2, r3
 80024f4:	0091      	lsls	r1, r2, #2
 80024f6:	461a      	mov	r2, r3
 80024f8:	460b      	mov	r3, r1
 80024fa:	4413      	add	r3, r2
 80024fc:	b299      	uxth	r1, r3
 80024fe:	2300      	movs	r3, #0
 8002500:	9302      	str	r3, [sp, #8]
 8002502:	2318      	movs	r3, #24
 8002504:	9301      	str	r3, [sp, #4]
 8002506:	2300      	movs	r3, #0
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800250e:	4a1e      	ldr	r2, [pc, #120]	; (8002588 <LCD_Warning+0x608>)
 8002510:	2005      	movs	r0, #5
 8002512:	f7fe fb77 	bl	8000c04 <LCD_ShowString>
									LCD_ShowIntNum(185,25*i,date[6],2,RED,BLACK,24);
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	b29b      	uxth	r3, r3
 800251a:	461a      	mov	r2, r3
 800251c:	0092      	lsls	r2, r2, #2
 800251e:	4413      	add	r3, r2
 8002520:	461a      	mov	r2, r3
 8002522:	0091      	lsls	r1, r2, #2
 8002524:	461a      	mov	r2, r3
 8002526:	460b      	mov	r3, r1
 8002528:	4413      	add	r3, r2
 800252a:	b299      	uxth	r1, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	3306      	adds	r3, #6
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	b29a      	uxth	r2, r3
 8002534:	2318      	movs	r3, #24
 8002536:	9302      	str	r3, [sp, #8]
 8002538:	2300      	movs	r3, #0
 800253a:	9301      	str	r3, [sp, #4]
 800253c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	2302      	movs	r3, #2
 8002544:	20b9      	movs	r0, #185	; 0xb9
 8002546:	f7fe fba7 	bl	8000c98 <LCD_ShowIntNum>
									LCD_ShowString(215,25*i,"cm",RED,BLACK,24,0);
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	b29b      	uxth	r3, r3
 800254e:	461a      	mov	r2, r3
 8002550:	0092      	lsls	r2, r2, #2
 8002552:	4413      	add	r3, r2
 8002554:	461a      	mov	r2, r3
 8002556:	0091      	lsls	r1, r2, #2
 8002558:	461a      	mov	r2, r3
 800255a:	460b      	mov	r3, r1
 800255c:	4413      	add	r3, r2
 800255e:	b299      	uxth	r1, r3
 8002560:	2300      	movs	r3, #0
 8002562:	9302      	str	r3, [sp, #8]
 8002564:	2318      	movs	r3, #24
 8002566:	9301      	str	r3, [sp, #4]
 8002568:	2300      	movs	r3, #0
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	e00e      	b.n	800258c <LCD_Warning+0x60c>
 800256e:	bf00      	nop
 8002570:	08005b98 	.word	0x08005b98
 8002574:	080059a0 	.word	0x080059a0
 8002578:	08005b20 	.word	0x08005b20
 800257c:	08005b3c 	.word	0x08005b3c
 8002580:	08005bac 	.word	0x08005bac
 8002584:	08005b7c 	.word	0x08005b7c
 8002588:	08005bc0 	.word	0x08005bc0
 800258c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002590:	4a79      	ldr	r2, [pc, #484]	; (8002778 <LCD_Warning+0x7f8>)
 8002592:	20d7      	movs	r0, #215	; 0xd7
 8002594:	f7fe fb36 	bl	8000c04 <LCD_ShowString>
									i++;}
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	3301      	adds	r3, #1
 800259c:	617b      	str	r3, [r7, #20]

			if(date[7]<21)	{LCD_ShowString(5,25*i,"right distance:",RED,BLACK,24,0);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	3307      	adds	r3, #7
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b14      	cmp	r3, #20
 80025a6:	d84a      	bhi.n	800263e <LCD_Warning+0x6be>
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	0092      	lsls	r2, r2, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	461a      	mov	r2, r3
 80025b4:	0091      	lsls	r1, r2, #2
 80025b6:	461a      	mov	r2, r3
 80025b8:	460b      	mov	r3, r1
 80025ba:	4413      	add	r3, r2
 80025bc:	b299      	uxth	r1, r3
 80025be:	2300      	movs	r3, #0
 80025c0:	9302      	str	r3, [sp, #8]
 80025c2:	2318      	movs	r3, #24
 80025c4:	9301      	str	r3, [sp, #4]
 80025c6:	2300      	movs	r3, #0
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025ce:	4a6b      	ldr	r2, [pc, #428]	; (800277c <LCD_Warning+0x7fc>)
 80025d0:	2005      	movs	r0, #5
 80025d2:	f7fe fb17 	bl	8000c04 <LCD_ShowString>
									LCD_ShowIntNum(185,25*i,date[7],2,RED,BLACK,24);
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	b29b      	uxth	r3, r3
 80025da:	461a      	mov	r2, r3
 80025dc:	0092      	lsls	r2, r2, #2
 80025de:	4413      	add	r3, r2
 80025e0:	461a      	mov	r2, r3
 80025e2:	0091      	lsls	r1, r2, #2
 80025e4:	461a      	mov	r2, r3
 80025e6:	460b      	mov	r3, r1
 80025e8:	4413      	add	r3, r2
 80025ea:	b299      	uxth	r1, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	3307      	adds	r3, #7
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	2318      	movs	r3, #24
 80025f6:	9302      	str	r3, [sp, #8]
 80025f8:	2300      	movs	r3, #0
 80025fa:	9301      	str	r3, [sp, #4]
 80025fc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	2302      	movs	r3, #2
 8002604:	20b9      	movs	r0, #185	; 0xb9
 8002606:	f7fe fb47 	bl	8000c98 <LCD_ShowIntNum>
									LCD_ShowString(215,25*i,"cm",RED,BLACK,24,0);
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	b29b      	uxth	r3, r3
 800260e:	461a      	mov	r2, r3
 8002610:	0092      	lsls	r2, r2, #2
 8002612:	4413      	add	r3, r2
 8002614:	461a      	mov	r2, r3
 8002616:	0091      	lsls	r1, r2, #2
 8002618:	461a      	mov	r2, r3
 800261a:	460b      	mov	r3, r1
 800261c:	4413      	add	r3, r2
 800261e:	b299      	uxth	r1, r3
 8002620:	2300      	movs	r3, #0
 8002622:	9302      	str	r3, [sp, #8]
 8002624:	2318      	movs	r3, #24
 8002626:	9301      	str	r3, [sp, #4]
 8002628:	2300      	movs	r3, #0
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002630:	4a51      	ldr	r2, [pc, #324]	; (8002778 <LCD_Warning+0x7f8>)
 8002632:	20d7      	movs	r0, #215	; 0xd7
 8002634:	f7fe fae6 	bl	8000c04 <LCD_ShowString>
									i++;}
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	3301      	adds	r3, #1
 800263c:	617b      	str	r3, [r7, #20]

			if(date[8]<21)	{LCD_ShowString(10,25*i,"Left distance:",RED,BLACK,24,0);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	3308      	adds	r3, #8
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b14      	cmp	r3, #20
 8002646:	d84a      	bhi.n	80026de <LCD_Warning+0x75e>
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	b29b      	uxth	r3, r3
 800264c:	461a      	mov	r2, r3
 800264e:	0092      	lsls	r2, r2, #2
 8002650:	4413      	add	r3, r2
 8002652:	461a      	mov	r2, r3
 8002654:	0091      	lsls	r1, r2, #2
 8002656:	461a      	mov	r2, r3
 8002658:	460b      	mov	r3, r1
 800265a:	4413      	add	r3, r2
 800265c:	b299      	uxth	r1, r3
 800265e:	2300      	movs	r3, #0
 8002660:	9302      	str	r3, [sp, #8]
 8002662:	2318      	movs	r3, #24
 8002664:	9301      	str	r3, [sp, #4]
 8002666:	2300      	movs	r3, #0
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800266e:	4a44      	ldr	r2, [pc, #272]	; (8002780 <LCD_Warning+0x800>)
 8002670:	200a      	movs	r0, #10
 8002672:	f7fe fac7 	bl	8000c04 <LCD_ShowString>
									LCD_ShowIntNum(180,25*i,date[8],2,RED,BLACK,24);
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	b29b      	uxth	r3, r3
 800267a:	461a      	mov	r2, r3
 800267c:	0092      	lsls	r2, r2, #2
 800267e:	4413      	add	r3, r2
 8002680:	461a      	mov	r2, r3
 8002682:	0091      	lsls	r1, r2, #2
 8002684:	461a      	mov	r2, r3
 8002686:	460b      	mov	r3, r1
 8002688:	4413      	add	r3, r2
 800268a:	b299      	uxth	r1, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	3308      	adds	r3, #8
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	b29a      	uxth	r2, r3
 8002694:	2318      	movs	r3, #24
 8002696:	9302      	str	r3, [sp, #8]
 8002698:	2300      	movs	r3, #0
 800269a:	9301      	str	r3, [sp, #4]
 800269c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	2302      	movs	r3, #2
 80026a4:	20b4      	movs	r0, #180	; 0xb4
 80026a6:	f7fe faf7 	bl	8000c98 <LCD_ShowIntNum>
									LCD_ShowString(210,25*i,"cm",RED,BLACK,24,0);
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	461a      	mov	r2, r3
 80026b0:	0092      	lsls	r2, r2, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	461a      	mov	r2, r3
 80026b6:	0091      	lsls	r1, r2, #2
 80026b8:	461a      	mov	r2, r3
 80026ba:	460b      	mov	r3, r1
 80026bc:	4413      	add	r3, r2
 80026be:	b299      	uxth	r1, r3
 80026c0:	2300      	movs	r3, #0
 80026c2:	9302      	str	r3, [sp, #8]
 80026c4:	2318      	movs	r3, #24
 80026c6:	9301      	str	r3, [sp, #4]
 80026c8:	2300      	movs	r3, #0
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80026d0:	4a29      	ldr	r2, [pc, #164]	; (8002778 <LCD_Warning+0x7f8>)
 80026d2:	20d2      	movs	r0, #210	; 0xd2
 80026d4:	f7fe fa96 	bl	8000c04 <LCD_ShowString>
									i++;}
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	3301      	adds	r3, #1
 80026dc:	617b      	str	r3, [r7, #20]


			if(line==1){LCD_ShowString(10,280,"Forward",WHITE,DARKBLUE ,24,0);}
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d10f      	bne.n	8002704 <LCD_Warning+0x784>
 80026e4:	2300      	movs	r3, #0
 80026e6:	9302      	str	r3, [sp, #8]
 80026e8:	2318      	movs	r3, #24
 80026ea:	9301      	str	r3, [sp, #4]
 80026ec:	f240 13cf 	movw	r3, #463	; 0x1cf
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026f6:	4a23      	ldr	r2, [pc, #140]	; (8002784 <LCD_Warning+0x804>)
 80026f8:	f44f 718c 	mov.w	r1, #280	; 0x118
 80026fc:	200a      	movs	r0, #10
 80026fe:	f7fe fa81 	bl	8000c04 <LCD_ShowString>
 8002702:	e00d      	b.n	8002720 <LCD_Warning+0x7a0>
			else{LCD_ShowString(10,280,"Forward",WHITE,BLACK,24,0);}
 8002704:	2300      	movs	r3, #0
 8002706:	9302      	str	r3, [sp, #8]
 8002708:	2318      	movs	r3, #24
 800270a:	9301      	str	r3, [sp, #4]
 800270c:	2300      	movs	r3, #0
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002714:	4a1b      	ldr	r2, [pc, #108]	; (8002784 <LCD_Warning+0x804>)
 8002716:	f44f 718c 	mov.w	r1, #280	; 0x118
 800271a:	200a      	movs	r0, #10
 800271c:	f7fe fa72 	bl	8000c04 <LCD_ShowString>

			if(line==2){LCD_ShowString(135,280,"Backward",WHITE,DARKBLUE ,24,0);}
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d10f      	bne.n	8002746 <LCD_Warning+0x7c6>
 8002726:	2300      	movs	r3, #0
 8002728:	9302      	str	r3, [sp, #8]
 800272a:	2318      	movs	r3, #24
 800272c:	9301      	str	r3, [sp, #4]
 800272e:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002738:	4a13      	ldr	r2, [pc, #76]	; (8002788 <LCD_Warning+0x808>)
 800273a:	f44f 718c 	mov.w	r1, #280	; 0x118
 800273e:	2087      	movs	r0, #135	; 0x87
 8002740:	f7fe fa60 	bl	8000c04 <LCD_ShowString>
 8002744:	e00d      	b.n	8002762 <LCD_Warning+0x7e2>
			else{LCD_ShowString(135,280,"Backward",WHITE,BLACK,24,0);}
 8002746:	2300      	movs	r3, #0
 8002748:	9302      	str	r3, [sp, #8]
 800274a:	2318      	movs	r3, #24
 800274c:	9301      	str	r3, [sp, #4]
 800274e:	2300      	movs	r3, #0
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002756:	4a0c      	ldr	r2, [pc, #48]	; (8002788 <LCD_Warning+0x808>)
 8002758:	f44f 718c 	mov.w	r1, #280	; 0x118
 800275c:	2087      	movs	r0, #135	; 0x87
 800275e:	f7fe fa51 	bl	8000c04 <LCD_ShowString>
			*warning_1=warning;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	601a      	str	r2, [r3, #0]
			*page_1=page;
 8002768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800276c:	601a      	str	r2, [r3, #0]
}
 800276e:	bf00      	nop
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	08005b7c 	.word	0x08005b7c
 800277c:	08005bd0 	.word	0x08005bd0
 8002780:	08005be0 	.word	0x08005be0
 8002784:	08005a34 	.word	0x08005a34
 8002788:	08005a3c 	.word	0x08005a3c

0800278c <LCD_Writ_Bus>:
      函数说明：LCD串行数据写入函数
      入口数据：dat  要写入的串行数据
      返回值：  无
******************************************************************************/
void LCD_Writ_Bus(u8 dat)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	71fb      	strb	r3, [r7, #7]
	u8 i;
	LCD_CS_Clr();
 8002796:	2200      	movs	r2, #0
 8002798:	2140      	movs	r1, #64	; 0x40
 800279a:	4818      	ldr	r0, [pc, #96]	; (80027fc <LCD_Writ_Bus+0x70>)
 800279c:	f001 f9b5 	bl	8003b0a <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 80027a0:	2300      	movs	r3, #0
 80027a2:	73fb      	strb	r3, [r7, #15]
 80027a4:	e01e      	b.n	80027e4 <LCD_Writ_Bus+0x58>
	{
		LCD_SCLK_Clr();
 80027a6:	2200      	movs	r2, #0
 80027a8:	2101      	movs	r1, #1
 80027aa:	4814      	ldr	r0, [pc, #80]	; (80027fc <LCD_Writ_Bus+0x70>)
 80027ac:	f001 f9ad 	bl	8003b0a <HAL_GPIO_WritePin>
		if(dat&0x80)
 80027b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	da05      	bge.n	80027c4 <LCD_Writ_Bus+0x38>
		{
		   LCD_MOSI_Set();
 80027b8:	2201      	movs	r2, #1
 80027ba:	2102      	movs	r1, #2
 80027bc:	480f      	ldr	r0, [pc, #60]	; (80027fc <LCD_Writ_Bus+0x70>)
 80027be:	f001 f9a4 	bl	8003b0a <HAL_GPIO_WritePin>
 80027c2:	e004      	b.n	80027ce <LCD_Writ_Bus+0x42>
		}
		else
		{
		   LCD_MOSI_Clr();
 80027c4:	2200      	movs	r2, #0
 80027c6:	2102      	movs	r1, #2
 80027c8:	480c      	ldr	r0, [pc, #48]	; (80027fc <LCD_Writ_Bus+0x70>)
 80027ca:	f001 f99e 	bl	8003b0a <HAL_GPIO_WritePin>
		}
		LCD_SCLK_Set();
 80027ce:	2201      	movs	r2, #1
 80027d0:	2101      	movs	r1, #1
 80027d2:	480a      	ldr	r0, [pc, #40]	; (80027fc <LCD_Writ_Bus+0x70>)
 80027d4:	f001 f999 	bl	8003b0a <HAL_GPIO_WritePin>
		dat<<=1;
 80027d8:	79fb      	ldrb	r3, [r7, #7]
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 80027de:	7bfb      	ldrb	r3, [r7, #15]
 80027e0:	3301      	adds	r3, #1
 80027e2:	73fb      	strb	r3, [r7, #15]
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
 80027e6:	2b07      	cmp	r3, #7
 80027e8:	d9dd      	bls.n	80027a6 <LCD_Writ_Bus+0x1a>
	}
  LCD_CS_Set();
 80027ea:	2200      	movs	r2, #0
 80027ec:	2140      	movs	r1, #64	; 0x40
 80027ee:	4803      	ldr	r0, [pc, #12]	; (80027fc <LCD_Writ_Bus+0x70>)
 80027f0:	f001 f98b 	bl	8003b0a <HAL_GPIO_WritePin>
}
 80027f4:	bf00      	nop
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40010800 	.word	0x40010800

08002800 <LCD_WR_DATA8>:
      函数说明：LCD写入数据
      入口数据：dat 写入的数据
      返回值：  无
******************************************************************************/
void LCD_WR_DATA8(u8 dat)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	71fb      	strb	r3, [r7, #7]
	LCD_Writ_Bus(dat);
 800280a:	79fb      	ldrb	r3, [r7, #7]
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff ffbd 	bl	800278c <LCD_Writ_Bus>
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <LCD_WR_DATA>:
      函数说明：LCD写入数据
      入口数据：dat 写入的数据
      返回值：  无
******************************************************************************/
void LCD_WR_DATA(u16 dat)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b082      	sub	sp, #8
 800281e:	af00      	add	r7, sp, #0
 8002820:	4603      	mov	r3, r0
 8002822:	80fb      	strh	r3, [r7, #6]
	LCD_Writ_Bus(dat>>8);
 8002824:	88fb      	ldrh	r3, [r7, #6]
 8002826:	0a1b      	lsrs	r3, r3, #8
 8002828:	b29b      	uxth	r3, r3
 800282a:	b2db      	uxtb	r3, r3
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff ffad 	bl	800278c <LCD_Writ_Bus>
	LCD_Writ_Bus(dat);
 8002832:	88fb      	ldrh	r3, [r7, #6]
 8002834:	b2db      	uxtb	r3, r3
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff ffa8 	bl	800278c <LCD_Writ_Bus>
}
 800283c:	bf00      	nop
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <LCD_WR_REG>:
      函数说明：LCD写入命令
      入口数据：dat 写入的命令
      返回值：  无
******************************************************************************/
void LCD_WR_REG(u8 dat)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	71fb      	strb	r3, [r7, #7]
	LCD_DC_Clr();//写命令
 800284e:	2200      	movs	r2, #0
 8002850:	2108      	movs	r1, #8
 8002852:	4808      	ldr	r0, [pc, #32]	; (8002874 <LCD_WR_REG+0x30>)
 8002854:	f001 f959 	bl	8003b0a <HAL_GPIO_WritePin>
	LCD_Writ_Bus(dat);
 8002858:	79fb      	ldrb	r3, [r7, #7]
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff ff96 	bl	800278c <LCD_Writ_Bus>
	LCD_DC_Set();//写数据
 8002860:	2201      	movs	r2, #1
 8002862:	2108      	movs	r1, #8
 8002864:	4803      	ldr	r0, [pc, #12]	; (8002874 <LCD_WR_REG+0x30>)
 8002866:	f001 f950 	bl	8003b0a <HAL_GPIO_WritePin>
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40010800 	.word	0x40010800

08002878 <LCD_Address_Set>:
      入口数据：x1,x2 设置列的起始和结束地址
                y1,y2 设置行的起始和结束地址
      返回值：  无
******************************************************************************/
void LCD_Address_Set(u16 x1,u16 y1,u16 x2,u16 y2)
{
 8002878:	b590      	push	{r4, r7, lr}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	4604      	mov	r4, r0
 8002880:	4608      	mov	r0, r1
 8002882:	4611      	mov	r1, r2
 8002884:	461a      	mov	r2, r3
 8002886:	4623      	mov	r3, r4
 8002888:	80fb      	strh	r3, [r7, #6]
 800288a:	4603      	mov	r3, r0
 800288c:	80bb      	strh	r3, [r7, #4]
 800288e:	460b      	mov	r3, r1
 8002890:	807b      	strh	r3, [r7, #2]
 8002892:	4613      	mov	r3, r2
 8002894:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);//列地址设置
 8002896:	202a      	movs	r0, #42	; 0x2a
 8002898:	f7ff ffd4 	bl	8002844 <LCD_WR_REG>
		LCD_WR_DATA(x1);
 800289c:	88fb      	ldrh	r3, [r7, #6]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff ffbb 	bl	800281a <LCD_WR_DATA>
		LCD_WR_DATA(x2);
 80028a4:	887b      	ldrh	r3, [r7, #2]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff ffb7 	bl	800281a <LCD_WR_DATA>
		LCD_WR_REG(0x2b);//行地址设置
 80028ac:	202b      	movs	r0, #43	; 0x2b
 80028ae:	f7ff ffc9 	bl	8002844 <LCD_WR_REG>
		LCD_WR_DATA(y1);
 80028b2:	88bb      	ldrh	r3, [r7, #4]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff ffb0 	bl	800281a <LCD_WR_DATA>
		LCD_WR_DATA(y2);
 80028ba:	883b      	ldrh	r3, [r7, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff ffac 	bl	800281a <LCD_WR_DATA>
		LCD_WR_REG(0x2c);//储存器写
 80028c2:	202c      	movs	r0, #44	; 0x2c
 80028c4:	f7ff ffbe 	bl	8002844 <LCD_WR_REG>
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd90      	pop	{r4, r7, pc}

080028d0 <LCD_Init>:

void LCD_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0

	LCD_RES_Clr();//复位
 80028d4:	2200      	movs	r2, #0
 80028d6:	2104      	movs	r1, #4
 80028d8:	4889      	ldr	r0, [pc, #548]	; (8002b00 <LCD_Init+0x230>)
 80028da:	f001 f916 	bl	8003b0a <HAL_GPIO_WritePin>
	delay_ms(100);
 80028de:	2064      	movs	r0, #100	; 0x64
 80028e0:	f7fd fec0 	bl	8000664 <delay_ms>
	LCD_RES_Set();
 80028e4:	2201      	movs	r2, #1
 80028e6:	2104      	movs	r1, #4
 80028e8:	4885      	ldr	r0, [pc, #532]	; (8002b00 <LCD_Init+0x230>)
 80028ea:	f001 f90e 	bl	8003b0a <HAL_GPIO_WritePin>
	delay_ms(100);
 80028ee:	2064      	movs	r0, #100	; 0x64
 80028f0:	f7fd feb8 	bl	8000664 <delay_ms>

	LCD_BLK_Set();//打开背光
 80028f4:	2201      	movs	r2, #1
 80028f6:	2110      	movs	r1, #16
 80028f8:	4881      	ldr	r0, [pc, #516]	; (8002b00 <LCD_Init+0x230>)
 80028fa:	f001 f906 	bl	8003b0a <HAL_GPIO_WritePin>
  delay_ms(100);
 80028fe:	2064      	movs	r0, #100	; 0x64
 8002900:	f7fd feb0 	bl	8000664 <delay_ms>

	//************* Start Initial Sequence **********//
	LCD_WR_REG(0x11); //Sleep out
 8002904:	2011      	movs	r0, #17
 8002906:	f7ff ff9d 	bl	8002844 <LCD_WR_REG>
	delay_ms(120);              //Delay 120ms
 800290a:	2078      	movs	r0, #120	; 0x78
 800290c:	f7fd feaa 	bl	8000664 <delay_ms>
	//************* Start Initial Sequence **********//
	LCD_WR_REG(0xCF);
 8002910:	20cf      	movs	r0, #207	; 0xcf
 8002912:	f7ff ff97 	bl	8002844 <LCD_WR_REG>
	LCD_WR_DATA8(0x00);
 8002916:	2000      	movs	r0, #0
 8002918:	f7ff ff72 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0xC1);
 800291c:	20c1      	movs	r0, #193	; 0xc1
 800291e:	f7ff ff6f 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0X30);
 8002922:	2030      	movs	r0, #48	; 0x30
 8002924:	f7ff ff6c 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_REG(0xED);
 8002928:	20ed      	movs	r0, #237	; 0xed
 800292a:	f7ff ff8b 	bl	8002844 <LCD_WR_REG>
	LCD_WR_DATA8(0x64);
 800292e:	2064      	movs	r0, #100	; 0x64
 8002930:	f7ff ff66 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x03);
 8002934:	2003      	movs	r0, #3
 8002936:	f7ff ff63 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0X12);
 800293a:	2012      	movs	r0, #18
 800293c:	f7ff ff60 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0X81);
 8002940:	2081      	movs	r0, #129	; 0x81
 8002942:	f7ff ff5d 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_REG(0xE8);
 8002946:	20e8      	movs	r0, #232	; 0xe8
 8002948:	f7ff ff7c 	bl	8002844 <LCD_WR_REG>
	LCD_WR_DATA8(0x85);
 800294c:	2085      	movs	r0, #133	; 0x85
 800294e:	f7ff ff57 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x00);
 8002952:	2000      	movs	r0, #0
 8002954:	f7ff ff54 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x79);
 8002958:	2079      	movs	r0, #121	; 0x79
 800295a:	f7ff ff51 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_REG(0xCB);
 800295e:	20cb      	movs	r0, #203	; 0xcb
 8002960:	f7ff ff70 	bl	8002844 <LCD_WR_REG>
	LCD_WR_DATA8(0x39);
 8002964:	2039      	movs	r0, #57	; 0x39
 8002966:	f7ff ff4b 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x2C);
 800296a:	202c      	movs	r0, #44	; 0x2c
 800296c:	f7ff ff48 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x00);
 8002970:	2000      	movs	r0, #0
 8002972:	f7ff ff45 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x34);
 8002976:	2034      	movs	r0, #52	; 0x34
 8002978:	f7ff ff42 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x02);
 800297c:	2002      	movs	r0, #2
 800297e:	f7ff ff3f 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_REG(0xF7);
 8002982:	20f7      	movs	r0, #247	; 0xf7
 8002984:	f7ff ff5e 	bl	8002844 <LCD_WR_REG>
	LCD_WR_DATA8(0x20);
 8002988:	2020      	movs	r0, #32
 800298a:	f7ff ff39 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_REG(0xEA);
 800298e:	20ea      	movs	r0, #234	; 0xea
 8002990:	f7ff ff58 	bl	8002844 <LCD_WR_REG>
	LCD_WR_DATA8(0x00);
 8002994:	2000      	movs	r0, #0
 8002996:	f7ff ff33 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x00);
 800299a:	2000      	movs	r0, #0
 800299c:	f7ff ff30 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_REG(0xC0); //Power control
 80029a0:	20c0      	movs	r0, #192	; 0xc0
 80029a2:	f7ff ff4f 	bl	8002844 <LCD_WR_REG>
	LCD_WR_DATA8(0x1D); //VRH[5:0]
 80029a6:	201d      	movs	r0, #29
 80029a8:	f7ff ff2a 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_REG(0xC1); //Power control
 80029ac:	20c1      	movs	r0, #193	; 0xc1
 80029ae:	f7ff ff49 	bl	8002844 <LCD_WR_REG>
	LCD_WR_DATA8(0x12); //SAP[2:0];BT[3:0]
 80029b2:	2012      	movs	r0, #18
 80029b4:	f7ff ff24 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_REG(0xC5); //VCM control
 80029b8:	20c5      	movs	r0, #197	; 0xc5
 80029ba:	f7ff ff43 	bl	8002844 <LCD_WR_REG>
	LCD_WR_DATA8(0x33);
 80029be:	2033      	movs	r0, #51	; 0x33
 80029c0:	f7ff ff1e 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x3F);
 80029c4:	203f      	movs	r0, #63	; 0x3f
 80029c6:	f7ff ff1b 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_REG(0xC7); //VCM control
 80029ca:	20c7      	movs	r0, #199	; 0xc7
 80029cc:	f7ff ff3a 	bl	8002844 <LCD_WR_REG>
	LCD_WR_DATA8(0x92);
 80029d0:	2092      	movs	r0, #146	; 0x92
 80029d2:	f7ff ff15 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_REG(0x3A); // Memory Access Control
 80029d6:	203a      	movs	r0, #58	; 0x3a
 80029d8:	f7ff ff34 	bl	8002844 <LCD_WR_REG>
	LCD_WR_DATA8(0x55);
 80029dc:	2055      	movs	r0, #85	; 0x55
 80029de:	f7ff ff0f 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_REG(0x36); // Memory Access Control
 80029e2:	2036      	movs	r0, #54	; 0x36
 80029e4:	f7ff ff2e 	bl	8002844 <LCD_WR_REG>
	if(USE_HORIZONTAL==0)LCD_WR_DATA8(0x08);
 80029e8:	2008      	movs	r0, #8
 80029ea:	f7ff ff09 	bl	8002800 <LCD_WR_DATA8>
	else if(USE_HORIZONTAL==1)LCD_WR_DATA8(0xC8);
	else if(USE_HORIZONTAL==2)LCD_WR_DATA8(0x78);
	else LCD_WR_DATA8(0xA8);
	LCD_WR_REG(0xB1);
 80029ee:	20b1      	movs	r0, #177	; 0xb1
 80029f0:	f7ff ff28 	bl	8002844 <LCD_WR_REG>
	LCD_WR_DATA8(0x00);
 80029f4:	2000      	movs	r0, #0
 80029f6:	f7ff ff03 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x12);
 80029fa:	2012      	movs	r0, #18
 80029fc:	f7ff ff00 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_REG(0xB6); // Display Function Control
 8002a00:	20b6      	movs	r0, #182	; 0xb6
 8002a02:	f7ff ff1f 	bl	8002844 <LCD_WR_REG>
	LCD_WR_DATA8(0x0A);
 8002a06:	200a      	movs	r0, #10
 8002a08:	f7ff fefa 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0xA2);
 8002a0c:	20a2      	movs	r0, #162	; 0xa2
 8002a0e:	f7ff fef7 	bl	8002800 <LCD_WR_DATA8>

	LCD_WR_REG(0x44);
 8002a12:	2044      	movs	r0, #68	; 0x44
 8002a14:	f7ff ff16 	bl	8002844 <LCD_WR_REG>
	LCD_WR_DATA8(0x02);
 8002a18:	2002      	movs	r0, #2
 8002a1a:	f7ff fef1 	bl	8002800 <LCD_WR_DATA8>

	LCD_WR_REG(0xF2); // 3Gamma Function Disable
 8002a1e:	20f2      	movs	r0, #242	; 0xf2
 8002a20:	f7ff ff10 	bl	8002844 <LCD_WR_REG>
	LCD_WR_DATA8(0x00);
 8002a24:	2000      	movs	r0, #0
 8002a26:	f7ff feeb 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_REG(0x26); //Gamma curve selected
 8002a2a:	2026      	movs	r0, #38	; 0x26
 8002a2c:	f7ff ff0a 	bl	8002844 <LCD_WR_REG>
	LCD_WR_DATA8(0x01);
 8002a30:	2001      	movs	r0, #1
 8002a32:	f7ff fee5 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_REG(0xE0); //Set Gamma
 8002a36:	20e0      	movs	r0, #224	; 0xe0
 8002a38:	f7ff ff04 	bl	8002844 <LCD_WR_REG>
	LCD_WR_DATA8(0x0F);
 8002a3c:	200f      	movs	r0, #15
 8002a3e:	f7ff fedf 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x22);
 8002a42:	2022      	movs	r0, #34	; 0x22
 8002a44:	f7ff fedc 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x1C);
 8002a48:	201c      	movs	r0, #28
 8002a4a:	f7ff fed9 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x1B);
 8002a4e:	201b      	movs	r0, #27
 8002a50:	f7ff fed6 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x08);
 8002a54:	2008      	movs	r0, #8
 8002a56:	f7ff fed3 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x0F);
 8002a5a:	200f      	movs	r0, #15
 8002a5c:	f7ff fed0 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x48);
 8002a60:	2048      	movs	r0, #72	; 0x48
 8002a62:	f7ff fecd 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0xB8);
 8002a66:	20b8      	movs	r0, #184	; 0xb8
 8002a68:	f7ff feca 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x34);
 8002a6c:	2034      	movs	r0, #52	; 0x34
 8002a6e:	f7ff fec7 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x05);
 8002a72:	2005      	movs	r0, #5
 8002a74:	f7ff fec4 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x0C);
 8002a78:	200c      	movs	r0, #12
 8002a7a:	f7ff fec1 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x09);
 8002a7e:	2009      	movs	r0, #9
 8002a80:	f7ff febe 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x0F);
 8002a84:	200f      	movs	r0, #15
 8002a86:	f7ff febb 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x07);
 8002a8a:	2007      	movs	r0, #7
 8002a8c:	f7ff feb8 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x00);
 8002a90:	2000      	movs	r0, #0
 8002a92:	f7ff feb5 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_REG(0XE1); //Set Gamma
 8002a96:	20e1      	movs	r0, #225	; 0xe1
 8002a98:	f7ff fed4 	bl	8002844 <LCD_WR_REG>
	LCD_WR_DATA8(0x00);
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f7ff feaf 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x23);
 8002aa2:	2023      	movs	r0, #35	; 0x23
 8002aa4:	f7ff feac 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x24);
 8002aa8:	2024      	movs	r0, #36	; 0x24
 8002aaa:	f7ff fea9 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x07);
 8002aae:	2007      	movs	r0, #7
 8002ab0:	f7ff fea6 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x10);
 8002ab4:	2010      	movs	r0, #16
 8002ab6:	f7ff fea3 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x07);
 8002aba:	2007      	movs	r0, #7
 8002abc:	f7ff fea0 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x38);
 8002ac0:	2038      	movs	r0, #56	; 0x38
 8002ac2:	f7ff fe9d 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x47);
 8002ac6:	2047      	movs	r0, #71	; 0x47
 8002ac8:	f7ff fe9a 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x4B);
 8002acc:	204b      	movs	r0, #75	; 0x4b
 8002ace:	f7ff fe97 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x0A);
 8002ad2:	200a      	movs	r0, #10
 8002ad4:	f7ff fe94 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x13);
 8002ad8:	2013      	movs	r0, #19
 8002ada:	f7ff fe91 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x06);
 8002ade:	2006      	movs	r0, #6
 8002ae0:	f7ff fe8e 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x30);
 8002ae4:	2030      	movs	r0, #48	; 0x30
 8002ae6:	f7ff fe8b 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x38);
 8002aea:	2038      	movs	r0, #56	; 0x38
 8002aec:	f7ff fe88 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x0F);
 8002af0:	200f      	movs	r0, #15
 8002af2:	f7ff fe85 	bl	8002800 <LCD_WR_DATA8>
	LCD_WR_REG(0x29); //Display on
 8002af6:	2029      	movs	r0, #41	; 0x29
 8002af8:	f7ff fea4 	bl	8002844 <LCD_WR_REG>
}
 8002afc:	bf00      	nop
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40010800 	.word	0x40010800

08002b04 <HAL_TIM_PeriodElapsedCallback>:




HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
	LCD_FLAG++;
 8002b0c:	4b13      	ldr	r3, [pc, #76]	; (8002b5c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	3301      	adds	r3, #1
 8002b12:	4a12      	ldr	r2, [pc, #72]	; (8002b5c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002b14:	6013      	str	r3, [r2, #0]
	POTECT_FLAG++;
 8002b16:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	4a10      	ldr	r2, [pc, #64]	; (8002b60 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002b1e:	6013      	str	r3, [r2, #0]
	if(htim==(&htim1))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a10      	ldr	r2, [pc, #64]	; (8002b64 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d115      	bne.n	8002b54 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		if(LCD_FLAG==2)//周期200ms
 8002b28:	4b0c      	ldr	r3, [pc, #48]	; (8002b5c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d108      	bne.n	8002b42 <HAL_TIM_PeriodElapsedCallback+0x3e>

			LCD_ShowString(0,210,"                     ",WHITE,BLACK,24,0);//清行代码
			LCD_ShowIntNum(40,210,date_r[7],3,WHITE,BLACK,24);*/


			delay_ms(100);
 8002b30:	2064      	movs	r0, #100	; 0x64
 8002b32:	f7fd fd97 	bl	8000664 <delay_ms>

		SYS_DEFEND(BUF);
 8002b36:	480c      	ldr	r0, [pc, #48]	; (8002b68 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002b38:	f7fd fb2d 	bl	8000196 <SYS_DEFEND>

			LCD_FLAG=0;
 8002b3c:	4b07      	ldr	r3, [pc, #28]	; (8002b5c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
		}
		//delay_ms(10000);
		if(POTECT_FLAG==10)//周期10ms
 8002b42:	4b07      	ldr	r3, [pc, #28]	; (8002b60 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2b0a      	cmp	r3, #10
 8002b48:	d104      	bne.n	8002b54 <HAL_TIM_PeriodElapsedCallback+0x50>
		{
			Ptotect();
 8002b4a:	f7fd fceb 	bl	8000524 <Ptotect>
			POTECT_FLAG=0;
 8002b4e:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
		}
	}
}
 8002b54:	bf00      	nop
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	20000048 	.word	0x20000048
 8002b60:	2000004c 	.word	0x2000004c
 8002b64:	200001c4 	.word	0x200001c4
 8002b68:	20000050 	.word	0x20000050

08002b6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b72:	f000 fb89 	bl	8003288 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b76:	f000 f833 	bl	8002be0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b7a:	f7fd fdad 	bl	80006d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002b7e:	f7fd fd8d 	bl	800069c <MX_DMA_Init>
  MX_RTC_Init();
 8002b82:	f000 f891 	bl	8002ca8 <MX_RTC_Init>
  MX_USART3_UART_Init();
 8002b86:	f000 facd 	bl	8003124 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8002b8a:	f000 fa2b 	bl	8002fe4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8002b8e:	f000 fa9f 	bl	80030d0 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8002b92:	f000 f8f7 	bl	8002d84 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 8002b96:	f7ff fe9b 	bl	80028d0 <LCD_Init>
  LCD_Fill(0,0,LCD_W,LCD_H,BLACK );
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002ba2:	22f0      	movs	r2, #240	; 0xf0
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	f7fd fe2c 	bl	8000804 <LCD_Fill>
  L01_CE_HIGH();
 8002bac:	2200      	movs	r2, #0
 8002bae:	2140      	movs	r1, #64	; 0x40
 8002bb0:	4808      	ldr	r0, [pc, #32]	; (8002bd4 <main+0x68>)
 8002bb2:	f000 ffaa 	bl	8003b0a <HAL_GPIO_WritePin>
  L01_CSN_LOW();
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bbc:	4806      	ldr	r0, [pc, #24]	; (8002bd8 <main+0x6c>)
 8002bbe:	f000 ffa4 	bl	8003b0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI1_CE_GPIO_Port,SPI1_CE_Pin,1);
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	2140      	movs	r1, #64	; 0x40
 8002bc6:	4803      	ldr	r0, [pc, #12]	; (8002bd4 <main+0x68>)
 8002bc8:	f000 ff9f 	bl	8003b0a <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim1);
 8002bcc:	4803      	ldr	r0, [pc, #12]	; (8002bdc <main+0x70>)
 8002bce:	f002 f9b1 	bl	8004f34 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002bd2:	e7fe      	b.n	8002bd2 <main+0x66>
 8002bd4:	40010c00 	.word	0x40010c00
 8002bd8:	40010800 	.word	0x40010800
 8002bdc:	200001c4 	.word	0x200001c4

08002be0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b094      	sub	sp, #80	; 0x50
 8002be4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002be6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bea:	2228      	movs	r2, #40	; 0x28
 8002bec:	2100      	movs	r1, #0
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f002 fe3e 	bl	8005870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bf4:	f107 0314 	add.w	r3, r7, #20
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	609a      	str	r2, [r3, #8]
 8002c00:	60da      	str	r2, [r3, #12]
 8002c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c04:	1d3b      	adds	r3, r7, #4
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	605a      	str	r2, [r3, #4]
 8002c0c:	609a      	str	r2, [r3, #8]
 8002c0e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002c10:	2309      	movs	r3, #9
 8002c12:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002c22:	2301      	movs	r3, #1
 8002c24:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c26:	2302      	movs	r3, #2
 8002c28:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002c30:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002c34:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 ff8a 	bl	8003b54 <HAL_RCC_OscConfig>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002c46:	f000 f828 	bl	8002c9a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c4a:	230f      	movs	r3, #15
 8002c4c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c52:	2300      	movs	r3, #0
 8002c54:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c5a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c60:	f107 0314 	add.w	r3, r7, #20
 8002c64:	2102      	movs	r1, #2
 8002c66:	4618      	mov	r0, r3
 8002c68:	f001 f9f4 	bl	8004054 <HAL_RCC_ClockConfig>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002c72:	f000 f812 	bl	8002c9a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002c76:	2301      	movs	r3, #1
 8002c78:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002c7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c7e:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c80:	1d3b      	adds	r3, r7, #4
 8002c82:	4618      	mov	r0, r3
 8002c84:	f001 fb82 	bl	800438c <HAL_RCCEx_PeriphCLKConfig>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002c8e:	f000 f804 	bl	8002c9a <Error_Handler>
  }
}
 8002c92:	bf00      	nop
 8002c94:	3750      	adds	r7, #80	; 0x50
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002c9e:	bf00      	nop
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr
	...

08002ca8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8002cae:	1d3b      	adds	r3, r7, #4
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	460a      	mov	r2, r1
 8002cb4:	801a      	strh	r2, [r3, #0]
 8002cb6:	460a      	mov	r2, r1
 8002cb8:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8002cba:	2300      	movs	r3, #0
 8002cbc:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002cbe:	4b1d      	ldr	r3, [pc, #116]	; (8002d34 <MX_RTC_Init+0x8c>)
 8002cc0:	4a1d      	ldr	r2, [pc, #116]	; (8002d38 <MX_RTC_Init+0x90>)
 8002cc2:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002cc4:	4b1b      	ldr	r3, [pc, #108]	; (8002d34 <MX_RTC_Init+0x8c>)
 8002cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8002cca:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8002ccc:	4b19      	ldr	r3, [pc, #100]	; (8002d34 <MX_RTC_Init+0x8c>)
 8002cce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cd2:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002cd4:	4817      	ldr	r0, [pc, #92]	; (8002d34 <MX_RTC_Init+0x8c>)
 8002cd6:	f001 fccb 	bl	8004670 <HAL_RTC_Init>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8002ce0:	f7ff ffdb 	bl	8002c9a <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002cec:	2300      	movs	r3, #0
 8002cee:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002cf0:	1d3b      	adds	r3, r7, #4
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	480f      	ldr	r0, [pc, #60]	; (8002d34 <MX_RTC_Init+0x8c>)
 8002cf8:	f001 fd50 	bl	800479c <HAL_RTC_SetTime>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8002d02:	f7ff ffca 	bl	8002c9a <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002d06:	2301      	movs	r3, #1
 8002d08:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8002d16:	463b      	mov	r3, r7
 8002d18:	2201      	movs	r2, #1
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4805      	ldr	r0, [pc, #20]	; (8002d34 <MX_RTC_Init+0x8c>)
 8002d1e:	f001 fdd5 	bl	80048cc <HAL_RTC_SetDate>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8002d28:	f7ff ffb7 	bl	8002c9a <Error_Handler>
  }

}
 8002d2c:	bf00      	nop
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	20000114 	.word	0x20000114
 8002d38:	40002800 	.word	0x40002800

08002d3c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a0b      	ldr	r2, [pc, #44]	; (8002d78 <HAL_RTC_MspInit+0x3c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d110      	bne.n	8002d70 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8002d4e:	f000 fef5 	bl	8003b3c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8002d52:	4b0a      	ldr	r3, [pc, #40]	; (8002d7c <HAL_RTC_MspInit+0x40>)
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	4a09      	ldr	r2, [pc, #36]	; (8002d7c <HAL_RTC_MspInit+0x40>)
 8002d58:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002d5c:	61d3      	str	r3, [r2, #28]
 8002d5e:	4b07      	ldr	r3, [pc, #28]	; (8002d7c <HAL_RTC_MspInit+0x40>)
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002d6a:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <HAL_RTC_MspInit+0x44>)
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002d70:	bf00      	nop
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40002800 	.word	0x40002800
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	4242043c 	.word	0x4242043c

08002d84 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002d88:	4b17      	ldr	r3, [pc, #92]	; (8002de8 <MX_SPI1_Init+0x64>)
 8002d8a:	4a18      	ldr	r2, [pc, #96]	; (8002dec <MX_SPI1_Init+0x68>)
 8002d8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8002d8e:	4b16      	ldr	r3, [pc, #88]	; (8002de8 <MX_SPI1_Init+0x64>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d94:	4b14      	ldr	r3, [pc, #80]	; (8002de8 <MX_SPI1_Init+0x64>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d9a:	4b13      	ldr	r3, [pc, #76]	; (8002de8 <MX_SPI1_Init+0x64>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002da0:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <MX_SPI1_Init+0x64>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002da6:	4b10      	ldr	r3, [pc, #64]	; (8002de8 <MX_SPI1_Init+0x64>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002dac:	4b0e      	ldr	r3, [pc, #56]	; (8002de8 <MX_SPI1_Init+0x64>)
 8002dae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002db2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002db4:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <MX_SPI1_Init+0x64>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002dba:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <MX_SPI1_Init+0x64>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002dc0:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <MX_SPI1_Init+0x64>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dc6:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <MX_SPI1_Init+0x64>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002dcc:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <MX_SPI1_Init+0x64>)
 8002dce:	220a      	movs	r2, #10
 8002dd0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002dd2:	4805      	ldr	r0, [pc, #20]	; (8002de8 <MX_SPI1_Init+0x64>)
 8002dd4:	f001 ffda 	bl	8004d8c <HAL_SPI_Init>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <MX_SPI1_Init+0x5e>
  {
    Error_Handler();
 8002dde:	f7ff ff5c 	bl	8002c9a <Error_Handler>
  }

}
 8002de2:	bf00      	nop
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	20000128 	.word	0x20000128
 8002dec:	40013000 	.word	0x40013000

08002df0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b08a      	sub	sp, #40	; 0x28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df8:	f107 0314 	add.w	r3, r7, #20
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	605a      	str	r2, [r3, #4]
 8002e02:	609a      	str	r2, [r3, #8]
 8002e04:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a35      	ldr	r2, [pc, #212]	; (8002ee0 <HAL_SPI_MspInit+0xf0>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d163      	bne.n	8002ed8 <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e10:	4b34      	ldr	r3, [pc, #208]	; (8002ee4 <HAL_SPI_MspInit+0xf4>)
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	4a33      	ldr	r2, [pc, #204]	; (8002ee4 <HAL_SPI_MspInit+0xf4>)
 8002e16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e1a:	6193      	str	r3, [r2, #24]
 8002e1c:	4b31      	ldr	r3, [pc, #196]	; (8002ee4 <HAL_SPI_MspInit+0xf4>)
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e24:	613b      	str	r3, [r7, #16]
 8002e26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e28:	4b2e      	ldr	r3, [pc, #184]	; (8002ee4 <HAL_SPI_MspInit+0xf4>)
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	4a2d      	ldr	r2, [pc, #180]	; (8002ee4 <HAL_SPI_MspInit+0xf4>)
 8002e2e:	f043 0308 	orr.w	r3, r3, #8
 8002e32:	6193      	str	r3, [r2, #24]
 8002e34:	4b2b      	ldr	r3, [pc, #172]	; (8002ee4 <HAL_SPI_MspInit+0xf4>)
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	f003 0308 	and.w	r3, r3, #8
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002e40:	2328      	movs	r3, #40	; 0x28
 8002e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e44:	2300      	movs	r3, #0
 8002e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e4c:	f107 0314 	add.w	r3, r7, #20
 8002e50:	4619      	mov	r1, r3
 8002e52:	4825      	ldr	r0, [pc, #148]	; (8002ee8 <HAL_SPI_MspInit+0xf8>)
 8002e54:	f000 fce8 	bl	8003828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002e58:	2310      	movs	r3, #16
 8002e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e60:	2303      	movs	r3, #3
 8002e62:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e64:	f107 0314 	add.w	r3, r7, #20
 8002e68:	4619      	mov	r1, r3
 8002e6a:	481f      	ldr	r0, [pc, #124]	; (8002ee8 <HAL_SPI_MspInit+0xf8>)
 8002e6c:	f000 fcdc 	bl	8003828 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8002e70:	4b1e      	ldr	r3, [pc, #120]	; (8002eec <HAL_SPI_MspInit+0xfc>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	627b      	str	r3, [r7, #36]	; 0x24
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	f043 0301 	orr.w	r3, r3, #1
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24
 8002e86:	4a19      	ldr	r2, [pc, #100]	; (8002eec <HAL_SPI_MspInit+0xfc>)
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	6053      	str	r3, [r2, #4]

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8002e8c:	4b18      	ldr	r3, [pc, #96]	; (8002ef0 <HAL_SPI_MspInit+0x100>)
 8002e8e:	4a19      	ldr	r2, [pc, #100]	; (8002ef4 <HAL_SPI_MspInit+0x104>)
 8002e90:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e92:	4b17      	ldr	r3, [pc, #92]	; (8002ef0 <HAL_SPI_MspInit+0x100>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e98:	4b15      	ldr	r3, [pc, #84]	; (8002ef0 <HAL_SPI_MspInit+0x100>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e9e:	4b14      	ldr	r3, [pc, #80]	; (8002ef0 <HAL_SPI_MspInit+0x100>)
 8002ea0:	2280      	movs	r2, #128	; 0x80
 8002ea2:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ea4:	4b12      	ldr	r3, [pc, #72]	; (8002ef0 <HAL_SPI_MspInit+0x100>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002eaa:	4b11      	ldr	r3, [pc, #68]	; (8002ef0 <HAL_SPI_MspInit+0x100>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8002eb0:	4b0f      	ldr	r3, [pc, #60]	; (8002ef0 <HAL_SPI_MspInit+0x100>)
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002eb6:	4b0e      	ldr	r3, [pc, #56]	; (8002ef0 <HAL_SPI_MspInit+0x100>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002ebc:	480c      	ldr	r0, [pc, #48]	; (8002ef0 <HAL_SPI_MspInit+0x100>)
 8002ebe:	f000 fb53 	bl	8003568 <HAL_DMA_Init>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <HAL_SPI_MspInit+0xdc>
    {
      Error_Handler();
 8002ec8:	f7ff fee7 	bl	8002c9a <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a08      	ldr	r2, [pc, #32]	; (8002ef0 <HAL_SPI_MspInit+0x100>)
 8002ed0:	64da      	str	r2, [r3, #76]	; 0x4c
 8002ed2:	4a07      	ldr	r2, [pc, #28]	; (8002ef0 <HAL_SPI_MspInit+0x100>)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002ed8:	bf00      	nop
 8002eda:	3728      	adds	r7, #40	; 0x28
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40013000 	.word	0x40013000
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	40010c00 	.word	0x40010c00
 8002eec:	40010000 	.word	0x40010000
 8002ef0:	20000180 	.word	0x20000180
 8002ef4:	4002001c 	.word	0x4002001c

08002ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002efe:	4b15      	ldr	r3, [pc, #84]	; (8002f54 <HAL_MspInit+0x5c>)
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	4a14      	ldr	r2, [pc, #80]	; (8002f54 <HAL_MspInit+0x5c>)
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	6193      	str	r3, [r2, #24]
 8002f0a:	4b12      	ldr	r3, [pc, #72]	; (8002f54 <HAL_MspInit+0x5c>)
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	60bb      	str	r3, [r7, #8]
 8002f14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f16:	4b0f      	ldr	r3, [pc, #60]	; (8002f54 <HAL_MspInit+0x5c>)
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	4a0e      	ldr	r2, [pc, #56]	; (8002f54 <HAL_MspInit+0x5c>)
 8002f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f20:	61d3      	str	r3, [r2, #28]
 8002f22:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <HAL_MspInit+0x5c>)
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2a:	607b      	str	r3, [r7, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002f2e:	4b0a      	ldr	r3, [pc, #40]	; (8002f58 <HAL_MspInit+0x60>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	4a04      	ldr	r2, [pc, #16]	; (8002f58 <HAL_MspInit+0x60>)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f4a:	bf00      	nop
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr
 8002f54:	40021000 	.word	0x40021000
 8002f58:	40010000 	.word	0x40010000

08002f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002f60:	bf00      	nop
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr

08002f68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f6c:	e7fe      	b.n	8002f6c <HardFault_Handler+0x4>

08002f6e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f72:	e7fe      	b.n	8002f72 <MemManage_Handler+0x4>

08002f74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f78:	e7fe      	b.n	8002f78 <BusFault_Handler+0x4>

08002f7a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f7e:	e7fe      	b.n	8002f7e <UsageFault_Handler+0x4>

08002f80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f84:	bf00      	nop
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr

08002f8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f90:	bf00      	nop
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bc80      	pop	{r7}
 8002f96:	4770      	bx	lr

08002f98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f9c:	bf00      	nop
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr

08002fa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fa8:	f000 f9b4 	bl	8003314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fac:	bf00      	nop
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002fb4:	4802      	ldr	r0, [pc, #8]	; (8002fc0 <DMA1_Channel2_IRQHandler+0x10>)
 8002fb6:	f000 fb31 	bl	800361c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002fba:	bf00      	nop
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	20000180 	.word	0x20000180

08002fc4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002fc8:	4802      	ldr	r0, [pc, #8]	; (8002fd4 <TIM1_UP_IRQHandler+0x10>)
 8002fca:	f002 f805 	bl	8004fd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002fce:	bf00      	nop
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	200001c4 	.word	0x200001c4

08002fd8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fdc:	bf00      	nop
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fea:	f107 0308 	add.w	r3, r7, #8
 8002fee:	2200      	movs	r2, #0
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	605a      	str	r2, [r3, #4]
 8002ff4:	609a      	str	r2, [r3, #8]
 8002ff6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ff8:	463b      	mov	r3, r7
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8003000:	4b1e      	ldr	r3, [pc, #120]	; (800307c <MX_TIM1_Init+0x98>)
 8003002:	4a1f      	ldr	r2, [pc, #124]	; (8003080 <MX_TIM1_Init+0x9c>)
 8003004:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8003006:	4b1d      	ldr	r3, [pc, #116]	; (800307c <MX_TIM1_Init+0x98>)
 8003008:	2247      	movs	r2, #71	; 0x47
 800300a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800300c:	4b1b      	ldr	r3, [pc, #108]	; (800307c <MX_TIM1_Init+0x98>)
 800300e:	2200      	movs	r2, #0
 8003010:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8003012:	4b1a      	ldr	r3, [pc, #104]	; (800307c <MX_TIM1_Init+0x98>)
 8003014:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003018:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800301a:	4b18      	ldr	r3, [pc, #96]	; (800307c <MX_TIM1_Init+0x98>)
 800301c:	2200      	movs	r2, #0
 800301e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003020:	4b16      	ldr	r3, [pc, #88]	; (800307c <MX_TIM1_Init+0x98>)
 8003022:	2200      	movs	r2, #0
 8003024:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003026:	4b15      	ldr	r3, [pc, #84]	; (800307c <MX_TIM1_Init+0x98>)
 8003028:	2200      	movs	r2, #0
 800302a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800302c:	4813      	ldr	r0, [pc, #76]	; (800307c <MX_TIM1_Init+0x98>)
 800302e:	f001 ff31 	bl	8004e94 <HAL_TIM_Base_Init>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003038:	f7ff fe2f 	bl	8002c9a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800303c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003040:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003042:	f107 0308 	add.w	r3, r7, #8
 8003046:	4619      	mov	r1, r3
 8003048:	480c      	ldr	r0, [pc, #48]	; (800307c <MX_TIM1_Init+0x98>)
 800304a:	f002 f8cd 	bl	80051e8 <HAL_TIM_ConfigClockSource>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8003054:	f7ff fe21 	bl	8002c9a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003058:	2300      	movs	r3, #0
 800305a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800305c:	2300      	movs	r3, #0
 800305e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003060:	463b      	mov	r3, r7
 8003062:	4619      	mov	r1, r3
 8003064:	4805      	ldr	r0, [pc, #20]	; (800307c <MX_TIM1_Init+0x98>)
 8003066:	f002 fa93 	bl	8005590 <HAL_TIMEx_MasterConfigSynchronization>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003070:	f7ff fe13 	bl	8002c9a <Error_Handler>
  }

}
 8003074:	bf00      	nop
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	200001c4 	.word	0x200001c4
 8003080:	40012c00 	.word	0x40012c00

08003084 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a0d      	ldr	r2, [pc, #52]	; (80030c8 <HAL_TIM_Base_MspInit+0x44>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d113      	bne.n	80030be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003096:	4b0d      	ldr	r3, [pc, #52]	; (80030cc <HAL_TIM_Base_MspInit+0x48>)
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	4a0c      	ldr	r2, [pc, #48]	; (80030cc <HAL_TIM_Base_MspInit+0x48>)
 800309c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030a0:	6193      	str	r3, [r2, #24]
 80030a2:	4b0a      	ldr	r3, [pc, #40]	; (80030cc <HAL_TIM_Base_MspInit+0x48>)
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80030ae:	2200      	movs	r2, #0
 80030b0:	2100      	movs	r1, #0
 80030b2:	2019      	movs	r0, #25
 80030b4:	f000 fa21 	bl	80034fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80030b8:	2019      	movs	r0, #25
 80030ba:	f000 fa3a 	bl	8003532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80030be:	bf00      	nop
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40012c00 	.word	0x40012c00
 80030cc:	40021000 	.word	0x40021000

080030d0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80030d4:	4b11      	ldr	r3, [pc, #68]	; (800311c <MX_USART1_UART_Init+0x4c>)
 80030d6:	4a12      	ldr	r2, [pc, #72]	; (8003120 <MX_USART1_UART_Init+0x50>)
 80030d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80030da:	4b10      	ldr	r3, [pc, #64]	; (800311c <MX_USART1_UART_Init+0x4c>)
 80030dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80030e2:	4b0e      	ldr	r3, [pc, #56]	; (800311c <MX_USART1_UART_Init+0x4c>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80030e8:	4b0c      	ldr	r3, [pc, #48]	; (800311c <MX_USART1_UART_Init+0x4c>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80030ee:	4b0b      	ldr	r3, [pc, #44]	; (800311c <MX_USART1_UART_Init+0x4c>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80030f4:	4b09      	ldr	r3, [pc, #36]	; (800311c <MX_USART1_UART_Init+0x4c>)
 80030f6:	220c      	movs	r2, #12
 80030f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030fa:	4b08      	ldr	r3, [pc, #32]	; (800311c <MX_USART1_UART_Init+0x4c>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003100:	4b06      	ldr	r3, [pc, #24]	; (800311c <MX_USART1_UART_Init+0x4c>)
 8003102:	2200      	movs	r2, #0
 8003104:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003106:	4805      	ldr	r0, [pc, #20]	; (800311c <MX_USART1_UART_Init+0x4c>)
 8003108:	f002 fab2 	bl	8005670 <HAL_UART_Init>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003112:	f7ff fdc2 	bl	8002c9a <Error_Handler>
  }

}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	2000024c 	.word	0x2000024c
 8003120:	40013800 	.word	0x40013800

08003124 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8003128:	4b11      	ldr	r3, [pc, #68]	; (8003170 <MX_USART3_UART_Init+0x4c>)
 800312a:	4a12      	ldr	r2, [pc, #72]	; (8003174 <MX_USART3_UART_Init+0x50>)
 800312c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800312e:	4b10      	ldr	r3, [pc, #64]	; (8003170 <MX_USART3_UART_Init+0x4c>)
 8003130:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003134:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003136:	4b0e      	ldr	r3, [pc, #56]	; (8003170 <MX_USART3_UART_Init+0x4c>)
 8003138:	2200      	movs	r2, #0
 800313a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800313c:	4b0c      	ldr	r3, [pc, #48]	; (8003170 <MX_USART3_UART_Init+0x4c>)
 800313e:	2200      	movs	r2, #0
 8003140:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003142:	4b0b      	ldr	r3, [pc, #44]	; (8003170 <MX_USART3_UART_Init+0x4c>)
 8003144:	2200      	movs	r2, #0
 8003146:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003148:	4b09      	ldr	r3, [pc, #36]	; (8003170 <MX_USART3_UART_Init+0x4c>)
 800314a:	220c      	movs	r2, #12
 800314c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800314e:	4b08      	ldr	r3, [pc, #32]	; (8003170 <MX_USART3_UART_Init+0x4c>)
 8003150:	2200      	movs	r2, #0
 8003152:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003154:	4b06      	ldr	r3, [pc, #24]	; (8003170 <MX_USART3_UART_Init+0x4c>)
 8003156:	2200      	movs	r2, #0
 8003158:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800315a:	4805      	ldr	r0, [pc, #20]	; (8003170 <MX_USART3_UART_Init+0x4c>)
 800315c:	f002 fa88 	bl	8005670 <HAL_UART_Init>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003166:	f7ff fd98 	bl	8002c9a <Error_Handler>
  }

}
 800316a:	bf00      	nop
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	2000020c 	.word	0x2000020c
 8003174:	40004800 	.word	0x40004800

08003178 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b08a      	sub	sp, #40	; 0x28
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003180:	f107 0318 	add.w	r3, r7, #24
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	605a      	str	r2, [r3, #4]
 800318a:	609a      	str	r2, [r3, #8]
 800318c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a38      	ldr	r2, [pc, #224]	; (8003274 <HAL_UART_MspInit+0xfc>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d132      	bne.n	80031fe <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003198:	4b37      	ldr	r3, [pc, #220]	; (8003278 <HAL_UART_MspInit+0x100>)
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	4a36      	ldr	r2, [pc, #216]	; (8003278 <HAL_UART_MspInit+0x100>)
 800319e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031a2:	6193      	str	r3, [r2, #24]
 80031a4:	4b34      	ldr	r3, [pc, #208]	; (8003278 <HAL_UART_MspInit+0x100>)
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ac:	617b      	str	r3, [r7, #20]
 80031ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031b0:	4b31      	ldr	r3, [pc, #196]	; (8003278 <HAL_UART_MspInit+0x100>)
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	4a30      	ldr	r2, [pc, #192]	; (8003278 <HAL_UART_MspInit+0x100>)
 80031b6:	f043 0304 	orr.w	r3, r3, #4
 80031ba:	6193      	str	r3, [r2, #24]
 80031bc:	4b2e      	ldr	r3, [pc, #184]	; (8003278 <HAL_UART_MspInit+0x100>)
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	613b      	str	r3, [r7, #16]
 80031c6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80031c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ce:	2302      	movs	r3, #2
 80031d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031d2:	2303      	movs	r3, #3
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d6:	f107 0318 	add.w	r3, r7, #24
 80031da:	4619      	mov	r1, r3
 80031dc:	4827      	ldr	r0, [pc, #156]	; (800327c <HAL_UART_MspInit+0x104>)
 80031de:	f000 fb23 	bl	8003828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80031e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031e8:	2300      	movs	r3, #0
 80031ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ec:	2300      	movs	r3, #0
 80031ee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031f0:	f107 0318 	add.w	r3, r7, #24
 80031f4:	4619      	mov	r1, r3
 80031f6:	4821      	ldr	r0, [pc, #132]	; (800327c <HAL_UART_MspInit+0x104>)
 80031f8:	f000 fb16 	bl	8003828 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80031fc:	e036      	b.n	800326c <HAL_UART_MspInit+0xf4>
  else if(uartHandle->Instance==USART3)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a1f      	ldr	r2, [pc, #124]	; (8003280 <HAL_UART_MspInit+0x108>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d131      	bne.n	800326c <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003208:	4b1b      	ldr	r3, [pc, #108]	; (8003278 <HAL_UART_MspInit+0x100>)
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	4a1a      	ldr	r2, [pc, #104]	; (8003278 <HAL_UART_MspInit+0x100>)
 800320e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003212:	61d3      	str	r3, [r2, #28]
 8003214:	4b18      	ldr	r3, [pc, #96]	; (8003278 <HAL_UART_MspInit+0x100>)
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003220:	4b15      	ldr	r3, [pc, #84]	; (8003278 <HAL_UART_MspInit+0x100>)
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	4a14      	ldr	r2, [pc, #80]	; (8003278 <HAL_UART_MspInit+0x100>)
 8003226:	f043 0308 	orr.w	r3, r3, #8
 800322a:	6193      	str	r3, [r2, #24]
 800322c:	4b12      	ldr	r3, [pc, #72]	; (8003278 <HAL_UART_MspInit+0x100>)
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	f003 0308 	and.w	r3, r3, #8
 8003234:	60bb      	str	r3, [r7, #8]
 8003236:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003238:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800323c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323e:	2302      	movs	r3, #2
 8003240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003242:	2303      	movs	r3, #3
 8003244:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003246:	f107 0318 	add.w	r3, r7, #24
 800324a:	4619      	mov	r1, r3
 800324c:	480d      	ldr	r0, [pc, #52]	; (8003284 <HAL_UART_MspInit+0x10c>)
 800324e:	f000 faeb 	bl	8003828 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003252:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003258:	2300      	movs	r3, #0
 800325a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325c:	2300      	movs	r3, #0
 800325e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003260:	f107 0318 	add.w	r3, r7, #24
 8003264:	4619      	mov	r1, r3
 8003266:	4807      	ldr	r0, [pc, #28]	; (8003284 <HAL_UART_MspInit+0x10c>)
 8003268:	f000 fade 	bl	8003828 <HAL_GPIO_Init>
}
 800326c:	bf00      	nop
 800326e:	3728      	adds	r7, #40	; 0x28
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40013800 	.word	0x40013800
 8003278:	40021000 	.word	0x40021000
 800327c:	40010800 	.word	0x40010800
 8003280:	40004800 	.word	0x40004800
 8003284:	40010c00 	.word	0x40010c00

08003288 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800328c:	4b08      	ldr	r3, [pc, #32]	; (80032b0 <HAL_Init+0x28>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a07      	ldr	r2, [pc, #28]	; (80032b0 <HAL_Init+0x28>)
 8003292:	f043 0310 	orr.w	r3, r3, #16
 8003296:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003298:	2003      	movs	r0, #3
 800329a:	f000 f923 	bl	80034e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800329e:	2000      	movs	r0, #0
 80032a0:	f000 f808 	bl	80032b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032a4:	f7ff fe28 	bl	8002ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	40022000 	.word	0x40022000

080032b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032bc:	4b12      	ldr	r3, [pc, #72]	; (8003308 <HAL_InitTick+0x54>)
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	4b12      	ldr	r3, [pc, #72]	; (800330c <HAL_InitTick+0x58>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	4619      	mov	r1, r3
 80032c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80032ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 f93b 	bl	800354e <HAL_SYSTICK_Config>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e00e      	b.n	8003300 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b0f      	cmp	r3, #15
 80032e6:	d80a      	bhi.n	80032fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032e8:	2200      	movs	r2, #0
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	f04f 30ff 	mov.w	r0, #4294967295
 80032f0:	f000 f903 	bl	80034fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032f4:	4a06      	ldr	r2, [pc, #24]	; (8003310 <HAL_InitTick+0x5c>)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
 80032fc:	e000      	b.n	8003300 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
}
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	20000008 	.word	0x20000008
 800330c:	20000010 	.word	0x20000010
 8003310:	2000000c 	.word	0x2000000c

08003314 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003318:	4b05      	ldr	r3, [pc, #20]	; (8003330 <HAL_IncTick+0x1c>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	461a      	mov	r2, r3
 800331e:	4b05      	ldr	r3, [pc, #20]	; (8003334 <HAL_IncTick+0x20>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4413      	add	r3, r2
 8003324:	4a03      	ldr	r2, [pc, #12]	; (8003334 <HAL_IncTick+0x20>)
 8003326:	6013      	str	r3, [r2, #0]
}
 8003328:	bf00      	nop
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr
 8003330:	20000010 	.word	0x20000010
 8003334:	2000028c 	.word	0x2000028c

08003338 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  return uwTick;
 800333c:	4b02      	ldr	r3, [pc, #8]	; (8003348 <HAL_GetTick+0x10>)
 800333e:	681b      	ldr	r3, [r3, #0]
}
 8003340:	4618      	mov	r0, r3
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr
 8003348:	2000028c 	.word	0x2000028c

0800334c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f003 0307 	and.w	r3, r3, #7
 800335a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800335c:	4b0c      	ldr	r3, [pc, #48]	; (8003390 <__NVIC_SetPriorityGrouping+0x44>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003368:	4013      	ands	r3, r2
 800336a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003374:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800337c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800337e:	4a04      	ldr	r2, [pc, #16]	; (8003390 <__NVIC_SetPriorityGrouping+0x44>)
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	60d3      	str	r3, [r2, #12]
}
 8003384:	bf00      	nop
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	bc80      	pop	{r7}
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	e000ed00 	.word	0xe000ed00

08003394 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003398:	4b04      	ldr	r3, [pc, #16]	; (80033ac <__NVIC_GetPriorityGrouping+0x18>)
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	0a1b      	lsrs	r3, r3, #8
 800339e:	f003 0307 	and.w	r3, r3, #7
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	e000ed00 	.word	0xe000ed00

080033b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	4603      	mov	r3, r0
 80033b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	db0b      	blt.n	80033da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033c2:	79fb      	ldrb	r3, [r7, #7]
 80033c4:	f003 021f 	and.w	r2, r3, #31
 80033c8:	4906      	ldr	r1, [pc, #24]	; (80033e4 <__NVIC_EnableIRQ+0x34>)
 80033ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ce:	095b      	lsrs	r3, r3, #5
 80033d0:	2001      	movs	r0, #1
 80033d2:	fa00 f202 	lsl.w	r2, r0, r2
 80033d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	bc80      	pop	{r7}
 80033e2:	4770      	bx	lr
 80033e4:	e000e100 	.word	0xe000e100

080033e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	6039      	str	r1, [r7, #0]
 80033f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	db0a      	blt.n	8003412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	490c      	ldr	r1, [pc, #48]	; (8003434 <__NVIC_SetPriority+0x4c>)
 8003402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003406:	0112      	lsls	r2, r2, #4
 8003408:	b2d2      	uxtb	r2, r2
 800340a:	440b      	add	r3, r1
 800340c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003410:	e00a      	b.n	8003428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	b2da      	uxtb	r2, r3
 8003416:	4908      	ldr	r1, [pc, #32]	; (8003438 <__NVIC_SetPriority+0x50>)
 8003418:	79fb      	ldrb	r3, [r7, #7]
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	3b04      	subs	r3, #4
 8003420:	0112      	lsls	r2, r2, #4
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	440b      	add	r3, r1
 8003426:	761a      	strb	r2, [r3, #24]
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	bc80      	pop	{r7}
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	e000e100 	.word	0xe000e100
 8003438:	e000ed00 	.word	0xe000ed00

0800343c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800343c:	b480      	push	{r7}
 800343e:	b089      	sub	sp, #36	; 0x24
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f1c3 0307 	rsb	r3, r3, #7
 8003456:	2b04      	cmp	r3, #4
 8003458:	bf28      	it	cs
 800345a:	2304      	movcs	r3, #4
 800345c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	3304      	adds	r3, #4
 8003462:	2b06      	cmp	r3, #6
 8003464:	d902      	bls.n	800346c <NVIC_EncodePriority+0x30>
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	3b03      	subs	r3, #3
 800346a:	e000      	b.n	800346e <NVIC_EncodePriority+0x32>
 800346c:	2300      	movs	r3, #0
 800346e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003470:	f04f 32ff 	mov.w	r2, #4294967295
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	43da      	mvns	r2, r3
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	401a      	ands	r2, r3
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003484:	f04f 31ff 	mov.w	r1, #4294967295
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	fa01 f303 	lsl.w	r3, r1, r3
 800348e:	43d9      	mvns	r1, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003494:	4313      	orrs	r3, r2
         );
}
 8003496:	4618      	mov	r0, r3
 8003498:	3724      	adds	r7, #36	; 0x24
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr

080034a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034b0:	d301      	bcc.n	80034b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034b2:	2301      	movs	r3, #1
 80034b4:	e00f      	b.n	80034d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034b6:	4a0a      	ldr	r2, [pc, #40]	; (80034e0 <SysTick_Config+0x40>)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034be:	210f      	movs	r1, #15
 80034c0:	f04f 30ff 	mov.w	r0, #4294967295
 80034c4:	f7ff ff90 	bl	80033e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034c8:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <SysTick_Config+0x40>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ce:	4b04      	ldr	r3, [pc, #16]	; (80034e0 <SysTick_Config+0x40>)
 80034d0:	2207      	movs	r2, #7
 80034d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	e000e010 	.word	0xe000e010

080034e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7ff ff2d 	bl	800334c <__NVIC_SetPriorityGrouping>
}
 80034f2:	bf00      	nop
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b086      	sub	sp, #24
 80034fe:	af00      	add	r7, sp, #0
 8003500:	4603      	mov	r3, r0
 8003502:	60b9      	str	r1, [r7, #8]
 8003504:	607a      	str	r2, [r7, #4]
 8003506:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003508:	2300      	movs	r3, #0
 800350a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800350c:	f7ff ff42 	bl	8003394 <__NVIC_GetPriorityGrouping>
 8003510:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	68b9      	ldr	r1, [r7, #8]
 8003516:	6978      	ldr	r0, [r7, #20]
 8003518:	f7ff ff90 	bl	800343c <NVIC_EncodePriority>
 800351c:	4602      	mov	r2, r0
 800351e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003522:	4611      	mov	r1, r2
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff ff5f 	bl	80033e8 <__NVIC_SetPriority>
}
 800352a:	bf00      	nop
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b082      	sub	sp, #8
 8003536:	af00      	add	r7, sp, #0
 8003538:	4603      	mov	r3, r0
 800353a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800353c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff ff35 	bl	80033b0 <__NVIC_EnableIRQ>
}
 8003546:	bf00      	nop
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b082      	sub	sp, #8
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7ff ffa2 	bl	80034a0 <SysTick_Config>
 800355c:	4603      	mov	r3, r0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
	...

08003568 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e043      	b.n	8003606 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	461a      	mov	r2, r3
 8003584:	4b22      	ldr	r3, [pc, #136]	; (8003610 <HAL_DMA_Init+0xa8>)
 8003586:	4413      	add	r3, r2
 8003588:	4a22      	ldr	r2, [pc, #136]	; (8003614 <HAL_DMA_Init+0xac>)
 800358a:	fba2 2303 	umull	r2, r3, r2, r3
 800358e:	091b      	lsrs	r3, r3, #4
 8003590:	009a      	lsls	r2, r3, #2
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a1f      	ldr	r2, [pc, #124]	; (8003618 <HAL_DMA_Init+0xb0>)
 800359a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2202      	movs	r2, #2
 80035a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80035b2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80035b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80035c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr
 8003610:	bffdfff8 	.word	0xbffdfff8
 8003614:	cccccccd 	.word	0xcccccccd
 8003618:	40020000 	.word	0x40020000

0800361c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003638:	2204      	movs	r2, #4
 800363a:	409a      	lsls	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4013      	ands	r3, r2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d04f      	beq.n	80036e4 <HAL_DMA_IRQHandler+0xc8>
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	2b00      	cmp	r3, #0
 800364c:	d04a      	beq.n	80036e4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0320 	and.w	r3, r3, #32
 8003658:	2b00      	cmp	r3, #0
 800365a:	d107      	bne.n	800366c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0204 	bic.w	r2, r2, #4
 800366a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a66      	ldr	r2, [pc, #408]	; (800380c <HAL_DMA_IRQHandler+0x1f0>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d029      	beq.n	80036ca <HAL_DMA_IRQHandler+0xae>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a65      	ldr	r2, [pc, #404]	; (8003810 <HAL_DMA_IRQHandler+0x1f4>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d022      	beq.n	80036c6 <HAL_DMA_IRQHandler+0xaa>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a63      	ldr	r2, [pc, #396]	; (8003814 <HAL_DMA_IRQHandler+0x1f8>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d01a      	beq.n	80036c0 <HAL_DMA_IRQHandler+0xa4>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a62      	ldr	r2, [pc, #392]	; (8003818 <HAL_DMA_IRQHandler+0x1fc>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d012      	beq.n	80036ba <HAL_DMA_IRQHandler+0x9e>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a60      	ldr	r2, [pc, #384]	; (800381c <HAL_DMA_IRQHandler+0x200>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d00a      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x98>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a5f      	ldr	r2, [pc, #380]	; (8003820 <HAL_DMA_IRQHandler+0x204>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d102      	bne.n	80036ae <HAL_DMA_IRQHandler+0x92>
 80036a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80036ac:	e00e      	b.n	80036cc <HAL_DMA_IRQHandler+0xb0>
 80036ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80036b2:	e00b      	b.n	80036cc <HAL_DMA_IRQHandler+0xb0>
 80036b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80036b8:	e008      	b.n	80036cc <HAL_DMA_IRQHandler+0xb0>
 80036ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80036be:	e005      	b.n	80036cc <HAL_DMA_IRQHandler+0xb0>
 80036c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036c4:	e002      	b.n	80036cc <HAL_DMA_IRQHandler+0xb0>
 80036c6:	2340      	movs	r3, #64	; 0x40
 80036c8:	e000      	b.n	80036cc <HAL_DMA_IRQHandler+0xb0>
 80036ca:	2304      	movs	r3, #4
 80036cc:	4a55      	ldr	r2, [pc, #340]	; (8003824 <HAL_DMA_IRQHandler+0x208>)
 80036ce:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 8094 	beq.w	8003802 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80036e2:	e08e      	b.n	8003802 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e8:	2202      	movs	r2, #2
 80036ea:	409a      	lsls	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4013      	ands	r3, r2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d056      	beq.n	80037a2 <HAL_DMA_IRQHandler+0x186>
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d051      	beq.n	80037a2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0320 	and.w	r3, r3, #32
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10b      	bne.n	8003724 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 020a 	bic.w	r2, r2, #10
 800371a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a38      	ldr	r2, [pc, #224]	; (800380c <HAL_DMA_IRQHandler+0x1f0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d029      	beq.n	8003782 <HAL_DMA_IRQHandler+0x166>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a37      	ldr	r2, [pc, #220]	; (8003810 <HAL_DMA_IRQHandler+0x1f4>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d022      	beq.n	800377e <HAL_DMA_IRQHandler+0x162>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a35      	ldr	r2, [pc, #212]	; (8003814 <HAL_DMA_IRQHandler+0x1f8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d01a      	beq.n	8003778 <HAL_DMA_IRQHandler+0x15c>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a34      	ldr	r2, [pc, #208]	; (8003818 <HAL_DMA_IRQHandler+0x1fc>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d012      	beq.n	8003772 <HAL_DMA_IRQHandler+0x156>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a32      	ldr	r2, [pc, #200]	; (800381c <HAL_DMA_IRQHandler+0x200>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d00a      	beq.n	800376c <HAL_DMA_IRQHandler+0x150>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a31      	ldr	r2, [pc, #196]	; (8003820 <HAL_DMA_IRQHandler+0x204>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d102      	bne.n	8003766 <HAL_DMA_IRQHandler+0x14a>
 8003760:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003764:	e00e      	b.n	8003784 <HAL_DMA_IRQHandler+0x168>
 8003766:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800376a:	e00b      	b.n	8003784 <HAL_DMA_IRQHandler+0x168>
 800376c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003770:	e008      	b.n	8003784 <HAL_DMA_IRQHandler+0x168>
 8003772:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003776:	e005      	b.n	8003784 <HAL_DMA_IRQHandler+0x168>
 8003778:	f44f 7300 	mov.w	r3, #512	; 0x200
 800377c:	e002      	b.n	8003784 <HAL_DMA_IRQHandler+0x168>
 800377e:	2320      	movs	r3, #32
 8003780:	e000      	b.n	8003784 <HAL_DMA_IRQHandler+0x168>
 8003782:	2302      	movs	r3, #2
 8003784:	4a27      	ldr	r2, [pc, #156]	; (8003824 <HAL_DMA_IRQHandler+0x208>)
 8003786:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003794:	2b00      	cmp	r3, #0
 8003796:	d034      	beq.n	8003802 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80037a0:	e02f      	b.n	8003802 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	2208      	movs	r2, #8
 80037a8:	409a      	lsls	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4013      	ands	r3, r2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d028      	beq.n	8003804 <HAL_DMA_IRQHandler+0x1e8>
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	f003 0308 	and.w	r3, r3, #8
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d023      	beq.n	8003804 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 020e 	bic.w	r2, r2, #14
 80037ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d4:	2101      	movs	r1, #1
 80037d6:	fa01 f202 	lsl.w	r2, r1, r2
 80037da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d004      	beq.n	8003804 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	4798      	blx	r3
    }
  }
  return;
 8003802:	bf00      	nop
 8003804:	bf00      	nop
}
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40020008 	.word	0x40020008
 8003810:	4002001c 	.word	0x4002001c
 8003814:	40020030 	.word	0x40020030
 8003818:	40020044 	.word	0x40020044
 800381c:	40020058 	.word	0x40020058
 8003820:	4002006c 	.word	0x4002006c
 8003824:	40020000 	.word	0x40020000

08003828 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003828:	b480      	push	{r7}
 800382a:	b08b      	sub	sp, #44	; 0x2c
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003832:	2300      	movs	r3, #0
 8003834:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003836:	2300      	movs	r3, #0
 8003838:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800383a:	e127      	b.n	8003a8c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800383c:	2201      	movs	r2, #1
 800383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	69fa      	ldr	r2, [r7, #28]
 800384c:	4013      	ands	r3, r2
 800384e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	429a      	cmp	r2, r3
 8003856:	f040 8116 	bne.w	8003a86 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2b12      	cmp	r3, #18
 8003860:	d034      	beq.n	80038cc <HAL_GPIO_Init+0xa4>
 8003862:	2b12      	cmp	r3, #18
 8003864:	d80d      	bhi.n	8003882 <HAL_GPIO_Init+0x5a>
 8003866:	2b02      	cmp	r3, #2
 8003868:	d02b      	beq.n	80038c2 <HAL_GPIO_Init+0x9a>
 800386a:	2b02      	cmp	r3, #2
 800386c:	d804      	bhi.n	8003878 <HAL_GPIO_Init+0x50>
 800386e:	2b00      	cmp	r3, #0
 8003870:	d031      	beq.n	80038d6 <HAL_GPIO_Init+0xae>
 8003872:	2b01      	cmp	r3, #1
 8003874:	d01c      	beq.n	80038b0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003876:	e048      	b.n	800390a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003878:	2b03      	cmp	r3, #3
 800387a:	d043      	beq.n	8003904 <HAL_GPIO_Init+0xdc>
 800387c:	2b11      	cmp	r3, #17
 800387e:	d01b      	beq.n	80038b8 <HAL_GPIO_Init+0x90>
          break;
 8003880:	e043      	b.n	800390a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003882:	4a89      	ldr	r2, [pc, #548]	; (8003aa8 <HAL_GPIO_Init+0x280>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d026      	beq.n	80038d6 <HAL_GPIO_Init+0xae>
 8003888:	4a87      	ldr	r2, [pc, #540]	; (8003aa8 <HAL_GPIO_Init+0x280>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d806      	bhi.n	800389c <HAL_GPIO_Init+0x74>
 800388e:	4a87      	ldr	r2, [pc, #540]	; (8003aac <HAL_GPIO_Init+0x284>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d020      	beq.n	80038d6 <HAL_GPIO_Init+0xae>
 8003894:	4a86      	ldr	r2, [pc, #536]	; (8003ab0 <HAL_GPIO_Init+0x288>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d01d      	beq.n	80038d6 <HAL_GPIO_Init+0xae>
          break;
 800389a:	e036      	b.n	800390a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800389c:	4a85      	ldr	r2, [pc, #532]	; (8003ab4 <HAL_GPIO_Init+0x28c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d019      	beq.n	80038d6 <HAL_GPIO_Init+0xae>
 80038a2:	4a85      	ldr	r2, [pc, #532]	; (8003ab8 <HAL_GPIO_Init+0x290>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d016      	beq.n	80038d6 <HAL_GPIO_Init+0xae>
 80038a8:	4a84      	ldr	r2, [pc, #528]	; (8003abc <HAL_GPIO_Init+0x294>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d013      	beq.n	80038d6 <HAL_GPIO_Init+0xae>
          break;
 80038ae:	e02c      	b.n	800390a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	623b      	str	r3, [r7, #32]
          break;
 80038b6:	e028      	b.n	800390a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	3304      	adds	r3, #4
 80038be:	623b      	str	r3, [r7, #32]
          break;
 80038c0:	e023      	b.n	800390a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	3308      	adds	r3, #8
 80038c8:	623b      	str	r3, [r7, #32]
          break;
 80038ca:	e01e      	b.n	800390a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	330c      	adds	r3, #12
 80038d2:	623b      	str	r3, [r7, #32]
          break;
 80038d4:	e019      	b.n	800390a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d102      	bne.n	80038e4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80038de:	2304      	movs	r3, #4
 80038e0:	623b      	str	r3, [r7, #32]
          break;
 80038e2:	e012      	b.n	800390a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d105      	bne.n	80038f8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80038ec:	2308      	movs	r3, #8
 80038ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	69fa      	ldr	r2, [r7, #28]
 80038f4:	611a      	str	r2, [r3, #16]
          break;
 80038f6:	e008      	b.n	800390a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80038f8:	2308      	movs	r3, #8
 80038fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	69fa      	ldr	r2, [r7, #28]
 8003900:	615a      	str	r2, [r3, #20]
          break;
 8003902:	e002      	b.n	800390a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003904:	2300      	movs	r3, #0
 8003906:	623b      	str	r3, [r7, #32]
          break;
 8003908:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	2bff      	cmp	r3, #255	; 0xff
 800390e:	d801      	bhi.n	8003914 <HAL_GPIO_Init+0xec>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	e001      	b.n	8003918 <HAL_GPIO_Init+0xf0>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3304      	adds	r3, #4
 8003918:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	2bff      	cmp	r3, #255	; 0xff
 800391e:	d802      	bhi.n	8003926 <HAL_GPIO_Init+0xfe>
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	e002      	b.n	800392c <HAL_GPIO_Init+0x104>
 8003926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003928:	3b08      	subs	r3, #8
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	210f      	movs	r1, #15
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	fa01 f303 	lsl.w	r3, r1, r3
 800393a:	43db      	mvns	r3, r3
 800393c:	401a      	ands	r2, r3
 800393e:	6a39      	ldr	r1, [r7, #32]
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	fa01 f303 	lsl.w	r3, r1, r3
 8003946:	431a      	orrs	r2, r3
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 8096 	beq.w	8003a86 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800395a:	4b59      	ldr	r3, [pc, #356]	; (8003ac0 <HAL_GPIO_Init+0x298>)
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	4a58      	ldr	r2, [pc, #352]	; (8003ac0 <HAL_GPIO_Init+0x298>)
 8003960:	f043 0301 	orr.w	r3, r3, #1
 8003964:	6193      	str	r3, [r2, #24]
 8003966:	4b56      	ldr	r3, [pc, #344]	; (8003ac0 <HAL_GPIO_Init+0x298>)
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	60bb      	str	r3, [r7, #8]
 8003970:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003972:	4a54      	ldr	r2, [pc, #336]	; (8003ac4 <HAL_GPIO_Init+0x29c>)
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	089b      	lsrs	r3, r3, #2
 8003978:	3302      	adds	r3, #2
 800397a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800397e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	f003 0303 	and.w	r3, r3, #3
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	220f      	movs	r2, #15
 800398a:	fa02 f303 	lsl.w	r3, r2, r3
 800398e:	43db      	mvns	r3, r3
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	4013      	ands	r3, r2
 8003994:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a4b      	ldr	r2, [pc, #300]	; (8003ac8 <HAL_GPIO_Init+0x2a0>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d013      	beq.n	80039c6 <HAL_GPIO_Init+0x19e>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a4a      	ldr	r2, [pc, #296]	; (8003acc <HAL_GPIO_Init+0x2a4>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d00d      	beq.n	80039c2 <HAL_GPIO_Init+0x19a>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a49      	ldr	r2, [pc, #292]	; (8003ad0 <HAL_GPIO_Init+0x2a8>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d007      	beq.n	80039be <HAL_GPIO_Init+0x196>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a48      	ldr	r2, [pc, #288]	; (8003ad4 <HAL_GPIO_Init+0x2ac>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d101      	bne.n	80039ba <HAL_GPIO_Init+0x192>
 80039b6:	2303      	movs	r3, #3
 80039b8:	e006      	b.n	80039c8 <HAL_GPIO_Init+0x1a0>
 80039ba:	2304      	movs	r3, #4
 80039bc:	e004      	b.n	80039c8 <HAL_GPIO_Init+0x1a0>
 80039be:	2302      	movs	r3, #2
 80039c0:	e002      	b.n	80039c8 <HAL_GPIO_Init+0x1a0>
 80039c2:	2301      	movs	r3, #1
 80039c4:	e000      	b.n	80039c8 <HAL_GPIO_Init+0x1a0>
 80039c6:	2300      	movs	r3, #0
 80039c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ca:	f002 0203 	and.w	r2, r2, #3
 80039ce:	0092      	lsls	r2, r2, #2
 80039d0:	4093      	lsls	r3, r2
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80039d8:	493a      	ldr	r1, [pc, #232]	; (8003ac4 <HAL_GPIO_Init+0x29c>)
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	089b      	lsrs	r3, r3, #2
 80039de:	3302      	adds	r3, #2
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d006      	beq.n	8003a00 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80039f2:	4b39      	ldr	r3, [pc, #228]	; (8003ad8 <HAL_GPIO_Init+0x2b0>)
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	4938      	ldr	r1, [pc, #224]	; (8003ad8 <HAL_GPIO_Init+0x2b0>)
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	600b      	str	r3, [r1, #0]
 80039fe:	e006      	b.n	8003a0e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003a00:	4b35      	ldr	r3, [pc, #212]	; (8003ad8 <HAL_GPIO_Init+0x2b0>)
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	43db      	mvns	r3, r3
 8003a08:	4933      	ldr	r1, [pc, #204]	; (8003ad8 <HAL_GPIO_Init+0x2b0>)
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d006      	beq.n	8003a28 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003a1a:	4b2f      	ldr	r3, [pc, #188]	; (8003ad8 <HAL_GPIO_Init+0x2b0>)
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	492e      	ldr	r1, [pc, #184]	; (8003ad8 <HAL_GPIO_Init+0x2b0>)
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	604b      	str	r3, [r1, #4]
 8003a26:	e006      	b.n	8003a36 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003a28:	4b2b      	ldr	r3, [pc, #172]	; (8003ad8 <HAL_GPIO_Init+0x2b0>)
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	4929      	ldr	r1, [pc, #164]	; (8003ad8 <HAL_GPIO_Init+0x2b0>)
 8003a32:	4013      	ands	r3, r2
 8003a34:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d006      	beq.n	8003a50 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003a42:	4b25      	ldr	r3, [pc, #148]	; (8003ad8 <HAL_GPIO_Init+0x2b0>)
 8003a44:	689a      	ldr	r2, [r3, #8]
 8003a46:	4924      	ldr	r1, [pc, #144]	; (8003ad8 <HAL_GPIO_Init+0x2b0>)
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	608b      	str	r3, [r1, #8]
 8003a4e:	e006      	b.n	8003a5e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003a50:	4b21      	ldr	r3, [pc, #132]	; (8003ad8 <HAL_GPIO_Init+0x2b0>)
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	43db      	mvns	r3, r3
 8003a58:	491f      	ldr	r1, [pc, #124]	; (8003ad8 <HAL_GPIO_Init+0x2b0>)
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d006      	beq.n	8003a78 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003a6a:	4b1b      	ldr	r3, [pc, #108]	; (8003ad8 <HAL_GPIO_Init+0x2b0>)
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	491a      	ldr	r1, [pc, #104]	; (8003ad8 <HAL_GPIO_Init+0x2b0>)
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	60cb      	str	r3, [r1, #12]
 8003a76:	e006      	b.n	8003a86 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003a78:	4b17      	ldr	r3, [pc, #92]	; (8003ad8 <HAL_GPIO_Init+0x2b0>)
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	4915      	ldr	r1, [pc, #84]	; (8003ad8 <HAL_GPIO_Init+0x2b0>)
 8003a82:	4013      	ands	r3, r2
 8003a84:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	3301      	adds	r3, #1
 8003a8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a92:	fa22 f303 	lsr.w	r3, r2, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f47f aed0 	bne.w	800383c <HAL_GPIO_Init+0x14>
  }
}
 8003a9c:	bf00      	nop
 8003a9e:	372c      	adds	r7, #44	; 0x2c
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bc80      	pop	{r7}
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	10210000 	.word	0x10210000
 8003aac:	10110000 	.word	0x10110000
 8003ab0:	10120000 	.word	0x10120000
 8003ab4:	10310000 	.word	0x10310000
 8003ab8:	10320000 	.word	0x10320000
 8003abc:	10220000 	.word	0x10220000
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	40010000 	.word	0x40010000
 8003ac8:	40010800 	.word	0x40010800
 8003acc:	40010c00 	.word	0x40010c00
 8003ad0:	40011000 	.word	0x40011000
 8003ad4:	40011400 	.word	0x40011400
 8003ad8:	40010400 	.word	0x40010400

08003adc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	887b      	ldrh	r3, [r7, #2]
 8003aee:	4013      	ands	r3, r2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d002      	beq.n	8003afa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003af4:	2301      	movs	r3, #1
 8003af6:	73fb      	strb	r3, [r7, #15]
 8003af8:	e001      	b.n	8003afe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003afa:	2300      	movs	r3, #0
 8003afc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bc80      	pop	{r7}
 8003b08:	4770      	bx	lr

08003b0a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
 8003b12:	460b      	mov	r3, r1
 8003b14:	807b      	strh	r3, [r7, #2]
 8003b16:	4613      	mov	r3, r2
 8003b18:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b1a:	787b      	ldrb	r3, [r7, #1]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b20:	887a      	ldrh	r2, [r7, #2]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003b26:	e003      	b.n	8003b30 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003b28:	887b      	ldrh	r3, [r7, #2]
 8003b2a:	041a      	lsls	r2, r3, #16
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	611a      	str	r2, [r3, #16]
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bc80      	pop	{r7}
 8003b38:	4770      	bx	lr
	...

08003b3c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003b40:	4b03      	ldr	r3, [pc, #12]	; (8003b50 <HAL_PWR_EnableBkUpAccess+0x14>)
 8003b42:	2201      	movs	r2, #1
 8003b44:	601a      	str	r2, [r3, #0]
}
 8003b46:	bf00      	nop
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bc80      	pop	{r7}
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	420e0020 	.word	0x420e0020

08003b54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e26c      	b.n	8004040 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 8087 	beq.w	8003c82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b74:	4b92      	ldr	r3, [pc, #584]	; (8003dc0 <HAL_RCC_OscConfig+0x26c>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f003 030c 	and.w	r3, r3, #12
 8003b7c:	2b04      	cmp	r3, #4
 8003b7e:	d00c      	beq.n	8003b9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b80:	4b8f      	ldr	r3, [pc, #572]	; (8003dc0 <HAL_RCC_OscConfig+0x26c>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f003 030c 	and.w	r3, r3, #12
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	d112      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x5e>
 8003b8c:	4b8c      	ldr	r3, [pc, #560]	; (8003dc0 <HAL_RCC_OscConfig+0x26c>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b98:	d10b      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b9a:	4b89      	ldr	r3, [pc, #548]	; (8003dc0 <HAL_RCC_OscConfig+0x26c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d06c      	beq.n	8003c80 <HAL_RCC_OscConfig+0x12c>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d168      	bne.n	8003c80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e246      	b.n	8004040 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bba:	d106      	bne.n	8003bca <HAL_RCC_OscConfig+0x76>
 8003bbc:	4b80      	ldr	r3, [pc, #512]	; (8003dc0 <HAL_RCC_OscConfig+0x26c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a7f      	ldr	r2, [pc, #508]	; (8003dc0 <HAL_RCC_OscConfig+0x26c>)
 8003bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc6:	6013      	str	r3, [r2, #0]
 8003bc8:	e02e      	b.n	8003c28 <HAL_RCC_OscConfig+0xd4>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10c      	bne.n	8003bec <HAL_RCC_OscConfig+0x98>
 8003bd2:	4b7b      	ldr	r3, [pc, #492]	; (8003dc0 <HAL_RCC_OscConfig+0x26c>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a7a      	ldr	r2, [pc, #488]	; (8003dc0 <HAL_RCC_OscConfig+0x26c>)
 8003bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	4b78      	ldr	r3, [pc, #480]	; (8003dc0 <HAL_RCC_OscConfig+0x26c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a77      	ldr	r2, [pc, #476]	; (8003dc0 <HAL_RCC_OscConfig+0x26c>)
 8003be4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	e01d      	b.n	8003c28 <HAL_RCC_OscConfig+0xd4>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf4:	d10c      	bne.n	8003c10 <HAL_RCC_OscConfig+0xbc>
 8003bf6:	4b72      	ldr	r3, [pc, #456]	; (8003dc0 <HAL_RCC_OscConfig+0x26c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a71      	ldr	r2, [pc, #452]	; (8003dc0 <HAL_RCC_OscConfig+0x26c>)
 8003bfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	4b6f      	ldr	r3, [pc, #444]	; (8003dc0 <HAL_RCC_OscConfig+0x26c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a6e      	ldr	r2, [pc, #440]	; (8003dc0 <HAL_RCC_OscConfig+0x26c>)
 8003c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	e00b      	b.n	8003c28 <HAL_RCC_OscConfig+0xd4>
 8003c10:	4b6b      	ldr	r3, [pc, #428]	; (8003dc0 <HAL_RCC_OscConfig+0x26c>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a6a      	ldr	r2, [pc, #424]	; (8003dc0 <HAL_RCC_OscConfig+0x26c>)
 8003c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c1a:	6013      	str	r3, [r2, #0]
 8003c1c:	4b68      	ldr	r3, [pc, #416]	; (8003dc0 <HAL_RCC_OscConfig+0x26c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a67      	ldr	r2, [pc, #412]	; (8003dc0 <HAL_RCC_OscConfig+0x26c>)
 8003c22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d013      	beq.n	8003c58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c30:	f7ff fb82 	bl	8003338 <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c38:	f7ff fb7e 	bl	8003338 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b64      	cmp	r3, #100	; 0x64
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e1fa      	b.n	8004040 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4a:	4b5d      	ldr	r3, [pc, #372]	; (8003dc0 <HAL_RCC_OscConfig+0x26c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d0f0      	beq.n	8003c38 <HAL_RCC_OscConfig+0xe4>
 8003c56:	e014      	b.n	8003c82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c58:	f7ff fb6e 	bl	8003338 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c60:	f7ff fb6a 	bl	8003338 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b64      	cmp	r3, #100	; 0x64
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e1e6      	b.n	8004040 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c72:	4b53      	ldr	r3, [pc, #332]	; (8003dc0 <HAL_RCC_OscConfig+0x26c>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1f0      	bne.n	8003c60 <HAL_RCC_OscConfig+0x10c>
 8003c7e:	e000      	b.n	8003c82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d063      	beq.n	8003d56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c8e:	4b4c      	ldr	r3, [pc, #304]	; (8003dc0 <HAL_RCC_OscConfig+0x26c>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f003 030c 	and.w	r3, r3, #12
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00b      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c9a:	4b49      	ldr	r3, [pc, #292]	; (8003dc0 <HAL_RCC_OscConfig+0x26c>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f003 030c 	and.w	r3, r3, #12
 8003ca2:	2b08      	cmp	r3, #8
 8003ca4:	d11c      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x18c>
 8003ca6:	4b46      	ldr	r3, [pc, #280]	; (8003dc0 <HAL_RCC_OscConfig+0x26c>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d116      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cb2:	4b43      	ldr	r3, [pc, #268]	; (8003dc0 <HAL_RCC_OscConfig+0x26c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d005      	beq.n	8003cca <HAL_RCC_OscConfig+0x176>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d001      	beq.n	8003cca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e1ba      	b.n	8004040 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cca:	4b3d      	ldr	r3, [pc, #244]	; (8003dc0 <HAL_RCC_OscConfig+0x26c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	4939      	ldr	r1, [pc, #228]	; (8003dc0 <HAL_RCC_OscConfig+0x26c>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cde:	e03a      	b.n	8003d56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d020      	beq.n	8003d2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ce8:	4b36      	ldr	r3, [pc, #216]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003cea:	2201      	movs	r2, #1
 8003cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cee:	f7ff fb23 	bl	8003338 <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf4:	e008      	b.n	8003d08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cf6:	f7ff fb1f 	bl	8003338 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e19b      	b.n	8004040 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d08:	4b2d      	ldr	r3, [pc, #180]	; (8003dc0 <HAL_RCC_OscConfig+0x26c>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0f0      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d14:	4b2a      	ldr	r3, [pc, #168]	; (8003dc0 <HAL_RCC_OscConfig+0x26c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	4927      	ldr	r1, [pc, #156]	; (8003dc0 <HAL_RCC_OscConfig+0x26c>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	600b      	str	r3, [r1, #0]
 8003d28:	e015      	b.n	8003d56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d2a:	4b26      	ldr	r3, [pc, #152]	; (8003dc4 <HAL_RCC_OscConfig+0x270>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d30:	f7ff fb02 	bl	8003338 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d38:	f7ff fafe 	bl	8003338 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e17a      	b.n	8004040 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d4a:	4b1d      	ldr	r3, [pc, #116]	; (8003dc0 <HAL_RCC_OscConfig+0x26c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f0      	bne.n	8003d38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d03a      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d019      	beq.n	8003d9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d6a:	4b17      	ldr	r3, [pc, #92]	; (8003dc8 <HAL_RCC_OscConfig+0x274>)
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d70:	f7ff fae2 	bl	8003338 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d78:	f7ff fade 	bl	8003338 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e15a      	b.n	8004040 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d8a:	4b0d      	ldr	r3, [pc, #52]	; (8003dc0 <HAL_RCC_OscConfig+0x26c>)
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f0      	beq.n	8003d78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d96:	2001      	movs	r0, #1
 8003d98:	f000 fada 	bl	8004350 <RCC_Delay>
 8003d9c:	e01c      	b.n	8003dd8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d9e:	4b0a      	ldr	r3, [pc, #40]	; (8003dc8 <HAL_RCC_OscConfig+0x274>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003da4:	f7ff fac8 	bl	8003338 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003daa:	e00f      	b.n	8003dcc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dac:	f7ff fac4 	bl	8003338 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d908      	bls.n	8003dcc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e140      	b.n	8004040 <HAL_RCC_OscConfig+0x4ec>
 8003dbe:	bf00      	nop
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	42420000 	.word	0x42420000
 8003dc8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dcc:	4b9e      	ldr	r3, [pc, #632]	; (8004048 <HAL_RCC_OscConfig+0x4f4>)
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1e9      	bne.n	8003dac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 80a6 	beq.w	8003f32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003de6:	2300      	movs	r3, #0
 8003de8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dea:	4b97      	ldr	r3, [pc, #604]	; (8004048 <HAL_RCC_OscConfig+0x4f4>)
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10d      	bne.n	8003e12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003df6:	4b94      	ldr	r3, [pc, #592]	; (8004048 <HAL_RCC_OscConfig+0x4f4>)
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	4a93      	ldr	r2, [pc, #588]	; (8004048 <HAL_RCC_OscConfig+0x4f4>)
 8003dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e00:	61d3      	str	r3, [r2, #28]
 8003e02:	4b91      	ldr	r3, [pc, #580]	; (8004048 <HAL_RCC_OscConfig+0x4f4>)
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0a:	60bb      	str	r3, [r7, #8]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e12:	4b8e      	ldr	r3, [pc, #568]	; (800404c <HAL_RCC_OscConfig+0x4f8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d118      	bne.n	8003e50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e1e:	4b8b      	ldr	r3, [pc, #556]	; (800404c <HAL_RCC_OscConfig+0x4f8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a8a      	ldr	r2, [pc, #552]	; (800404c <HAL_RCC_OscConfig+0x4f8>)
 8003e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e2a:	f7ff fa85 	bl	8003338 <HAL_GetTick>
 8003e2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e30:	e008      	b.n	8003e44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e32:	f7ff fa81 	bl	8003338 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b64      	cmp	r3, #100	; 0x64
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e0fd      	b.n	8004040 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e44:	4b81      	ldr	r3, [pc, #516]	; (800404c <HAL_RCC_OscConfig+0x4f8>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0f0      	beq.n	8003e32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d106      	bne.n	8003e66 <HAL_RCC_OscConfig+0x312>
 8003e58:	4b7b      	ldr	r3, [pc, #492]	; (8004048 <HAL_RCC_OscConfig+0x4f4>)
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	4a7a      	ldr	r2, [pc, #488]	; (8004048 <HAL_RCC_OscConfig+0x4f4>)
 8003e5e:	f043 0301 	orr.w	r3, r3, #1
 8003e62:	6213      	str	r3, [r2, #32]
 8003e64:	e02d      	b.n	8003ec2 <HAL_RCC_OscConfig+0x36e>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10c      	bne.n	8003e88 <HAL_RCC_OscConfig+0x334>
 8003e6e:	4b76      	ldr	r3, [pc, #472]	; (8004048 <HAL_RCC_OscConfig+0x4f4>)
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	4a75      	ldr	r2, [pc, #468]	; (8004048 <HAL_RCC_OscConfig+0x4f4>)
 8003e74:	f023 0301 	bic.w	r3, r3, #1
 8003e78:	6213      	str	r3, [r2, #32]
 8003e7a:	4b73      	ldr	r3, [pc, #460]	; (8004048 <HAL_RCC_OscConfig+0x4f4>)
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	4a72      	ldr	r2, [pc, #456]	; (8004048 <HAL_RCC_OscConfig+0x4f4>)
 8003e80:	f023 0304 	bic.w	r3, r3, #4
 8003e84:	6213      	str	r3, [r2, #32]
 8003e86:	e01c      	b.n	8003ec2 <HAL_RCC_OscConfig+0x36e>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	2b05      	cmp	r3, #5
 8003e8e:	d10c      	bne.n	8003eaa <HAL_RCC_OscConfig+0x356>
 8003e90:	4b6d      	ldr	r3, [pc, #436]	; (8004048 <HAL_RCC_OscConfig+0x4f4>)
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	4a6c      	ldr	r2, [pc, #432]	; (8004048 <HAL_RCC_OscConfig+0x4f4>)
 8003e96:	f043 0304 	orr.w	r3, r3, #4
 8003e9a:	6213      	str	r3, [r2, #32]
 8003e9c:	4b6a      	ldr	r3, [pc, #424]	; (8004048 <HAL_RCC_OscConfig+0x4f4>)
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	4a69      	ldr	r2, [pc, #420]	; (8004048 <HAL_RCC_OscConfig+0x4f4>)
 8003ea2:	f043 0301 	orr.w	r3, r3, #1
 8003ea6:	6213      	str	r3, [r2, #32]
 8003ea8:	e00b      	b.n	8003ec2 <HAL_RCC_OscConfig+0x36e>
 8003eaa:	4b67      	ldr	r3, [pc, #412]	; (8004048 <HAL_RCC_OscConfig+0x4f4>)
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	4a66      	ldr	r2, [pc, #408]	; (8004048 <HAL_RCC_OscConfig+0x4f4>)
 8003eb0:	f023 0301 	bic.w	r3, r3, #1
 8003eb4:	6213      	str	r3, [r2, #32]
 8003eb6:	4b64      	ldr	r3, [pc, #400]	; (8004048 <HAL_RCC_OscConfig+0x4f4>)
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	4a63      	ldr	r2, [pc, #396]	; (8004048 <HAL_RCC_OscConfig+0x4f4>)
 8003ebc:	f023 0304 	bic.w	r3, r3, #4
 8003ec0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d015      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eca:	f7ff fa35 	bl	8003338 <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed0:	e00a      	b.n	8003ee8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ed2:	f7ff fa31 	bl	8003338 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d901      	bls.n	8003ee8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e0ab      	b.n	8004040 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee8:	4b57      	ldr	r3, [pc, #348]	; (8004048 <HAL_RCC_OscConfig+0x4f4>)
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d0ee      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x37e>
 8003ef4:	e014      	b.n	8003f20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ef6:	f7ff fa1f 	bl	8003338 <HAL_GetTick>
 8003efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003efc:	e00a      	b.n	8003f14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003efe:	f7ff fa1b 	bl	8003338 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e095      	b.n	8004040 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f14:	4b4c      	ldr	r3, [pc, #304]	; (8004048 <HAL_RCC_OscConfig+0x4f4>)
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1ee      	bne.n	8003efe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f20:	7dfb      	ldrb	r3, [r7, #23]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d105      	bne.n	8003f32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f26:	4b48      	ldr	r3, [pc, #288]	; (8004048 <HAL_RCC_OscConfig+0x4f4>)
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	4a47      	ldr	r2, [pc, #284]	; (8004048 <HAL_RCC_OscConfig+0x4f4>)
 8003f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 8081 	beq.w	800403e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f3c:	4b42      	ldr	r3, [pc, #264]	; (8004048 <HAL_RCC_OscConfig+0x4f4>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f003 030c 	and.w	r3, r3, #12
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d061      	beq.n	800400c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	69db      	ldr	r3, [r3, #28]
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d146      	bne.n	8003fde <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f50:	4b3f      	ldr	r3, [pc, #252]	; (8004050 <HAL_RCC_OscConfig+0x4fc>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f56:	f7ff f9ef 	bl	8003338 <HAL_GetTick>
 8003f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f5c:	e008      	b.n	8003f70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f5e:	f7ff f9eb 	bl	8003338 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e067      	b.n	8004040 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f70:	4b35      	ldr	r3, [pc, #212]	; (8004048 <HAL_RCC_OscConfig+0x4f4>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1f0      	bne.n	8003f5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f84:	d108      	bne.n	8003f98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f86:	4b30      	ldr	r3, [pc, #192]	; (8004048 <HAL_RCC_OscConfig+0x4f4>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	492d      	ldr	r1, [pc, #180]	; (8004048 <HAL_RCC_OscConfig+0x4f4>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f98:	4b2b      	ldr	r3, [pc, #172]	; (8004048 <HAL_RCC_OscConfig+0x4f4>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a19      	ldr	r1, [r3, #32]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	430b      	orrs	r3, r1
 8003faa:	4927      	ldr	r1, [pc, #156]	; (8004048 <HAL_RCC_OscConfig+0x4f4>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fb0:	4b27      	ldr	r3, [pc, #156]	; (8004050 <HAL_RCC_OscConfig+0x4fc>)
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb6:	f7ff f9bf 	bl	8003338 <HAL_GetTick>
 8003fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fbc:	e008      	b.n	8003fd0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fbe:	f7ff f9bb 	bl	8003338 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e037      	b.n	8004040 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fd0:	4b1d      	ldr	r3, [pc, #116]	; (8004048 <HAL_RCC_OscConfig+0x4f4>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d0f0      	beq.n	8003fbe <HAL_RCC_OscConfig+0x46a>
 8003fdc:	e02f      	b.n	800403e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fde:	4b1c      	ldr	r3, [pc, #112]	; (8004050 <HAL_RCC_OscConfig+0x4fc>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe4:	f7ff f9a8 	bl	8003338 <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fec:	f7ff f9a4 	bl	8003338 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e020      	b.n	8004040 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ffe:	4b12      	ldr	r3, [pc, #72]	; (8004048 <HAL_RCC_OscConfig+0x4f4>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1f0      	bne.n	8003fec <HAL_RCC_OscConfig+0x498>
 800400a:	e018      	b.n	800403e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d101      	bne.n	8004018 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e013      	b.n	8004040 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004018:	4b0b      	ldr	r3, [pc, #44]	; (8004048 <HAL_RCC_OscConfig+0x4f4>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	429a      	cmp	r2, r3
 800402a:	d106      	bne.n	800403a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004036:	429a      	cmp	r2, r3
 8004038:	d001      	beq.n	800403e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e000      	b.n	8004040 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3718      	adds	r7, #24
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	40021000 	.word	0x40021000
 800404c:	40007000 	.word	0x40007000
 8004050:	42420060 	.word	0x42420060

08004054 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e0d0      	b.n	800420a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004068:	4b6a      	ldr	r3, [pc, #424]	; (8004214 <HAL_RCC_ClockConfig+0x1c0>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	429a      	cmp	r2, r3
 8004074:	d910      	bls.n	8004098 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004076:	4b67      	ldr	r3, [pc, #412]	; (8004214 <HAL_RCC_ClockConfig+0x1c0>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f023 0207 	bic.w	r2, r3, #7
 800407e:	4965      	ldr	r1, [pc, #404]	; (8004214 <HAL_RCC_ClockConfig+0x1c0>)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	4313      	orrs	r3, r2
 8004084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004086:	4b63      	ldr	r3, [pc, #396]	; (8004214 <HAL_RCC_ClockConfig+0x1c0>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0307 	and.w	r3, r3, #7
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	429a      	cmp	r2, r3
 8004092:	d001      	beq.n	8004098 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e0b8      	b.n	800420a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d020      	beq.n	80040e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d005      	beq.n	80040bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040b0:	4b59      	ldr	r3, [pc, #356]	; (8004218 <HAL_RCC_ClockConfig+0x1c4>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	4a58      	ldr	r2, [pc, #352]	; (8004218 <HAL_RCC_ClockConfig+0x1c4>)
 80040b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80040ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0308 	and.w	r3, r3, #8
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d005      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040c8:	4b53      	ldr	r3, [pc, #332]	; (8004218 <HAL_RCC_ClockConfig+0x1c4>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	4a52      	ldr	r2, [pc, #328]	; (8004218 <HAL_RCC_ClockConfig+0x1c4>)
 80040ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80040d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040d4:	4b50      	ldr	r3, [pc, #320]	; (8004218 <HAL_RCC_ClockConfig+0x1c4>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	494d      	ldr	r1, [pc, #308]	; (8004218 <HAL_RCC_ClockConfig+0x1c4>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d040      	beq.n	8004174 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d107      	bne.n	800410a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040fa:	4b47      	ldr	r3, [pc, #284]	; (8004218 <HAL_RCC_ClockConfig+0x1c4>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d115      	bne.n	8004132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e07f      	b.n	800420a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2b02      	cmp	r3, #2
 8004110:	d107      	bne.n	8004122 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004112:	4b41      	ldr	r3, [pc, #260]	; (8004218 <HAL_RCC_ClockConfig+0x1c4>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d109      	bne.n	8004132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e073      	b.n	800420a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004122:	4b3d      	ldr	r3, [pc, #244]	; (8004218 <HAL_RCC_ClockConfig+0x1c4>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e06b      	b.n	800420a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004132:	4b39      	ldr	r3, [pc, #228]	; (8004218 <HAL_RCC_ClockConfig+0x1c4>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f023 0203 	bic.w	r2, r3, #3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	4936      	ldr	r1, [pc, #216]	; (8004218 <HAL_RCC_ClockConfig+0x1c4>)
 8004140:	4313      	orrs	r3, r2
 8004142:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004144:	f7ff f8f8 	bl	8003338 <HAL_GetTick>
 8004148:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800414a:	e00a      	b.n	8004162 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800414c:	f7ff f8f4 	bl	8003338 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	f241 3288 	movw	r2, #5000	; 0x1388
 800415a:	4293      	cmp	r3, r2
 800415c:	d901      	bls.n	8004162 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e053      	b.n	800420a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004162:	4b2d      	ldr	r3, [pc, #180]	; (8004218 <HAL_RCC_ClockConfig+0x1c4>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f003 020c 	and.w	r2, r3, #12
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	429a      	cmp	r2, r3
 8004172:	d1eb      	bne.n	800414c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004174:	4b27      	ldr	r3, [pc, #156]	; (8004214 <HAL_RCC_ClockConfig+0x1c0>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0307 	and.w	r3, r3, #7
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	429a      	cmp	r2, r3
 8004180:	d210      	bcs.n	80041a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004182:	4b24      	ldr	r3, [pc, #144]	; (8004214 <HAL_RCC_ClockConfig+0x1c0>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f023 0207 	bic.w	r2, r3, #7
 800418a:	4922      	ldr	r1, [pc, #136]	; (8004214 <HAL_RCC_ClockConfig+0x1c0>)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	4313      	orrs	r3, r2
 8004190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004192:	4b20      	ldr	r3, [pc, #128]	; (8004214 <HAL_RCC_ClockConfig+0x1c0>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0307 	and.w	r3, r3, #7
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	429a      	cmp	r2, r3
 800419e:	d001      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e032      	b.n	800420a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d008      	beq.n	80041c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041b0:	4b19      	ldr	r3, [pc, #100]	; (8004218 <HAL_RCC_ClockConfig+0x1c4>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	4916      	ldr	r1, [pc, #88]	; (8004218 <HAL_RCC_ClockConfig+0x1c4>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d009      	beq.n	80041e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041ce:	4b12      	ldr	r3, [pc, #72]	; (8004218 <HAL_RCC_ClockConfig+0x1c4>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	490e      	ldr	r1, [pc, #56]	; (8004218 <HAL_RCC_ClockConfig+0x1c4>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041e2:	f000 f821 	bl	8004228 <HAL_RCC_GetSysClockFreq>
 80041e6:	4601      	mov	r1, r0
 80041e8:	4b0b      	ldr	r3, [pc, #44]	; (8004218 <HAL_RCC_ClockConfig+0x1c4>)
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	091b      	lsrs	r3, r3, #4
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	4a0a      	ldr	r2, [pc, #40]	; (800421c <HAL_RCC_ClockConfig+0x1c8>)
 80041f4:	5cd3      	ldrb	r3, [r2, r3]
 80041f6:	fa21 f303 	lsr.w	r3, r1, r3
 80041fa:	4a09      	ldr	r2, [pc, #36]	; (8004220 <HAL_RCC_ClockConfig+0x1cc>)
 80041fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041fe:	4b09      	ldr	r3, [pc, #36]	; (8004224 <HAL_RCC_ClockConfig+0x1d0>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff f856 	bl	80032b4 <HAL_InitTick>

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	40022000 	.word	0x40022000
 8004218:	40021000 	.word	0x40021000
 800421c:	08009058 	.word	0x08009058
 8004220:	20000008 	.word	0x20000008
 8004224:	2000000c 	.word	0x2000000c

08004228 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004228:	b490      	push	{r4, r7}
 800422a:	b08a      	sub	sp, #40	; 0x28
 800422c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800422e:	4b2a      	ldr	r3, [pc, #168]	; (80042d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004230:	1d3c      	adds	r4, r7, #4
 8004232:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004234:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004238:	4b28      	ldr	r3, [pc, #160]	; (80042dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800423a:	881b      	ldrh	r3, [r3, #0]
 800423c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800423e:	2300      	movs	r3, #0
 8004240:	61fb      	str	r3, [r7, #28]
 8004242:	2300      	movs	r3, #0
 8004244:	61bb      	str	r3, [r7, #24]
 8004246:	2300      	movs	r3, #0
 8004248:	627b      	str	r3, [r7, #36]	; 0x24
 800424a:	2300      	movs	r3, #0
 800424c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800424e:	2300      	movs	r3, #0
 8004250:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004252:	4b23      	ldr	r3, [pc, #140]	; (80042e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	f003 030c 	and.w	r3, r3, #12
 800425e:	2b04      	cmp	r3, #4
 8004260:	d002      	beq.n	8004268 <HAL_RCC_GetSysClockFreq+0x40>
 8004262:	2b08      	cmp	r3, #8
 8004264:	d003      	beq.n	800426e <HAL_RCC_GetSysClockFreq+0x46>
 8004266:	e02d      	b.n	80042c4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004268:	4b1e      	ldr	r3, [pc, #120]	; (80042e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800426a:	623b      	str	r3, [r7, #32]
      break;
 800426c:	e02d      	b.n	80042ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	0c9b      	lsrs	r3, r3, #18
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800427a:	4413      	add	r3, r2
 800427c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004280:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d013      	beq.n	80042b4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800428c:	4b14      	ldr	r3, [pc, #80]	; (80042e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	0c5b      	lsrs	r3, r3, #17
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800429a:	4413      	add	r3, r2
 800429c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80042a0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	4a0f      	ldr	r2, [pc, #60]	; (80042e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80042a6:	fb02 f203 	mul.w	r2, r2, r3
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b0:	627b      	str	r3, [r7, #36]	; 0x24
 80042b2:	e004      	b.n	80042be <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	4a0c      	ldr	r2, [pc, #48]	; (80042e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80042b8:	fb02 f303 	mul.w	r3, r2, r3
 80042bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c0:	623b      	str	r3, [r7, #32]
      break;
 80042c2:	e002      	b.n	80042ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80042c4:	4b07      	ldr	r3, [pc, #28]	; (80042e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80042c6:	623b      	str	r3, [r7, #32]
      break;
 80042c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042ca:	6a3b      	ldr	r3, [r7, #32]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3728      	adds	r7, #40	; 0x28
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bc90      	pop	{r4, r7}
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	08005bf0 	.word	0x08005bf0
 80042dc:	08005c00 	.word	0x08005c00
 80042e0:	40021000 	.word	0x40021000
 80042e4:	007a1200 	.word	0x007a1200
 80042e8:	003d0900 	.word	0x003d0900

080042ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042f0:	4b02      	ldr	r3, [pc, #8]	; (80042fc <HAL_RCC_GetHCLKFreq+0x10>)
 80042f2:	681b      	ldr	r3, [r3, #0]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bc80      	pop	{r7}
 80042fa:	4770      	bx	lr
 80042fc:	20000008 	.word	0x20000008

08004300 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004304:	f7ff fff2 	bl	80042ec <HAL_RCC_GetHCLKFreq>
 8004308:	4601      	mov	r1, r0
 800430a:	4b05      	ldr	r3, [pc, #20]	; (8004320 <HAL_RCC_GetPCLK1Freq+0x20>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	0a1b      	lsrs	r3, r3, #8
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	4a03      	ldr	r2, [pc, #12]	; (8004324 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004316:	5cd3      	ldrb	r3, [r2, r3]
 8004318:	fa21 f303 	lsr.w	r3, r1, r3
}
 800431c:	4618      	mov	r0, r3
 800431e:	bd80      	pop	{r7, pc}
 8004320:	40021000 	.word	0x40021000
 8004324:	08009068 	.word	0x08009068

08004328 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800432c:	f7ff ffde 	bl	80042ec <HAL_RCC_GetHCLKFreq>
 8004330:	4601      	mov	r1, r0
 8004332:	4b05      	ldr	r3, [pc, #20]	; (8004348 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	0adb      	lsrs	r3, r3, #11
 8004338:	f003 0307 	and.w	r3, r3, #7
 800433c:	4a03      	ldr	r2, [pc, #12]	; (800434c <HAL_RCC_GetPCLK2Freq+0x24>)
 800433e:	5cd3      	ldrb	r3, [r2, r3]
 8004340:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004344:	4618      	mov	r0, r3
 8004346:	bd80      	pop	{r7, pc}
 8004348:	40021000 	.word	0x40021000
 800434c:	08009068 	.word	0x08009068

08004350 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004358:	4b0a      	ldr	r3, [pc, #40]	; (8004384 <RCC_Delay+0x34>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a0a      	ldr	r2, [pc, #40]	; (8004388 <RCC_Delay+0x38>)
 800435e:	fba2 2303 	umull	r2, r3, r2, r3
 8004362:	0a5b      	lsrs	r3, r3, #9
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	fb02 f303 	mul.w	r3, r2, r3
 800436a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800436c:	bf00      	nop
  }
  while (Delay --);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	1e5a      	subs	r2, r3, #1
 8004372:	60fa      	str	r2, [r7, #12]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1f9      	bne.n	800436c <RCC_Delay+0x1c>
}
 8004378:	bf00      	nop
 800437a:	3714      	adds	r7, #20
 800437c:	46bd      	mov	sp, r7
 800437e:	bc80      	pop	{r7}
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	20000008 	.word	0x20000008
 8004388:	10624dd3 	.word	0x10624dd3

0800438c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	613b      	str	r3, [r7, #16]
 8004398:	2300      	movs	r3, #0
 800439a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d07d      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80043a8:	2300      	movs	r3, #0
 80043aa:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ac:	4b4f      	ldr	r3, [pc, #316]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ae:	69db      	ldr	r3, [r3, #28]
 80043b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10d      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043b8:	4b4c      	ldr	r3, [pc, #304]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	4a4b      	ldr	r2, [pc, #300]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043c2:	61d3      	str	r3, [r2, #28]
 80043c4:	4b49      	ldr	r3, [pc, #292]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043c6:	69db      	ldr	r3, [r3, #28]
 80043c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043cc:	60bb      	str	r3, [r7, #8]
 80043ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043d0:	2301      	movs	r3, #1
 80043d2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d4:	4b46      	ldr	r3, [pc, #280]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d118      	bne.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043e0:	4b43      	ldr	r3, [pc, #268]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a42      	ldr	r2, [pc, #264]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ec:	f7fe ffa4 	bl	8003338 <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f2:	e008      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043f4:	f7fe ffa0 	bl	8003338 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b64      	cmp	r3, #100	; 0x64
 8004400:	d901      	bls.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e06d      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004406:	4b3a      	ldr	r3, [pc, #232]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0f0      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004412:	4b36      	ldr	r3, [pc, #216]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800441a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d02e      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	429a      	cmp	r2, r3
 800442e:	d027      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004430:	4b2e      	ldr	r3, [pc, #184]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004438:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800443a:	4b2e      	ldr	r3, [pc, #184]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800443c:	2201      	movs	r2, #1
 800443e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004440:	4b2c      	ldr	r3, [pc, #176]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004442:	2200      	movs	r2, #0
 8004444:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004446:	4a29      	ldr	r2, [pc, #164]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d014      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004456:	f7fe ff6f 	bl	8003338 <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800445c:	e00a      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800445e:	f7fe ff6b 	bl	8003338 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	f241 3288 	movw	r2, #5000	; 0x1388
 800446c:	4293      	cmp	r3, r2
 800446e:	d901      	bls.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e036      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004474:	4b1d      	ldr	r3, [pc, #116]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d0ee      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004480:	4b1a      	ldr	r3, [pc, #104]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	4917      	ldr	r1, [pc, #92]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800448e:	4313      	orrs	r3, r2
 8004490:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004492:	7dfb      	ldrb	r3, [r7, #23]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d105      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004498:	4b14      	ldr	r3, [pc, #80]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800449a:	69db      	ldr	r3, [r3, #28]
 800449c:	4a13      	ldr	r2, [pc, #76]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800449e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d008      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044b0:	4b0e      	ldr	r3, [pc, #56]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	490b      	ldr	r1, [pc, #44]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0310 	and.w	r3, r3, #16
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d008      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044ce:	4b07      	ldr	r3, [pc, #28]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	4904      	ldr	r1, [pc, #16]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3718      	adds	r7, #24
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	40021000 	.word	0x40021000
 80044f0:	40007000 	.word	0x40007000
 80044f4:	42420440 	.word	0x42420440

080044f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80044f8:	b590      	push	{r4, r7, lr}
 80044fa:	b08d      	sub	sp, #52	; 0x34
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004500:	4b55      	ldr	r3, [pc, #340]	; (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004502:	f107 040c 	add.w	r4, r7, #12
 8004506:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004508:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800450c:	4b53      	ldr	r3, [pc, #332]	; (800465c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800450e:	881b      	ldrh	r3, [r3, #0]
 8004510:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004512:	2300      	movs	r3, #0
 8004514:	627b      	str	r3, [r7, #36]	; 0x24
 8004516:	2300      	movs	r3, #0
 8004518:	62fb      	str	r3, [r7, #44]	; 0x2c
 800451a:	2300      	movs	r3, #0
 800451c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800451e:	2300      	movs	r3, #0
 8004520:	61fb      	str	r3, [r7, #28]
 8004522:	2300      	movs	r3, #0
 8004524:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b02      	cmp	r3, #2
 800452a:	d07f      	beq.n	800462c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800452c:	2b10      	cmp	r3, #16
 800452e:	d002      	beq.n	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8004530:	2b01      	cmp	r3, #1
 8004532:	d048      	beq.n	80045c6 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004534:	e08b      	b.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8004536:	4b4a      	ldr	r3, [pc, #296]	; (8004660 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800453c:	4b48      	ldr	r3, [pc, #288]	; (8004660 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d07f      	beq.n	8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	0c9b      	lsrs	r3, r3, #18
 800454c:	f003 030f 	and.w	r3, r3, #15
 8004550:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004554:	4413      	add	r3, r2
 8004556:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800455a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d018      	beq.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004566:	4b3e      	ldr	r3, [pc, #248]	; (8004660 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	0c5b      	lsrs	r3, r3, #17
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004574:	4413      	add	r3, r2
 8004576:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800457a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00d      	beq.n	80045a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004586:	4a37      	ldr	r2, [pc, #220]	; (8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	fbb2 f2f3 	udiv	r2, r2, r3
 800458e:	6a3b      	ldr	r3, [r7, #32]
 8004590:	fb02 f303 	mul.w	r3, r2, r3
 8004594:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004596:	e004      	b.n	80045a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004598:	6a3b      	ldr	r3, [r7, #32]
 800459a:	4a33      	ldr	r2, [pc, #204]	; (8004668 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800459c:	fb02 f303 	mul.w	r3, r2, r3
 80045a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80045a2:	4b2f      	ldr	r3, [pc, #188]	; (8004660 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045ae:	d102      	bne.n	80045b6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 80045b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80045b4:	e048      	b.n	8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80045b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	4a2c      	ldr	r2, [pc, #176]	; (800466c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80045bc:	fba2 2303 	umull	r2, r3, r2, r3
 80045c0:	085b      	lsrs	r3, r3, #1
 80045c2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80045c4:	e040      	b.n	8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80045c6:	4b26      	ldr	r3, [pc, #152]	; (8004660 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045d6:	d108      	bne.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80045e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80045e8:	e01f      	b.n	800462a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045f4:	d109      	bne.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80045f6:	4b1a      	ldr	r3, [pc, #104]	; (8004660 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8004602:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004606:	62bb      	str	r3, [r7, #40]	; 0x28
 8004608:	e00f      	b.n	800462a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004610:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004614:	d11a      	bne.n	800464c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004616:	4b12      	ldr	r3, [pc, #72]	; (8004660 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d014      	beq.n	800464c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8004622:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004626:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004628:	e010      	b.n	800464c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800462a:	e00f      	b.n	800464c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800462c:	f7ff fe7c 	bl	8004328 <HAL_RCC_GetPCLK2Freq>
 8004630:	4602      	mov	r2, r0
 8004632:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	0b9b      	lsrs	r3, r3, #14
 8004638:	f003 0303 	and.w	r3, r3, #3
 800463c:	3301      	adds	r3, #1
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	fbb2 f3f3 	udiv	r3, r2, r3
 8004644:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004646:	e002      	b.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8004648:	bf00      	nop
 800464a:	e000      	b.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 800464c:	bf00      	nop
    }
  }
  return (frequency);
 800464e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004650:	4618      	mov	r0, r3
 8004652:	3734      	adds	r7, #52	; 0x34
 8004654:	46bd      	mov	sp, r7
 8004656:	bd90      	pop	{r4, r7, pc}
 8004658:	08005c04 	.word	0x08005c04
 800465c:	08005c14 	.word	0x08005c14
 8004660:	40021000 	.word	0x40021000
 8004664:	007a1200 	.word	0x007a1200
 8004668:	003d0900 	.word	0x003d0900
 800466c:	aaaaaaab 	.word	0xaaaaaaab

08004670 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e084      	b.n	8004790 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	7c5b      	ldrb	r3, [r3, #17]
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	d105      	bne.n	800469c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7fe fb50 	bl	8002d3c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f9c8 	bl	8004a38 <HAL_RTC_WaitForSynchro>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d004      	beq.n	80046b8 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2204      	movs	r2, #4
 80046b2:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e06b      	b.n	8004790 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 fa81 	bl	8004bc0 <RTC_EnterInitMode>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d004      	beq.n	80046ce <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2204      	movs	r2, #4
 80046c8:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e060      	b.n	8004790 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0207 	bic.w	r2, r2, #7
 80046dc:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d005      	beq.n	80046f2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80046e6:	4b2c      	ldr	r3, [pc, #176]	; (8004798 <HAL_RTC_Init+0x128>)
 80046e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ea:	4a2b      	ldr	r2, [pc, #172]	; (8004798 <HAL_RTC_Init+0x128>)
 80046ec:	f023 0301 	bic.w	r3, r3, #1
 80046f0:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80046f2:	4b29      	ldr	r3, [pc, #164]	; (8004798 <HAL_RTC_Init+0x128>)
 80046f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f6:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	4926      	ldr	r1, [pc, #152]	; (8004798 <HAL_RTC_Init+0x128>)
 8004700:	4313      	orrs	r3, r2
 8004702:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470c:	d003      	beq.n	8004716 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	60fb      	str	r3, [r7, #12]
 8004714:	e00e      	b.n	8004734 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8004716:	2001      	movs	r0, #1
 8004718:	f7ff feee 	bl	80044f8 <HAL_RCCEx_GetPeriphCLKFreq>
 800471c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d104      	bne.n	800472e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2204      	movs	r2, #4
 8004728:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e030      	b.n	8004790 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	3b01      	subs	r3, #1
 8004732:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f023 010f 	bic.w	r1, r3, #15
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	0c1a      	lsrs	r2, r3, #16
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	0c1b      	lsrs	r3, r3, #16
 8004752:	041b      	lsls	r3, r3, #16
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	b291      	uxth	r1, r2
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	6812      	ldr	r2, [r2, #0]
 800475c:	430b      	orrs	r3, r1
 800475e:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 fa55 	bl	8004c10 <RTC_ExitInitMode>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d004      	beq.n	8004776 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2204      	movs	r2, #4
 8004770:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e00c      	b.n	8004790 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800478e:	2300      	movs	r3, #0
  }
}
 8004790:	4618      	mov	r0, r3
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	40006c00 	.word	0x40006c00

0800479c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800479c:	b590      	push	{r4, r7, lr}
 800479e:	b087      	sub	sp, #28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	617b      	str	r3, [r7, #20]
 80047ac:	2300      	movs	r3, #0
 80047ae:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d002      	beq.n	80047bc <HAL_RTC_SetTime+0x20>
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e080      	b.n	80048c2 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	7c1b      	ldrb	r3, [r3, #16]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d101      	bne.n	80047cc <HAL_RTC_SetTime+0x30>
 80047c8:	2302      	movs	r3, #2
 80047ca:	e07a      	b.n	80048c2 <HAL_RTC_SetTime+0x126>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2201      	movs	r2, #1
 80047d0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2202      	movs	r2, #2
 80047d6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d113      	bne.n	8004806 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	461a      	mov	r2, r3
 80047e4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80047e8:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	785b      	ldrb	r3, [r3, #1]
 80047f0:	4619      	mov	r1, r3
 80047f2:	460b      	mov	r3, r1
 80047f4:	011b      	lsls	r3, r3, #4
 80047f6:	1a5b      	subs	r3, r3, r1
 80047f8:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80047fa:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004800:	4413      	add	r3, r2
 8004802:	617b      	str	r3, [r7, #20]
 8004804:	e01e      	b.n	8004844 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	4618      	mov	r0, r3
 800480c:	f000 fa28 	bl	8004c60 <RTC_Bcd2ToByte>
 8004810:	4603      	mov	r3, r0
 8004812:	461a      	mov	r2, r3
 8004814:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004818:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	785b      	ldrb	r3, [r3, #1]
 8004820:	4618      	mov	r0, r3
 8004822:	f000 fa1d 	bl	8004c60 <RTC_Bcd2ToByte>
 8004826:	4603      	mov	r3, r0
 8004828:	461a      	mov	r2, r3
 800482a:	4613      	mov	r3, r2
 800482c:	011b      	lsls	r3, r3, #4
 800482e:	1a9b      	subs	r3, r3, r2
 8004830:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004832:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	789b      	ldrb	r3, [r3, #2]
 8004838:	4618      	mov	r0, r3
 800483a:	f000 fa11 	bl	8004c60 <RTC_Bcd2ToByte>
 800483e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004840:	4423      	add	r3, r4
 8004842:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004844:	6979      	ldr	r1, [r7, #20]
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 f953 	bl	8004af2 <RTC_WriteTimeCounter>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d007      	beq.n	8004862 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2204      	movs	r2, #4
 8004856:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e02f      	b.n	80048c2 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 0205 	bic.w	r2, r2, #5
 8004870:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 f964 	bl	8004b40 <RTC_ReadAlarmCounter>
 8004878:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004880:	d018      	beq.n	80048b4 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	429a      	cmp	r2, r3
 8004888:	d214      	bcs.n	80048b4 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004890:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004894:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004896:	6939      	ldr	r1, [r7, #16]
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f000 f96a 	bl	8004b72 <RTC_WriteAlarmCounter>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d007      	beq.n	80048b4 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2204      	movs	r2, #4
 80048a8:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e006      	b.n	80048c2 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2201      	movs	r2, #1
 80048b8:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80048c0:	2300      	movs	r3, #0
  }
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	371c      	adds	r7, #28
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd90      	pop	{r4, r7, pc}
	...

080048cc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b088      	sub	sp, #32
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80048d8:	2300      	movs	r3, #0
 80048da:	61fb      	str	r3, [r7, #28]
 80048dc:	2300      	movs	r3, #0
 80048de:	61bb      	str	r3, [r7, #24]
 80048e0:	2300      	movs	r3, #0
 80048e2:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d002      	beq.n	80048f0 <HAL_RTC_SetDate+0x24>
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e097      	b.n	8004a24 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	7c1b      	ldrb	r3, [r3, #16]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d101      	bne.n	8004900 <HAL_RTC_SetDate+0x34>
 80048fc:	2302      	movs	r3, #2
 80048fe:	e091      	b.n	8004a24 <HAL_RTC_SetDate+0x158>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2201      	movs	r2, #1
 8004904:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2202      	movs	r2, #2
 800490a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10c      	bne.n	800492c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	78da      	ldrb	r2, [r3, #3]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	785a      	ldrb	r2, [r3, #1]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	789a      	ldrb	r2, [r3, #2]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	739a      	strb	r2, [r3, #14]
 800492a:	e01a      	b.n	8004962 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	78db      	ldrb	r3, [r3, #3]
 8004930:	4618      	mov	r0, r3
 8004932:	f000 f995 	bl	8004c60 <RTC_Bcd2ToByte>
 8004936:	4603      	mov	r3, r0
 8004938:	461a      	mov	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	785b      	ldrb	r3, [r3, #1]
 8004942:	4618      	mov	r0, r3
 8004944:	f000 f98c 	bl	8004c60 <RTC_Bcd2ToByte>
 8004948:	4603      	mov	r3, r0
 800494a:	461a      	mov	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	789b      	ldrb	r3, [r3, #2]
 8004954:	4618      	mov	r0, r3
 8004956:	f000 f983 	bl	8004c60 <RTC_Bcd2ToByte>
 800495a:	4603      	mov	r3, r0
 800495c:	461a      	mov	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	7bdb      	ldrb	r3, [r3, #15]
 8004966:	4618      	mov	r0, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	7b59      	ldrb	r1, [r3, #13]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	7b9b      	ldrb	r3, [r3, #14]
 8004970:	461a      	mov	r2, r3
 8004972:	f000 f993 	bl	8004c9c <RTC_WeekDayNum>
 8004976:	4603      	mov	r3, r0
 8004978:	461a      	mov	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	7b1a      	ldrb	r2, [r3, #12]
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 f883 	bl	8004a92 <RTC_ReadTimeCounter>
 800498c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	4a26      	ldr	r2, [pc, #152]	; (8004a2c <HAL_RTC_SetDate+0x160>)
 8004992:	fba2 2303 	umull	r2, r3, r2, r3
 8004996:	0adb      	lsrs	r3, r3, #11
 8004998:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	2b18      	cmp	r3, #24
 800499e:	d93a      	bls.n	8004a16 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	4a23      	ldr	r2, [pc, #140]	; (8004a30 <HAL_RTC_SetDate+0x164>)
 80049a4:	fba2 2303 	umull	r2, r3, r2, r3
 80049a8:	091b      	lsrs	r3, r3, #4
 80049aa:	4a22      	ldr	r2, [pc, #136]	; (8004a34 <HAL_RTC_SetDate+0x168>)
 80049ac:	fb02 f303 	mul.w	r3, r2, r3
 80049b0:	69fa      	ldr	r2, [r7, #28]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80049b6:	69f9      	ldr	r1, [r7, #28]
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 f89a 	bl	8004af2 <RTC_WriteTimeCounter>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d007      	beq.n	80049d4 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2204      	movs	r2, #4
 80049c8:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e027      	b.n	8004a24 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f000 f8b3 	bl	8004b40 <RTC_ReadAlarmCounter>
 80049da:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e2:	d018      	beq.n	8004a16 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d214      	bcs.n	8004a16 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80049f2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80049f6:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80049f8:	69b9      	ldr	r1, [r7, #24]
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f000 f8b9 	bl	8004b72 <RTC_WriteAlarmCounter>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d007      	beq.n	8004a16 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2204      	movs	r2, #4
 8004a0a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e006      	b.n	8004a24 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3720      	adds	r7, #32
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	91a2b3c5 	.word	0x91a2b3c5
 8004a30:	aaaaaaab 	.word	0xaaaaaaab
 8004a34:	00015180 	.word	0x00015180

08004a38 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e01d      	b.n	8004a8a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 0208 	bic.w	r2, r2, #8
 8004a5c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004a5e:	f7fe fc6b 	bl	8003338 <HAL_GetTick>
 8004a62:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004a64:	e009      	b.n	8004a7a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004a66:	f7fe fc67 	bl	8003338 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a74:	d901      	bls.n	8004a7a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e007      	b.n	8004a8a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f003 0308 	and.w	r3, r3, #8
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d0ee      	beq.n	8004a66 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b087      	sub	sp, #28
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	827b      	strh	r3, [r7, #18]
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	823b      	strh	r3, [r7, #16]
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	69db      	ldr	r3, [r3, #28]
 8004ab8:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8004ac2:	8a7a      	ldrh	r2, [r7, #18]
 8004ac4:	8a3b      	ldrh	r3, [r7, #16]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d008      	beq.n	8004adc <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004aca:	8a3b      	ldrh	r3, [r7, #16]
 8004acc:	041a      	lsls	r2, r3, #16
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	69db      	ldr	r3, [r3, #28]
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	617b      	str	r3, [r7, #20]
 8004ada:	e004      	b.n	8004ae6 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004adc:	8a7b      	ldrh	r3, [r7, #18]
 8004ade:	041a      	lsls	r2, r3, #16
 8004ae0:	89fb      	ldrh	r3, [r7, #14]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8004ae6:	697b      	ldr	r3, [r7, #20]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	371c      	adds	r7, #28
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bc80      	pop	{r7}
 8004af0:	4770      	bx	lr

08004af2 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b084      	sub	sp, #16
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
 8004afa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004afc:	2300      	movs	r3, #0
 8004afe:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 f85d 	bl	8004bc0 <RTC_EnterInitMode>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d002      	beq.n	8004b12 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	73fb      	strb	r3, [r7, #15]
 8004b10:	e011      	b.n	8004b36 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	0c12      	lsrs	r2, r2, #16
 8004b1a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	b292      	uxth	r2, r2
 8004b24:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f872 	bl	8004c10 <RTC_ExitInitMode>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	81fb      	strh	r3, [r7, #14]
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004b60:	89fb      	ldrh	r3, [r7, #14]
 8004b62:	041a      	lsls	r2, r3, #16
 8004b64:	89bb      	ldrh	r3, [r7, #12]
 8004b66:	4313      	orrs	r3, r2
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bc80      	pop	{r7}
 8004b70:	4770      	bx	lr

08004b72 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b084      	sub	sp, #16
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
 8004b7a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f81d 	bl	8004bc0 <RTC_EnterInitMode>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d002      	beq.n	8004b92 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	73fb      	strb	r3, [r7, #15]
 8004b90:	e011      	b.n	8004bb6 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	683a      	ldr	r2, [r7, #0]
 8004b98:	0c12      	lsrs	r2, r2, #16
 8004b9a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	b292      	uxth	r2, r2
 8004ba4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f832 	bl	8004c10 <RTC_ExitInitMode>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004bcc:	f7fe fbb4 	bl	8003338 <HAL_GetTick>
 8004bd0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004bd2:	e009      	b.n	8004be8 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004bd4:	f7fe fbb0 	bl	8003338 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004be2:	d901      	bls.n	8004be8 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e00f      	b.n	8004c08 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f003 0320 	and.w	r3, r3, #32
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d0ee      	beq.n	8004bd4 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f042 0210 	orr.w	r2, r2, #16
 8004c04:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f022 0210 	bic.w	r2, r2, #16
 8004c2a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004c2c:	f7fe fb84 	bl	8003338 <HAL_GetTick>
 8004c30:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004c32:	e009      	b.n	8004c48 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004c34:	f7fe fb80 	bl	8003338 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c42:	d901      	bls.n	8004c48 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e007      	b.n	8004c58 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f003 0320 	and.w	r3, r3, #32
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0ee      	beq.n	8004c34 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	4603      	mov	r3, r0
 8004c68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004c6e:	79fb      	ldrb	r3, [r7, #7]
 8004c70:	091b      	lsrs	r3, r3, #4
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	461a      	mov	r2, r3
 8004c76:	4613      	mov	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	005b      	lsls	r3, r3, #1
 8004c7e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004c80:	79fb      	ldrb	r3, [r7, #7]
 8004c82:	f003 030f 	and.w	r3, r3, #15
 8004c86:	b2da      	uxtb	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	4413      	add	r3, r2
 8004c8e:	b2db      	uxtb	r3, r3
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3714      	adds	r7, #20
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bc80      	pop	{r7}
 8004c98:	4770      	bx	lr
	...

08004c9c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	70fb      	strb	r3, [r7, #3]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	60bb      	str	r3, [r7, #8]
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004cba:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8004cbc:	78fb      	ldrb	r3, [r7, #3]
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d82d      	bhi.n	8004d1e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8004cc2:	78fa      	ldrb	r2, [r7, #3]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	4413      	add	r3, r2
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	1a9b      	subs	r3, r3, r2
 8004cce:	4a2c      	ldr	r2, [pc, #176]	; (8004d80 <RTC_WeekDayNum+0xe4>)
 8004cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd4:	085a      	lsrs	r2, r3, #1
 8004cd6:	78bb      	ldrb	r3, [r7, #2]
 8004cd8:	441a      	add	r2, r3
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	441a      	add	r2, r3
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	089b      	lsrs	r3, r3, #2
 8004ce4:	441a      	add	r2, r3
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	4926      	ldr	r1, [pc, #152]	; (8004d84 <RTC_WeekDayNum+0xe8>)
 8004cec:	fba1 1303 	umull	r1, r3, r1, r3
 8004cf0:	095b      	lsrs	r3, r3, #5
 8004cf2:	1ad2      	subs	r2, r2, r3
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	4922      	ldr	r1, [pc, #136]	; (8004d84 <RTC_WeekDayNum+0xe8>)
 8004cfa:	fba1 1303 	umull	r1, r3, r1, r3
 8004cfe:	09db      	lsrs	r3, r3, #7
 8004d00:	4413      	add	r3, r2
 8004d02:	1d1a      	adds	r2, r3, #4
 8004d04:	4b20      	ldr	r3, [pc, #128]	; (8004d88 <RTC_WeekDayNum+0xec>)
 8004d06:	fba3 1302 	umull	r1, r3, r3, r2
 8004d0a:	1ad1      	subs	r1, r2, r3
 8004d0c:	0849      	lsrs	r1, r1, #1
 8004d0e:	440b      	add	r3, r1
 8004d10:	0899      	lsrs	r1, r3, #2
 8004d12:	460b      	mov	r3, r1
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	1a5b      	subs	r3, r3, r1
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	60fb      	str	r3, [r7, #12]
 8004d1c:	e029      	b.n	8004d72 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004d1e:	78fa      	ldrb	r2, [r7, #3]
 8004d20:	4613      	mov	r3, r2
 8004d22:	005b      	lsls	r3, r3, #1
 8004d24:	4413      	add	r3, r2
 8004d26:	00db      	lsls	r3, r3, #3
 8004d28:	1a9b      	subs	r3, r3, r2
 8004d2a:	4a15      	ldr	r2, [pc, #84]	; (8004d80 <RTC_WeekDayNum+0xe4>)
 8004d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d30:	085a      	lsrs	r2, r3, #1
 8004d32:	78bb      	ldrb	r3, [r7, #2]
 8004d34:	441a      	add	r2, r3
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	441a      	add	r2, r3
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	089b      	lsrs	r3, r3, #2
 8004d3e:	441a      	add	r2, r3
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	4910      	ldr	r1, [pc, #64]	; (8004d84 <RTC_WeekDayNum+0xe8>)
 8004d44:	fba1 1303 	umull	r1, r3, r1, r3
 8004d48:	095b      	lsrs	r3, r3, #5
 8004d4a:	1ad2      	subs	r2, r2, r3
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	490d      	ldr	r1, [pc, #52]	; (8004d84 <RTC_WeekDayNum+0xe8>)
 8004d50:	fba1 1303 	umull	r1, r3, r1, r3
 8004d54:	09db      	lsrs	r3, r3, #7
 8004d56:	4413      	add	r3, r2
 8004d58:	1c9a      	adds	r2, r3, #2
 8004d5a:	4b0b      	ldr	r3, [pc, #44]	; (8004d88 <RTC_WeekDayNum+0xec>)
 8004d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d60:	1ad1      	subs	r1, r2, r3
 8004d62:	0849      	lsrs	r1, r1, #1
 8004d64:	440b      	add	r3, r1
 8004d66:	0899      	lsrs	r1, r3, #2
 8004d68:	460b      	mov	r3, r1
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	1a5b      	subs	r3, r3, r1
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	b2db      	uxtb	r3, r3
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bc80      	pop	{r7}
 8004d7e:	4770      	bx	lr
 8004d80:	38e38e39 	.word	0x38e38e39
 8004d84:	51eb851f 	.word	0x51eb851f
 8004d88:	24924925 	.word	0x24924925

08004d8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e076      	b.n	8004e8c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d108      	bne.n	8004db8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dae:	d009      	beq.n	8004dc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	61da      	str	r2, [r3, #28]
 8004db6:	e005      	b.n	8004dc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d106      	bne.n	8004de4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7fe f806 	bl	8002df0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dfa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e16:	431a      	orrs	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	431a      	orrs	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e34:	431a      	orrs	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e48:	ea42 0103 	orr.w	r1, r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e50:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	0c1a      	lsrs	r2, r3, #16
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f002 0204 	and.w	r2, r2, #4
 8004e6a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	69da      	ldr	r2, [r3, #28]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e7a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e041      	b.n	8004f2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d106      	bne.n	8004ec0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7fe f8e2 	bl	8003084 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3304      	adds	r3, #4
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	4610      	mov	r0, r2
 8004ed4:	f000 fa64 	bl	80053a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
	...

08004f34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d001      	beq.n	8004f4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e03a      	b.n	8004fc2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2202      	movs	r2, #2
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68da      	ldr	r2, [r3, #12]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a18      	ldr	r2, [pc, #96]	; (8004fcc <HAL_TIM_Base_Start_IT+0x98>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d00e      	beq.n	8004f8c <HAL_TIM_Base_Start_IT+0x58>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f76:	d009      	beq.n	8004f8c <HAL_TIM_Base_Start_IT+0x58>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a14      	ldr	r2, [pc, #80]	; (8004fd0 <HAL_TIM_Base_Start_IT+0x9c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d004      	beq.n	8004f8c <HAL_TIM_Base_Start_IT+0x58>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a13      	ldr	r2, [pc, #76]	; (8004fd4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d111      	bne.n	8004fb0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f003 0307 	and.w	r3, r3, #7
 8004f96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2b06      	cmp	r3, #6
 8004f9c:	d010      	beq.n	8004fc0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f042 0201 	orr.w	r2, r2, #1
 8004fac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fae:	e007      	b.n	8004fc0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f042 0201 	orr.w	r2, r2, #1
 8004fbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bc80      	pop	{r7}
 8004fca:	4770      	bx	lr
 8004fcc:	40012c00 	.word	0x40012c00
 8004fd0:	40000400 	.word	0x40000400
 8004fd4:	40000800 	.word	0x40000800

08004fd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d122      	bne.n	8005034 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d11b      	bne.n	8005034 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f06f 0202 	mvn.w	r2, #2
 8005004:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	f003 0303 	and.w	r3, r3, #3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f9a4 	bl	8005368 <HAL_TIM_IC_CaptureCallback>
 8005020:	e005      	b.n	800502e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 f997 	bl	8005356 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 f9a6 	bl	800537a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	f003 0304 	and.w	r3, r3, #4
 800503e:	2b04      	cmp	r3, #4
 8005040:	d122      	bne.n	8005088 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b04      	cmp	r3, #4
 800504e:	d11b      	bne.n	8005088 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f06f 0204 	mvn.w	r2, #4
 8005058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2202      	movs	r2, #2
 800505e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f97a 	bl	8005368 <HAL_TIM_IC_CaptureCallback>
 8005074:	e005      	b.n	8005082 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f96d 	bl	8005356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 f97c 	bl	800537a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	f003 0308 	and.w	r3, r3, #8
 8005092:	2b08      	cmp	r3, #8
 8005094:	d122      	bne.n	80050dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	f003 0308 	and.w	r3, r3, #8
 80050a0:	2b08      	cmp	r3, #8
 80050a2:	d11b      	bne.n	80050dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f06f 0208 	mvn.w	r2, #8
 80050ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2204      	movs	r2, #4
 80050b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	f003 0303 	and.w	r3, r3, #3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f950 	bl	8005368 <HAL_TIM_IC_CaptureCallback>
 80050c8:	e005      	b.n	80050d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f943 	bl	8005356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f952 	bl	800537a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	f003 0310 	and.w	r3, r3, #16
 80050e6:	2b10      	cmp	r3, #16
 80050e8:	d122      	bne.n	8005130 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	f003 0310 	and.w	r3, r3, #16
 80050f4:	2b10      	cmp	r3, #16
 80050f6:	d11b      	bne.n	8005130 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f06f 0210 	mvn.w	r2, #16
 8005100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2208      	movs	r2, #8
 8005106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f926 	bl	8005368 <HAL_TIM_IC_CaptureCallback>
 800511c:	e005      	b.n	800512a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f919 	bl	8005356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 f928 	bl	800537a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b01      	cmp	r3, #1
 800513c:	d10e      	bne.n	800515c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	2b01      	cmp	r3, #1
 800514a:	d107      	bne.n	800515c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f06f 0201 	mvn.w	r2, #1
 8005154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7fd fcd4 	bl	8002b04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005166:	2b80      	cmp	r3, #128	; 0x80
 8005168:	d10e      	bne.n	8005188 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005174:	2b80      	cmp	r3, #128	; 0x80
 8005176:	d107      	bne.n	8005188 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 fa6b 	bl	800565e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005192:	2b40      	cmp	r3, #64	; 0x40
 8005194:	d10e      	bne.n	80051b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a0:	2b40      	cmp	r3, #64	; 0x40
 80051a2:	d107      	bne.n	80051b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f8ec 	bl	800538c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	f003 0320 	and.w	r3, r3, #32
 80051be:	2b20      	cmp	r3, #32
 80051c0:	d10e      	bne.n	80051e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f003 0320 	and.w	r3, r3, #32
 80051cc:	2b20      	cmp	r3, #32
 80051ce:	d107      	bne.n	80051e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f06f 0220 	mvn.w	r2, #32
 80051d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 fa36 	bl	800564c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051e0:	bf00      	nop
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d101      	bne.n	8005200 <HAL_TIM_ConfigClockSource+0x18>
 80051fc:	2302      	movs	r3, #2
 80051fe:	e0a6      	b.n	800534e <HAL_TIM_ConfigClockSource+0x166>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800521e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005226:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2b40      	cmp	r3, #64	; 0x40
 8005236:	d067      	beq.n	8005308 <HAL_TIM_ConfigClockSource+0x120>
 8005238:	2b40      	cmp	r3, #64	; 0x40
 800523a:	d80b      	bhi.n	8005254 <HAL_TIM_ConfigClockSource+0x6c>
 800523c:	2b10      	cmp	r3, #16
 800523e:	d073      	beq.n	8005328 <HAL_TIM_ConfigClockSource+0x140>
 8005240:	2b10      	cmp	r3, #16
 8005242:	d802      	bhi.n	800524a <HAL_TIM_ConfigClockSource+0x62>
 8005244:	2b00      	cmp	r3, #0
 8005246:	d06f      	beq.n	8005328 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005248:	e078      	b.n	800533c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800524a:	2b20      	cmp	r3, #32
 800524c:	d06c      	beq.n	8005328 <HAL_TIM_ConfigClockSource+0x140>
 800524e:	2b30      	cmp	r3, #48	; 0x30
 8005250:	d06a      	beq.n	8005328 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005252:	e073      	b.n	800533c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005254:	2b70      	cmp	r3, #112	; 0x70
 8005256:	d00d      	beq.n	8005274 <HAL_TIM_ConfigClockSource+0x8c>
 8005258:	2b70      	cmp	r3, #112	; 0x70
 800525a:	d804      	bhi.n	8005266 <HAL_TIM_ConfigClockSource+0x7e>
 800525c:	2b50      	cmp	r3, #80	; 0x50
 800525e:	d033      	beq.n	80052c8 <HAL_TIM_ConfigClockSource+0xe0>
 8005260:	2b60      	cmp	r3, #96	; 0x60
 8005262:	d041      	beq.n	80052e8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005264:	e06a      	b.n	800533c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800526a:	d066      	beq.n	800533a <HAL_TIM_ConfigClockSource+0x152>
 800526c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005270:	d017      	beq.n	80052a2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005272:	e063      	b.n	800533c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6818      	ldr	r0, [r3, #0]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	6899      	ldr	r1, [r3, #8]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	685a      	ldr	r2, [r3, #4]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f000 f965 	bl	8005552 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005296:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	609a      	str	r2, [r3, #8]
      break;
 80052a0:	e04c      	b.n	800533c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6818      	ldr	r0, [r3, #0]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	6899      	ldr	r1, [r3, #8]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f000 f94e 	bl	8005552 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689a      	ldr	r2, [r3, #8]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052c4:	609a      	str	r2, [r3, #8]
      break;
 80052c6:	e039      	b.n	800533c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6818      	ldr	r0, [r3, #0]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	6859      	ldr	r1, [r3, #4]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	461a      	mov	r2, r3
 80052d6:	f000 f8c5 	bl	8005464 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2150      	movs	r1, #80	; 0x50
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 f91c 	bl	800551e <TIM_ITRx_SetConfig>
      break;
 80052e6:	e029      	b.n	800533c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6818      	ldr	r0, [r3, #0]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	6859      	ldr	r1, [r3, #4]
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	461a      	mov	r2, r3
 80052f6:	f000 f8e3 	bl	80054c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2160      	movs	r1, #96	; 0x60
 8005300:	4618      	mov	r0, r3
 8005302:	f000 f90c 	bl	800551e <TIM_ITRx_SetConfig>
      break;
 8005306:	e019      	b.n	800533c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6818      	ldr	r0, [r3, #0]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	6859      	ldr	r1, [r3, #4]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	461a      	mov	r2, r3
 8005316:	f000 f8a5 	bl	8005464 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2140      	movs	r1, #64	; 0x40
 8005320:	4618      	mov	r0, r3
 8005322:	f000 f8fc 	bl	800551e <TIM_ITRx_SetConfig>
      break;
 8005326:	e009      	b.n	800533c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4619      	mov	r1, r3
 8005332:	4610      	mov	r0, r2
 8005334:	f000 f8f3 	bl	800551e <TIM_ITRx_SetConfig>
        break;
 8005338:	e000      	b.n	800533c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800533a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005356:	b480      	push	{r7}
 8005358:	b083      	sub	sp, #12
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800535e:	bf00      	nop
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	bc80      	pop	{r7}
 8005366:	4770      	bx	lr

08005368 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	bc80      	pop	{r7}
 8005378:	4770      	bx	lr

0800537a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800537a:	b480      	push	{r7}
 800537c:	b083      	sub	sp, #12
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005382:	bf00      	nop
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	bc80      	pop	{r7}
 800538a:	4770      	bx	lr

0800538c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	bc80      	pop	{r7}
 800539c:	4770      	bx	lr
	...

080053a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a29      	ldr	r2, [pc, #164]	; (8005458 <TIM_Base_SetConfig+0xb8>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d00b      	beq.n	80053d0 <TIM_Base_SetConfig+0x30>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053be:	d007      	beq.n	80053d0 <TIM_Base_SetConfig+0x30>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a26      	ldr	r2, [pc, #152]	; (800545c <TIM_Base_SetConfig+0xbc>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d003      	beq.n	80053d0 <TIM_Base_SetConfig+0x30>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a25      	ldr	r2, [pc, #148]	; (8005460 <TIM_Base_SetConfig+0xc0>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d108      	bne.n	80053e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	4313      	orrs	r3, r2
 80053e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a1c      	ldr	r2, [pc, #112]	; (8005458 <TIM_Base_SetConfig+0xb8>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d00b      	beq.n	8005402 <TIM_Base_SetConfig+0x62>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053f0:	d007      	beq.n	8005402 <TIM_Base_SetConfig+0x62>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a19      	ldr	r2, [pc, #100]	; (800545c <TIM_Base_SetConfig+0xbc>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d003      	beq.n	8005402 <TIM_Base_SetConfig+0x62>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a18      	ldr	r2, [pc, #96]	; (8005460 <TIM_Base_SetConfig+0xc0>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d108      	bne.n	8005414 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	4313      	orrs	r3, r2
 8005412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	4313      	orrs	r3, r2
 8005420:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	689a      	ldr	r2, [r3, #8]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a07      	ldr	r2, [pc, #28]	; (8005458 <TIM_Base_SetConfig+0xb8>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d103      	bne.n	8005448 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	691a      	ldr	r2, [r3, #16]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	615a      	str	r2, [r3, #20]
}
 800544e:	bf00      	nop
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	bc80      	pop	{r7}
 8005456:	4770      	bx	lr
 8005458:	40012c00 	.word	0x40012c00
 800545c:	40000400 	.word	0x40000400
 8005460:	40000800 	.word	0x40000800

08005464 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005464:	b480      	push	{r7}
 8005466:	b087      	sub	sp, #28
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6a1b      	ldr	r3, [r3, #32]
 8005474:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	f023 0201 	bic.w	r2, r3, #1
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800548e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	011b      	lsls	r3, r3, #4
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	4313      	orrs	r3, r2
 8005498:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	f023 030a 	bic.w	r3, r3, #10
 80054a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	621a      	str	r2, [r3, #32]
}
 80054b6:	bf00      	nop
 80054b8:	371c      	adds	r7, #28
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bc80      	pop	{r7}
 80054be:	4770      	bx	lr

080054c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b087      	sub	sp, #28
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	f023 0210 	bic.w	r2, r3, #16
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	031b      	lsls	r3, r3, #12
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	011b      	lsls	r3, r3, #4
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	4313      	orrs	r3, r2
 8005506:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	621a      	str	r2, [r3, #32]
}
 8005514:	bf00      	nop
 8005516:	371c      	adds	r7, #28
 8005518:	46bd      	mov	sp, r7
 800551a:	bc80      	pop	{r7}
 800551c:	4770      	bx	lr

0800551e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800551e:	b480      	push	{r7}
 8005520:	b085      	sub	sp, #20
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
 8005526:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005534:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005536:	683a      	ldr	r2, [r7, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4313      	orrs	r3, r2
 800553c:	f043 0307 	orr.w	r3, r3, #7
 8005540:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	609a      	str	r2, [r3, #8]
}
 8005548:	bf00      	nop
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	bc80      	pop	{r7}
 8005550:	4770      	bx	lr

08005552 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005552:	b480      	push	{r7}
 8005554:	b087      	sub	sp, #28
 8005556:	af00      	add	r7, sp, #0
 8005558:	60f8      	str	r0, [r7, #12]
 800555a:	60b9      	str	r1, [r7, #8]
 800555c:	607a      	str	r2, [r7, #4]
 800555e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800556c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	021a      	lsls	r2, r3, #8
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	431a      	orrs	r2, r3
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	4313      	orrs	r3, r2
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	4313      	orrs	r3, r2
 800557e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	609a      	str	r2, [r3, #8]
}
 8005586:	bf00      	nop
 8005588:	371c      	adds	r7, #28
 800558a:	46bd      	mov	sp, r7
 800558c:	bc80      	pop	{r7}
 800558e:	4770      	bx	lr

08005590 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d101      	bne.n	80055a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055a4:	2302      	movs	r3, #2
 80055a6:	e046      	b.n	8005636 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a16      	ldr	r2, [pc, #88]	; (8005640 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00e      	beq.n	800560a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055f4:	d009      	beq.n	800560a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a12      	ldr	r2, [pc, #72]	; (8005644 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d004      	beq.n	800560a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a10      	ldr	r2, [pc, #64]	; (8005648 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d10c      	bne.n	8005624 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005610:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	4313      	orrs	r3, r2
 800561a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	bc80      	pop	{r7}
 800563e:	4770      	bx	lr
 8005640:	40012c00 	.word	0x40012c00
 8005644:	40000400 	.word	0x40000400
 8005648:	40000800 	.word	0x40000800

0800564c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	bc80      	pop	{r7}
 800565c:	4770      	bx	lr

0800565e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800565e:	b480      	push	{r7}
 8005660:	b083      	sub	sp, #12
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005666:	bf00      	nop
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	bc80      	pop	{r7}
 800566e:	4770      	bx	lr

08005670 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e03f      	b.n	8005702 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d106      	bne.n	800569c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7fd fd6e 	bl	8003178 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2224      	movs	r2, #36	; 0x24
 80056a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68da      	ldr	r2, [r3, #12]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 f829 	bl	800570c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	691a      	ldr	r2, [r3, #16]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	695a      	ldr	r2, [r3, #20]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68da      	ldr	r2, [r3, #12]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2220      	movs	r2, #32
 80056f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2220      	movs	r2, #32
 80056fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
	...

0800570c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	68da      	ldr	r2, [r3, #12]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	689a      	ldr	r2, [r3, #8]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	431a      	orrs	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	4313      	orrs	r3, r2
 800573a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005746:	f023 030c 	bic.w	r3, r3, #12
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	6812      	ldr	r2, [r2, #0]
 800574e:	68b9      	ldr	r1, [r7, #8]
 8005750:	430b      	orrs	r3, r1
 8005752:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	699a      	ldr	r2, [r3, #24]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	430a      	orrs	r2, r1
 8005768:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a2c      	ldr	r2, [pc, #176]	; (8005820 <UART_SetConfig+0x114>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d103      	bne.n	800577c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005774:	f7fe fdd8 	bl	8004328 <HAL_RCC_GetPCLK2Freq>
 8005778:	60f8      	str	r0, [r7, #12]
 800577a:	e002      	b.n	8005782 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800577c:	f7fe fdc0 	bl	8004300 <HAL_RCC_GetPCLK1Freq>
 8005780:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	4613      	mov	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	009a      	lsls	r2, r3, #2
 800578c:	441a      	add	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	fbb2 f3f3 	udiv	r3, r2, r3
 8005798:	4a22      	ldr	r2, [pc, #136]	; (8005824 <UART_SetConfig+0x118>)
 800579a:	fba2 2303 	umull	r2, r3, r2, r3
 800579e:	095b      	lsrs	r3, r3, #5
 80057a0:	0119      	lsls	r1, r3, #4
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	4613      	mov	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	009a      	lsls	r2, r3, #2
 80057ac:	441a      	add	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80057b8:	4b1a      	ldr	r3, [pc, #104]	; (8005824 <UART_SetConfig+0x118>)
 80057ba:	fba3 0302 	umull	r0, r3, r3, r2
 80057be:	095b      	lsrs	r3, r3, #5
 80057c0:	2064      	movs	r0, #100	; 0x64
 80057c2:	fb00 f303 	mul.w	r3, r0, r3
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	011b      	lsls	r3, r3, #4
 80057ca:	3332      	adds	r3, #50	; 0x32
 80057cc:	4a15      	ldr	r2, [pc, #84]	; (8005824 <UART_SetConfig+0x118>)
 80057ce:	fba2 2303 	umull	r2, r3, r2, r3
 80057d2:	095b      	lsrs	r3, r3, #5
 80057d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057d8:	4419      	add	r1, r3
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	4613      	mov	r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	4413      	add	r3, r2
 80057e2:	009a      	lsls	r2, r3, #2
 80057e4:	441a      	add	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80057f0:	4b0c      	ldr	r3, [pc, #48]	; (8005824 <UART_SetConfig+0x118>)
 80057f2:	fba3 0302 	umull	r0, r3, r3, r2
 80057f6:	095b      	lsrs	r3, r3, #5
 80057f8:	2064      	movs	r0, #100	; 0x64
 80057fa:	fb00 f303 	mul.w	r3, r0, r3
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	011b      	lsls	r3, r3, #4
 8005802:	3332      	adds	r3, #50	; 0x32
 8005804:	4a07      	ldr	r2, [pc, #28]	; (8005824 <UART_SetConfig+0x118>)
 8005806:	fba2 2303 	umull	r2, r3, r2, r3
 800580a:	095b      	lsrs	r3, r3, #5
 800580c:	f003 020f 	and.w	r2, r3, #15
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	440a      	add	r2, r1
 8005816:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005818:	bf00      	nop
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	40013800 	.word	0x40013800
 8005824:	51eb851f 	.word	0x51eb851f

08005828 <__libc_init_array>:
 8005828:	b570      	push	{r4, r5, r6, lr}
 800582a:	2500      	movs	r5, #0
 800582c:	4e0c      	ldr	r6, [pc, #48]	; (8005860 <__libc_init_array+0x38>)
 800582e:	4c0d      	ldr	r4, [pc, #52]	; (8005864 <__libc_init_array+0x3c>)
 8005830:	1ba4      	subs	r4, r4, r6
 8005832:	10a4      	asrs	r4, r4, #2
 8005834:	42a5      	cmp	r5, r4
 8005836:	d109      	bne.n	800584c <__libc_init_array+0x24>
 8005838:	f000 f822 	bl	8005880 <_init>
 800583c:	2500      	movs	r5, #0
 800583e:	4e0a      	ldr	r6, [pc, #40]	; (8005868 <__libc_init_array+0x40>)
 8005840:	4c0a      	ldr	r4, [pc, #40]	; (800586c <__libc_init_array+0x44>)
 8005842:	1ba4      	subs	r4, r4, r6
 8005844:	10a4      	asrs	r4, r4, #2
 8005846:	42a5      	cmp	r5, r4
 8005848:	d105      	bne.n	8005856 <__libc_init_array+0x2e>
 800584a:	bd70      	pop	{r4, r5, r6, pc}
 800584c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005850:	4798      	blx	r3
 8005852:	3501      	adds	r5, #1
 8005854:	e7ee      	b.n	8005834 <__libc_init_array+0xc>
 8005856:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800585a:	4798      	blx	r3
 800585c:	3501      	adds	r5, #1
 800585e:	e7f2      	b.n	8005846 <__libc_init_array+0x1e>
 8005860:	08009070 	.word	0x08009070
 8005864:	08009070 	.word	0x08009070
 8005868:	08009070 	.word	0x08009070
 800586c:	08009074 	.word	0x08009074

08005870 <memset>:
 8005870:	4603      	mov	r3, r0
 8005872:	4402      	add	r2, r0
 8005874:	4293      	cmp	r3, r2
 8005876:	d100      	bne.n	800587a <memset+0xa>
 8005878:	4770      	bx	lr
 800587a:	f803 1b01 	strb.w	r1, [r3], #1
 800587e:	e7f9      	b.n	8005874 <memset+0x4>

08005880 <_init>:
 8005880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005882:	bf00      	nop
 8005884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005886:	bc08      	pop	{r3}
 8005888:	469e      	mov	lr, r3
 800588a:	4770      	bx	lr

0800588c <_fini>:
 800588c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800588e:	bf00      	nop
 8005890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005892:	bc08      	pop	{r3}
 8005894:	469e      	mov	lr, r3
 8005896:	4770      	bx	lr
